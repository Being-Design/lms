"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('cornerstone/adapters/cs-adapter-with-ids', ['exports', 'cornerstone/adapters/cs-adapter', 'npm:uuid'], function (exports, _cornerstoneAdaptersCsAdapter, _npmUuid) {
  exports['default'] = _cornerstoneAdaptersCsAdapter['default'].extend({

    generateIdForRecord: function generateIdForRecord() {
      return _npmUuid['default'].v4();
    }

  });
});
// import Ember from 'ember';
define('cornerstone/adapters/cs-adapter', ['exports', 'ember', 'ember-data/adapters/json-api'], function (exports, _ember, _emberDataAdaptersJsonApi) {
  // import { AdapterError, InvalidError } from 'ember-data/adapters/errors';

  exports['default'] = _emberDataAdaptersJsonApi['default'].extend({

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_findAll
    findAll: function findAll(store, type) {
      return this.get('csAjax').modelRequest(type.modelName);
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_findRecord
    findRecord: function findRecord(store, type, id) {
      return this._request(type.modelName, {
        params: { query: { id: id }, single: true }
      });
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_query
    query: function query(store, type, _query) {
      return this._request(type.modelName, {
        params: { query: _query }
      });
    },

    // should404: false,

    _request: function _request(type, request) {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _this.get('csAjax').modelRequest(type, request).then(function (success) {

          var status = success.errors ? success.errors[0].status : 200;
          var response = _this.handleResponse(status, [], success, request);

          if (response.errors) {
            reject(response);
          } else {
            _ember['default'].run(function () {
              resolve(response);
            });
          }
        }, reject);
      });
    },

    //
    // Caching
    //

    // shouldReloadRecord(store, snapshot) {
    //   return false;
    // },

    // shouldBackgroundReloadRecord(store, snapshot) {
    //   console.log("Calling shouldBackgroundReloadRecord");
    //   const loadedAt = snapshot.record.get('loadedAt');

    //   // if it was loaded more than an hour ago
    //   if (Date.now() - loadedAt > 3600000) {
    //     return true;
    //   } else {
    //     return false;
    //   }
    // },

    createRecord: function createRecord(store, type, snapshot) {
      return this._updateRequest('create', store, type, snapshot);
    },

    updateRecord: function updateRecord(store, type, snapshot) {
      return this._updateRequest('update', store, type, snapshot);
    },

    deleteRecord: function deleteRecord(store, type, snapshot) {
      return this._updateRequest('delete', store, type, snapshot);
    },

    _updateRequest: function _updateRequest(action, store, type, snapshot) {
      return this.get('csAjax').request('adapter::' + type.modelName, {
        action: action,
        params: {
          model: this.serialize(snapshot, { includeId: true }),
          id: snapshot.id
        }
      });
    }

  });
});
define('cornerstone/adapters/cs-client-side-adapter', ['exports', 'ember', 'cornerstone/adapters/cs-read-only-adapter', 'npm:uuid'], function (exports, _ember, _cornerstoneAdaptersCsReadOnlyAdapter, _npmUuid) {
  exports['default'] = _cornerstoneAdaptersCsReadOnlyAdapter['default'].extend({

    firstLoad: false,
    generateIdForRecord: function generateIdForRecord() {
      return _npmUuid['default'].v4();
    },

    shouldBackgroundReloadAll: function shouldBackgroundReloadAll() {
      return false;
    },

    shouldReloadAll: function shouldReloadAll(store, snapshotArray) {
      return _ember['default'].isEmpty(_ember['default'].get(store.peekAll(snapshotArray.type.modelName), 'content'));
    },

    shouldReloadRecord: function shouldReloadRecord() {
      return false;
    },

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return false;
    }

  });
});
define('cornerstone/adapters/cs-longevity-adapter', ['exports', 'ember', 'cornerstone/adapters/cs-read-only-adapter'], function (exports, _ember, _cornerstoneAdaptersCsReadOnlyAdapter) {
  exports['default'] = _cornerstoneAdaptersCsReadOnlyAdapter['default'].extend({
    csBackgroundReloadRefreshRate: 300000,

    shouldReloadRecord: function shouldReloadRecord() {
      return false;
    },

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord(store, snapshot) {

      var loadedAt = snapshot.record.get('loadedAt');
      var now = Date.now();
      if (now - loadedAt > this.csBackgroundReloadRefreshRate) {
        snapshot.record.set('loadedAt', now);
        _ember['default'].Logger.info('Background reloading ' + snapshot.modelName + ' ' + snapshot.id);
        return true;
      } else {
        return false;
      }
    }

  });
});
define('cornerstone/adapters/cs-option-list-adapter', ['exports', 'ember', 'ember-data/adapters/json-api', 'npm:uuid'], function (exports, _ember, _emberDataAdaptersJsonApi, _npmUuid) {
  exports['default'] = _emberDataAdaptersJsonApi['default'].extend({

    filterResponse: function filterResponse(store, type, response) {
      return response;
    },

    // Set this to the option model we're proxying through
    option: null,

    generateIdForRecord: function generateIdForRecord() {
      return _npmUuid['default'].v4();
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_findAll
    findAll: function findAll(store, type) {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        store.findRecord('option', _this.get('option')).then(function (record) {
          resolve(_this.filterResponse(store, type, record.serialize().data.attributes.value));
        }, reject);
      });
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_findRecord
    findRecord: function findRecord(store, type, id) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _this2.findAll(store).then(function () {
          resolve(store.peekRecord(type.modelName, id));
        }, reject);
      });
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_query
    query: function query() {
      console.warn('This adapter does not support query');
    },

    shouldReloadRecord: function shouldReloadRecord() {
      return false;
    },

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return false;
    },

    createRecord: function createRecord(store, type, snapshot) {
      return this._updateRequest('create', store, type, snapshot);
    },

    updateRecord: function updateRecord(store, type, snapshot) {
      return this._updateRequest('update', store, type, snapshot);
    },

    deleteRecord: function deleteRecord(store, type, snapshot) {
      return this._updateRequest('delete', store, type, snapshot);
    },

    _updateRequest: function _updateRequest(action, store, type /*, snapshot */) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {

        var option = store.peekRecord('option', _this3.get('option'));

        var value = store.peekAll(type.modelName).filter(function (record) {
          return !record.get('isDeleted');
        }).sortBy('order').map(function (record) {
          return record.serialize({ includeId: true });
        });

        option.set('value', value);

        option.save().then(function () {
          resolve();
        }, reject);
      });
    }

  });
});
define('cornerstone/adapters/cs-read-only-adapter', ['exports', 'ember', 'cornerstone/adapters/cs-adapter'], function (exports, _ember, _cornerstoneAdaptersCsAdapter) {
  exports['default'] = _cornerstoneAdaptersCsAdapter['default'].extend({

    //
    // Fake persistence
    //

    createRecord: function createRecord() {
      return new _ember['default'].RSVP.Promise(function (resolve) {
        return resolve(undefined);
      });
    },

    updateRecord: function updateRecord() {
      return new _ember['default'].RSVP.Promise(function (resolve) {
        return resolve(undefined);
      });
    },

    deleteRecord: function deleteRecord() {
      return new _ember['default'].RSVP.Promise(function (resolve) {
        return resolve(undefined);
      });
    }

  });
});
define('cornerstone/app', ['exports', 'ember', 'cornerstone/resolver', 'ember-load-initializers', 'cornerstone/config/environment'], function (exports, _ember, _cornerstoneResolver, _emberLoadInitializers, _cornerstoneConfigEnvironment) {

  var App = undefined;

  _ember['default'].MODEL_FACTORY_INJECTIONS = true;

  App = _ember['default'].Application.extend({
    modulePrefix: _cornerstoneConfigEnvironment['default'].modulePrefix,
    podModulePrefix: _cornerstoneConfigEnvironment['default'].podModulePrefix,
    Resolver: _cornerstoneResolver['default']
  });

  (0, _emberLoadInitializers['default'])(App, _cornerstoneConfigEnvironment['default'].modulePrefix);

  exports['default'] = App;
});
define('cornerstone/application/adapter', ['exports', 'cornerstone/adapters/cs-read-only-adapter'], function (exports, _cornerstoneAdaptersCsReadOnlyAdapter) {
  exports['default'] = _cornerstoneAdaptersCsReadOnlyAdapter['default'].extend({});
});
// import Ember from 'ember';
define('cornerstone/application/route', ['exports', 'ember', 'cornerstone/mixins/keyboard-shortcuts/route'], function (exports, _ember, _cornerstoneMixinsKeyboardShortcutsRoute) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsKeyboardShortcutsRoute['default'], {

    ui: _ember['default'].inject.service(),
    preview: _ember['default'].inject.service(),

    keyboardShortcuts: {
      'save': 'save',
      'delete-confirm': {
        action: 'deleteConfirm',
        global: false
      },
      'delete-release': 'deleteRelease',
      'esc': 'cancel'
    },

    shouldBindKeyboardShortcuts: _ember['default'].computed.not('preview.isPreview'),

    shouldLoadPreview: _ember['default'].observer('preview.ready', function () {
      if (this.get('preview.isPreview') && this.get('preview.ready')) {
        this.transitionTo(this.get('preview.initialRoute'));
      }
    }),

    init: function init() {
      this._super.apply(this, arguments);
      this.get('preview').setupPort();
    },

    setupController: function setupController(controller) {
      this._super.apply(this, arguments);
      controller.set('isPreview', this.get('preview.isPreview'));
    },

    actions: {

      save: function save() {
        // Prevent native browser save dialog when this event isn't handled by a child route
      },

      error: function error(_error, transition) {
        console.warn('Transition Error', _error, transition);
      },

      cancel: function cancel() {

        if (this.get('preview.isPreview')) {
          return;
        }

        var $focus = _ember['default'].$('<input type="text" style="opacity:0;position:absolute;">');
        _ember['default'].$('body').append($focus);
        $focus.focus();
        $focus.remove();
      },

      deleteConfirm: function deleteConfirm() {
        this.set('ui.deleteConfirm', true);
      },

      deleteRelease: function deleteRelease() {
        this.set('ui.deleteConfirm', false);
      },

      loading: function loading(transition /* , originRoute */) {
        this.set('ui.transitioning', true);
        transition.promise['finally']((function () {
          this.set('ui.transitioning', false);
        }).bind(this));
      },

      didTransition: function didTransition() {
        var _this = this;

        _ember['default'].run.next(this, function () {
          _this.set('ui.currentRouteName', _this.get('router.currentRouteName'));
        });
        return true;
      }

    }

  });
});
define('cornerstone/application/serializer', ['exports', 'ember-data/serializers/json-api'], function (exports, _emberDataSerializersJsonApi) {
  exports['default'] = _emberDataSerializersJsonApi['default'].extend({

    // normalizeFindRecordResponse(store, type, payload) {
    //   console.log(payload);
    //   return {
    //     data: {
    //       id: payload.id,
    //       type: type.modelName,
    //       attributes: {
    //         // name: payload.name,
    //         // publicRepos: payload.public_repos
    //       }
    //     }
    //   }
    // }
  });
});
define("cornerstone/application/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 2
                },
                "end": {
                  "line": 5,
                  "column": 2
                }
              },
              "moduleName": "cornerstone/application/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "outlet", ["bar"], [], ["loc", [null, [4, 4], [4, 20]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 2
                },
                "end": {
                  "line": 9,
                  "column": 2
                }
              },
              "moduleName": "cornerstone/application/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("    ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "common/tab-modal", [], ["panels", ["subexpr", "@mut", [["get", "ui.cheatsheetItems", ["loc", [null, [8, 30], [8, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "active", ["subexpr", "@mut", [["get", "ui.showCheatsheet", ["loc", [null, [8, 56], [8, 73]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [8, 4], [8, 75]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 0
              },
              "end": {
                "line": 14,
                "column": 0
              }
            },
            "moduleName": "cornerstone/application/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
            morphs[6] = dom.createMorphAt(fragment, 12, 12, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "global/cs-bar", [], [], 0, null, ["loc", [null, [3, 2], [5, 20]]]], ["inline", "outlet", ["global"], [], ["loc", [null, [6, 2], [6, 21]]], 0, 0], ["block", "if", [["get", "ui.routeEnabledCheatsheet", ["loc", [null, [7, 8], [7, 33]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [7, 2], [9, 9]]]], ["content", "global/notification-queue", ["loc", [null, [10, 2], [10, 31]]], 0, 0, 0, 0], ["inline", "common/confirm-modal", [], ["screen", "global"], ["loc", [null, [11, 2], [11, 42]]], 0, 0], ["inline", "global/progress-bar", [], ["saving", ["subexpr", "@mut", [["get", "ui.saving", ["loc", [null, [12, 31], [12, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "transitioning", ["subexpr", "@mut", [["get", "ui.transitioning", ["loc", [null, [12, 55], [12, 71]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [12, 2], [12, 73]]], 0, 0], ["content", "cs-islands", ["loc", [null, [13, 2], [13, 16]]], 0, 0, 0, 0]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "cornerstone/application/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "unless", [["get", "isPreview", ["loc", [null, [2, 10], [2, 19]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [14, 11]]]], ["content", "outlet", ["loc", [null, [15, 0], [15, 10]]], 0, 0, 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "cornerstone/application/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/top-level", [], [], 0, null, ["loc", [null, [1, 0], [16, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/app-version', ['exports', 'ember-cli-app-version/components/app-version', 'cornerstone/config/environment'], function (exports, _emberCliAppVersionComponentsAppVersion, _cornerstoneConfigEnvironment) {

  var name = _cornerstoneConfigEnvironment['default'].APP.name;
  var version = _cornerstoneConfigEnvironment['default'].APP.version;

  exports['default'] = _emberCliAppVersionComponentsAppVersion['default'].extend({
    version: version,
    name: name
  });
});
define('cornerstone/components/bars/region-manager/component', ['exports', 'ember'], function (exports, _ember) {

  function sortFilter(item) {
    return !(item.get('isDeleted') || item.get('parent.isDeleted'));
  }

  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-hf-layout'],

    store: _ember['default'].inject.service(),

    orderSort: ['order'],
    filteredBars: _ember['default'].computed.filter('selectedRegion.children', sortFilter),
    filteredContainers: _ember['default'].computed.filter('selectedBar.children', sortFilter),
    filtered: _ember['default'].computed.filter('selectedContainer.children', sortFilter),
    sortedBars: _ember['default'].computed.sort('filteredBars', 'orderSort'),
    sortedContainers: _ember['default'].computed.sort('filteredContainers', 'orderSort'),
    sortedModules: _ember['default'].computed.sort('filtered', 'orderSort'),

    unsetSelectedContainer: _ember['default'].observer('selectedContainer.isDeleted', function () {
      if (this.get('selectedContainer.isDeleted')) {
        this.set('selectedContainer', null);
      }
    }),

    unsetSelectedBar: _ember['default'].observer('selectedBar.isDeleted', function () {
      if (this.get('selectedBar.isDeleted')) {
        this.set('selectedBar', null);
      }
    }),

    init: function init() {
      this._super.apply(this, arguments);
      this.firstOpen();
    },

    showRegionSelect: _ember['default'].computed.gt('regions.length', 1),

    singleBarRegions: _ember['default'].computed('regions.[]', function () {
      return this.get('regions').filter(function (region) {
        return _ember['default'].get(region, 'oneBar');
      }).map(function (region) {
        return region.value;
      });
    }),

    canAddBar: _ember['default'].computed('selectedRegion', 'sortedBars', 'singleBarRegions.[]', function () {
      return !(this.get('singleBarRegions').includes(this.get('selectedRegion.atts._region')) && this.get('sortedBars.length') > 0);
    }),

    maxBarsMessage: _ember['default'].computed('canAddBar', function () {
      return 'This region only supports a single bar.';
    }),

    moduleSelectorIsShowing: false,

    firstOpen: function firstOpen() {

      if (this.get('inspecting')) {
        this.send('selectModule', this.get('inspecting'));
        return;
      }

      this.sendAction('onFirstOpen');

      var first = this.get('activeRoot.children').find(function (item) {
        return item.get('children.length') > 0;
      });

      var defaultRegion = this.get('regions.firstObject.value');

      this.send('selectRegion', _ember['default'].isNone(first) ? defaultRegion : _ember['default'].getWithDefault(first, 'atts._region', defaultRegion));
    },

    actions: {

      _addAndSelect: function _addAndSelect(parentKey, type, sibling, after) {
        var _this = this;

        var atts = {
          title: this.get('i18n').t('app.new-at-index', {
            item: this.get('store').peekRecord('element/definition', type).get('title'),
            index: this.get(parentKey + '.children.length') + 1
          }).toString()
        };

        if (sibling) {
          this.send('_newModuleFromSibling', type, sibling, atts, after);
        } else {
          this.send('_newModule', this.get(parentKey), type, atts, null, function (module) {
            if (1 === _this.get(parentKey + '.children.length')) {
              _this.send('selectModule', module);
            }
          });
        }
      },

      _newModule: function _newModule(parent, type, atts, index, success) {
        var _this2 = this;

        var addChild = parent.get('addChild');

        if ('function' !== _ember['default'].typeOf(addChild)) {
          return;
        }

        var module = addChild(_ember['default'].merge(atts, {
          _type: type,
          _region: this.get('selectedRegion.atts._region')
        }), index);

        if (module) {
          module.then(function (record) {
            _this2.get('ui.preview.xfr').message('preview:new:element', record.get('id'));
            _this2.sendAction('onNewElement', record);
            if ('function' === _ember['default'].typeOf(success)) {
              success(record);
            }
          });
        }
      },

      _newModuleFromSibling: function _newModuleFromSibling(type, sibling, atts, after) {
        this.send('_newModule', sibling.get('parent'), type, atts, after ? sibling.get('order') + 1 : sibling.get('order'));
      },

      selectRegion: function selectRegion(region) {

        this.send('selectModule', this.get('activeRoot.children').filter(function (item) {
          return 'region' === item.get('atts._type') && item.get('atts._region') === region;
        }).get('firstObject'));
      },

      addBar: function addBar(sibling, after) {
        this.send('_addAndSelect', 'selectedRegion', 'bar', sibling, after);
      },

      addContainer: function addContainer(sibling, after) {
        this.send('_addAndSelect', 'selectedBar', 'container', sibling, after);
      },

      addModule: function addModule(sibling, after) {
        this.set('selectModuleCallback', (function (type) {
          if (sibling) {
            this.send('_newModuleFromSibling', type, sibling, {}, after);
          } else {
            this.send('_newModule', this.get('selectedContainer'), type, {});
          }
          this.set('moduleSelectorIsShowing', false);
        }).bind(this));
        this.set('moduleSelectorIsShowing', true);
      },

      moveModule: function moveModule(module, newIndex) {
        module.get('updatePosition')(newIndex);
      },

      selectModule: function selectModule(module) {
        var _this3 = this;

        var selectableTypes = ['region', 'bar', 'container'];

        // Look up or down to find a container
        function findDeepest(_x) {
          var _again = true;

          _function: while (_again) {
            var module = _x;
            _again = false;

            if (!module) {
              return false;
            }

            var type = _ember['default'].get(module, 'atts._type');

            if (type === 'container') {
              return module;
            }

            if (selectableTypes.includes(type)) {
              var children = _ember['default'].get(module, 'children');
              var child = children.sortBy('order').get('firstObject');
              if (child) {
                _x = child;
                _again = true;
                type = children = child = undefined;
                continue _function;
              } else {
                return module;
              }
            }

            if (module.get('parent.atts._type')) {
              _x = module.get('parent');
              _again = true;
              type = children = child = undefined;
              continue _function;
            }

            return false;
          }
        }

        function fillSelection(next) {
          var selection = {};
          while ('undefined' !== typeof next && selectableTypes.includes(next.get('atts._type'))) {
            selection[next.get('atts._type')] = next;
            next = next.get('parent');
          }
          return selection;
        }

        var container = findDeepest(module);
        if (!container) {
          console.warn('Could not make a layout selection.');
          return;
        }

        var selection = fillSelection(container);

        selectableTypes.forEach(function (item) {
          var path = _ember['default'].String.camelize('selected-' + item);
          if (_this3.get(path) !== selection[item]) {
            _this3.set(path, selection[item]);
          }
        });
      },

      inspectElement: function inspectElement(element) {
        this.sendAction('onInspect', element);
      },

      duplicateModule: function duplicateModule(module) {
        module.duplicate();
        this.sendAction('onDuplicateElement', module);
      },

      deleteModule: function deleteModule(module) {
        this.get('ui').confirm({
          screen: this.get('screen'),
          message: this.get('i18n').t('app.elements-confirm-delete'),
          accept: function accept() {
            module.selfDestruct();
          },
          acceptClass: 'sad'
        });
      },

      closeModuleSelection: function closeModuleSelection() {
        this.set('selectModuleCallback', null);
        this.set('moduleSelectorIsShowing', false);
      },

      chooseNewModuleType: function chooseNewModuleType(type) {
        this.sendAction('selectModuleCallback', type);
      },

      observeStart: function observeStart(element) {
        this.get('ui.preview.xfr').message('preview:observe-start', element.get('id'));
      },

      observeEnd: function observeEnd(element) {
        this.get('ui.preview.xfr').message('preview:observe-end', element.get('id'));
      }

    }
  });
});
define("cornerstone/components/bars/region-manager/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("li");
            var el2 = dom.createElement("span");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element5 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createAttrMorph(element5, 'class');
            morphs[1] = dom.createElementMorph(element5);
            morphs[2] = dom.createMorphAt(element5, 1, 1);
            return morphs;
          },
          statements: [["attribute", "class", ["concat", [["get", "region.value", ["loc", [null, [9, 58], [9, 70]]], 0, 0, 0, 0], " ", ["subexpr", "if", [["subexpr", "eq", [["get", "selectedRegion.atts._region", ["loc", [null, [9, 82], [9, 109]]], 0, 0, 0, 0], ["get", "region.value", ["loc", [null, [9, 110], [9, 122]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 78], [9, 123]]], 0, 0], "cs-active"], [], ["loc", [null, [9, 73], [9, 137]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["selectRegion", ["get", "region.value", ["loc", [null, [9, 34], [9, 46]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 10], [9, 48]]], 0, 0], ["content", "region.label", ["loc", [null, [9, 152], [9, 168]]], 0, 0, 0, 0]],
          locals: ["region"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-hf-layout-item regions");
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("ul");
          var el3 = dom.createTextNode("\n");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("  ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 1]), 1, 1);
          return morphs;
        },
        statements: [["block", "each", [["get", "regions", ["loc", [null, [8, 12], [8, 19]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 4], [10, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 30,
                      "column": 14
                    },
                    "end": {
                      "line": 46,
                      "column": 14
                    }
                  },
                  "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "common/sortable-item", [], ["label", ["subexpr", "@mut", [["get", "bar.title", ["loc", [null, [32, 24], [32, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "item", ["subexpr", "@mut", [["get", "bar", ["loc", [null, [33, 23], [33, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "active", ["subexpr", "eq", [["get", "bar.id", ["loc", [null, [34, 29], [34, 35]]], 0, 0, 0, 0], ["get", "selectedBar.id", ["loc", [null, [34, 36], [34, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [34, 25], [34, 51]]], 0, 0], "showAddAfter", ["subexpr", "eq", [["get", "bar.id", ["loc", [null, [35, 35], [35, 41]]], 0, 0, 0, 0], ["get", "sortedBars.lastObject.id", ["loc", [null, [35, 42], [35, 66]]], 0, 0, 0, 0]], [], ["loc", [null, [35, 31], [35, 67]]], 0, 0], "onDrop", ["subexpr", "action", ["moveModule"], [], ["loc", [null, [36, 25], [36, 47]]], 0, 0], "onAddBefore", ["subexpr", "action", ["addBar", ["get", "bar", ["loc", [null, [37, 47], [37, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [37, 30], [37, 51]]], 0, 0], "onAddAfter", ["subexpr", "action", ["addBar", ["get", "bar", ["loc", [null, [38, 46], [38, 49]]], 0, 0, 0, 0], true], [], ["loc", [null, [38, 29], [38, 55]]], 0, 0], "onSelect", ["subexpr", "action", ["selectModule", ["get", "bar", ["loc", [null, [39, 50], [39, 53]]], 0, 0, 0, 0]], [], ["loc", [null, [39, 27], [39, 54]]], 0, 0], "onInspect", ["subexpr", "action", ["inspectElement", ["get", "bar", ["loc", [null, [40, 53], [40, 56]]], 0, 0, 0, 0]], [], ["loc", [null, [40, 28], [40, 57]]], 0, 0], "onDuplicate", ["subexpr", "action", ["duplicateModule", ["get", "bar", ["loc", [null, [41, 56], [41, 59]]], 0, 0, 0, 0]], [], ["loc", [null, [41, 30], [41, 60]]], 0, 0], "onDelete", ["subexpr", "action", ["deleteModule", ["get", "bar", ["loc", [null, [42, 50], [42, 53]]], 0, 0, 0, 0]], [], ["loc", [null, [42, 27], [42, 54]]], 0, 0], "onMouseEnter", ["subexpr", "action", ["observeStart", ["get", "bar", ["loc", [null, [43, 54], [43, 57]]], 0, 0, 0, 0]], [], ["loc", [null, [43, 31], [43, 58]]], 0, 0], "onMouseLeave", ["subexpr", "action", ["observeEnd", ["get", "bar", ["loc", [null, [44, 52], [44, 55]]], 0, 0, 0, 0]], [], ["loc", [null, [44, 31], [44, 56]]], 0, 0]], ["loc", [null, [31, 16], [45, 18]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 46,
                      "column": 14
                    },
                    "end": {
                      "line": 57,
                      "column": 14
                    }
                  },
                  "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "common/sortable-item", [], ["label", ["subexpr", "@mut", [["get", "bar.title", ["loc", [null, [48, 24], [48, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "item", ["subexpr", "@mut", [["get", "bar", ["loc", [null, [49, 23], [49, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "active", ["subexpr", "eq", [["get", "bar.id", ["loc", [null, [50, 29], [50, 35]]], 0, 0, 0, 0], ["get", "selectedBar.id", ["loc", [null, [50, 36], [50, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [50, 25], [50, 51]]], 0, 0], "onDrop", ["subexpr", "action", ["moveModule"], [], ["loc", [null, [51, 25], [51, 46]]], 0, 0], "onInspect", ["subexpr", "action", ["inspectElement", ["get", "bar", ["loc", [null, [52, 53], [52, 56]]], 0, 0, 0, 0]], [], ["loc", [null, [52, 28], [52, 57]]], 0, 0], "onDelete", ["subexpr", "action", ["deleteModule", ["get", "bar", ["loc", [null, [53, 50], [53, 53]]], 0, 0, 0, 0]], [], ["loc", [null, [53, 27], [53, 54]]], 0, 0], "onMouseEnter", ["subexpr", "action", ["observeStart", ["get", "bar", ["loc", [null, [54, 54], [54, 57]]], 0, 0, 0, 0]], [], ["loc", [null, [54, 31], [54, 58]]], 0, 0], "onMouseLeave", ["subexpr", "action", ["observeEnd", ["get", "bar", ["loc", [null, [55, 52], [55, 55]]], 0, 0, 0, 0]], [], ["loc", [null, [55, 31], [55, 56]]], 0, 0]], ["loc", [null, [47, 16], [56, 18]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 29,
                    "column": 12
                  },
                  "end": {
                    "line": 58,
                    "column": 12
                  }
                },
                "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "canAddBar", ["loc", [null, [30, 20], [30, 29]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [30, 14], [57, 21]]]]],
              locals: ["bar"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 28,
                  "column": 10
                },
                "end": {
                  "line": 59,
                  "column": 10
                }
              },
              "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "sortedBars", ["loc", [null, [29, 20], [29, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 12], [58, 21]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 60,
                  "column": 10
                },
                "end": {
                  "line": 62,
                  "column": 10
                }
              },
              "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "cs-hf-layout-max-bars-message");
              var el2 = dom.createElement("strong");
              var el3 = dom.createTextNode("Note:");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode(" ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 2, 2);
              return morphs;
            },
            statements: [["content", "maxBarsMessage", ["loc", [null, [61, 76], [61, 94]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 4
              },
              "end": {
                "line": 66,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "cs-controls");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "cs-control cs-control-sortable");
            var el3 = dom.createTextNode("\n          ");
            dom.appendChild(el2, el3);
            var el3 = dom.createElement("div");
            dom.setAttribute(el3, "class", "cs-control-header");
            var el4 = dom.createTextNode("\n            ");
            dom.appendChild(el3, el4);
            var el4 = dom.createElement("label");
            var el5 = dom.createTextNode("Bars");
            dom.appendChild(el4, el5);
            dom.appendChild(el3, el4);
            var el4 = dom.createTextNode("\n          ");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("        ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1, 1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(element4, 3, 3);
            morphs[1] = dom.createMorphAt(element4, 4, 4);
            return morphs;
          },
          statements: [["block", "common/sortable-container", [], [], 0, null, ["loc", [null, [28, 10], [59, 40]]]], ["block", "unless", [["get", "canAddBar", ["loc", [null, [60, 20], [60, 29]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [60, 10], [62, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 66,
                "column": 4
              },
              "end": {
                "line": 73,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            dom.setAttribute(el1, "class", "cs-hf-layout-add-first cs-hf-layout-add-first-bar");
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("i");
            dom.setAttribute(el2, "class", "cs-icon");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n        ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createTextNode("Add a bar to get started.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element3 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createElementMorph(element3);
            morphs[1] = dom.createMorphAt(dom.childAt(element3, [1]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["addBar"], [], ["loc", [null, [68, 72], [68, 91]]], 0, 0], ["inline", "fa-icon", ["plus-square"], [], ["loc", [null, [69, 27], [69, 52]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 74,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "sortedBars", ["loc", [null, [21, 10], [21, 20]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [21, 4], [73, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 92,
                      "column": 14
                    },
                    "end": {
                      "line": 108,
                      "column": 14
                    }
                  },
                  "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "common/sortable-item", [], ["label", ["subexpr", "@mut", [["get", "container.title", ["loc", [null, [94, 24], [94, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "item", ["subexpr", "@mut", [["get", "container", ["loc", [null, [95, 23], [95, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "active", ["subexpr", "eq", [["get", "container.id", ["loc", [null, [96, 29], [96, 41]]], 0, 0, 0, 0], ["get", "selectedContainer.id", ["loc", [null, [96, 42], [96, 62]]], 0, 0, 0, 0]], [], ["loc", [null, [96, 25], [96, 63]]], 0, 0], "showAddAfter", ["subexpr", "eq", [["get", "container.id", ["loc", [null, [97, 35], [97, 47]]], 0, 0, 0, 0], ["get", "sortedContainers.lastObject.id", ["loc", [null, [97, 48], [97, 78]]], 0, 0, 0, 0]], [], ["loc", [null, [97, 31], [97, 79]]], 0, 0], "onDrop", ["subexpr", "action", ["moveModule"], [], ["loc", [null, [98, 25], [98, 47]]], 0, 0], "onAddBefore", ["subexpr", "action", ["addContainer", ["get", "container", ["loc", [null, [99, 53], [99, 62]]], 0, 0, 0, 0]], [], ["loc", [null, [99, 30], [99, 63]]], 0, 0], "onAddAfter", ["subexpr", "action", ["addContainer", ["get", "container", ["loc", [null, [100, 52], [100, 61]]], 0, 0, 0, 0], true], [], ["loc", [null, [100, 29], [100, 67]]], 0, 0], "onSelect", ["subexpr", "action", ["selectModule", ["get", "container", ["loc", [null, [101, 50], [101, 59]]], 0, 0, 0, 0]], [], ["loc", [null, [101, 27], [101, 60]]], 0, 0], "onInspect", ["subexpr", "action", ["inspectElement", ["get", "container", ["loc", [null, [102, 53], [102, 62]]], 0, 0, 0, 0]], [], ["loc", [null, [102, 28], [102, 63]]], 0, 0], "onDuplicate", ["subexpr", "action", ["duplicateModule", ["get", "container", ["loc", [null, [103, 56], [103, 65]]], 0, 0, 0, 0]], [], ["loc", [null, [103, 30], [103, 66]]], 0, 0], "onDelete", ["subexpr", "action", ["deleteModule", ["get", "container", ["loc", [null, [104, 50], [104, 59]]], 0, 0, 0, 0]], [], ["loc", [null, [104, 27], [104, 60]]], 0, 0], "onMouseEnter", ["subexpr", "action", ["observeStart", ["get", "container", ["loc", [null, [105, 54], [105, 63]]], 0, 0, 0, 0]], [], ["loc", [null, [105, 31], [105, 64]]], 0, 0], "onMouseLeave", ["subexpr", "action", ["observeEnd", ["get", "container", ["loc", [null, [106, 52], [106, 61]]], 0, 0, 0, 0]], [], ["loc", [null, [106, 31], [106, 62]]], 0, 0]], ["loc", [null, [93, 16], [107, 18]]], 0, 0]],
                locals: ["container"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 91,
                    "column": 12
                  },
                  "end": {
                    "line": 109,
                    "column": 12
                  }
                },
                "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "sortedContainers", ["loc", [null, [92, 22], [92, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [92, 14], [108, 23]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 84,
                  "column": 6
                },
                "end": {
                  "line": 113,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "cs-controls");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2, "class", "cs-control cs-control-sortable");
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "cs-control-header");
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("label");
              var el5 = dom.createTextNode("Containers");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 3, 3);
              return morphs;
            },
            statements: [["block", "common/sortable-container", [], [], 0, null, ["loc", [null, [91, 12], [109, 42]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 113,
                  "column": 6
                },
                "end": {
                  "line": 120,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "cs-hf-layout-add-first cs-hf-layout-add-first-container");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "cs-icon");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createTextNode("Add your first container to this bar.");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element2);
              morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["addContainer"], [], ["loc", [null, [115, 80], [115, 105]]], 0, 0], ["inline", "fa-icon", ["plus-square"], [], ["loc", [null, [116, 29], [116, 54]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 83,
                "column": 4
              },
              "end": {
                "line": 121,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "sortedContainers", ["loc", [null, [84, 12], [84, 28]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [84, 6], [120, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 82,
              "column": 2
            },
            "end": {
              "line": 122,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "common/scroll-box", [], ["name", "containers", "resetScrollOn", ["subexpr", "@mut", [["get", "sortedContainers", ["loc", [null, [83, 57], [83, 73]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [83, 4], [121, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 140,
                      "column": 14
                    },
                    "end": {
                      "line": 154,
                      "column": 14
                    }
                  },
                  "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "common/sortable-item", [], ["canEditLabel", false, "label", ["subexpr", "@mut", [["get", "module.title", ["loc", [null, [143, 24], [143, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "item", ["subexpr", "@mut", [["get", "module", ["loc", [null, [144, 23], [144, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "onDrop", ["subexpr", "action", ["moveModule"], [], ["loc", [null, [144, 37], [144, 59]]], 0, 0], "showAddAfter", ["subexpr", "eq", [["get", "module.id", ["loc", [null, [145, 35], [145, 44]]], 0, 0, 0, 0], ["get", "sortedModules.lastObject.id", ["loc", [null, [145, 45], [145, 72]]], 0, 0, 0, 0]], [], ["loc", [null, [145, 31], [145, 73]]], 0, 0], "onAddBefore", ["subexpr", "action", ["addModule", ["get", "module", ["loc", [null, [146, 50], [146, 56]]], 0, 0, 0, 0]], [], ["loc", [null, [146, 30], [146, 57]]], 0, 0], "onAddAfter", ["subexpr", "action", ["addModule", ["get", "module", ["loc", [null, [147, 49], [147, 55]]], 0, 0, 0, 0], true], [], ["loc", [null, [147, 29], [147, 61]]], 0, 0], "onInspect", ["subexpr", "action", ["inspectElement", ["get", "module", ["loc", [null, [148, 53], [148, 59]]], 0, 0, 0, 0]], [], ["loc", [null, [148, 28], [148, 60]]], 0, 0], "onDuplicate", ["subexpr", "action", ["duplicateModule", ["get", "module", ["loc", [null, [149, 56], [149, 62]]], 0, 0, 0, 0]], [], ["loc", [null, [149, 30], [149, 63]]], 0, 0], "onDelete", ["subexpr", "action", ["deleteModule", ["get", "module", ["loc", [null, [150, 50], [150, 56]]], 0, 0, 0, 0]], [], ["loc", [null, [150, 27], [150, 57]]], 0, 0], "onMouseEnter", ["subexpr", "action", ["observeStart", ["get", "module", ["loc", [null, [151, 54], [151, 60]]], 0, 0, 0, 0]], [], ["loc", [null, [151, 31], [151, 61]]], 0, 0], "onMouseLeave", ["subexpr", "action", ["observeEnd", ["get", "module", ["loc", [null, [152, 52], [152, 58]]], 0, 0, 0, 0]], [], ["loc", [null, [152, 31], [152, 59]]], 0, 0]], ["loc", [null, [141, 16], [153, 18]]], 0, 0]],
                locals: ["module"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 139,
                    "column": 12
                  },
                  "end": {
                    "line": 155,
                    "column": 12
                  }
                },
                "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "each", [["get", "sortedModules", ["loc", [null, [140, 22], [140, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [140, 14], [154, 23]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 132,
                  "column": 6
                },
                "end": {
                  "line": 159,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "cs-controls");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2, "class", "cs-control cs-control-sortable");
              var el3 = dom.createTextNode("\n            ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "cs-control-header");
              var el4 = dom.createTextNode("\n              ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("label");
              var el5 = dom.createTextNode("Elements");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("          ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 3, 3);
              return morphs;
            },
            statements: [["block", "common/sortable-container", [], [], 0, null, ["loc", [null, [139, 12], [155, 42]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 159,
                  "column": 6
                },
                "end": {
                  "line": 166,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              dom.setAttribute(el1, "class", "cs-hf-layout-add-first cs-hf-layout-add-first-module");
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("i");
              dom.setAttribute(el2, "class", "cs-icon");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n          ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createTextNode("Add your first module to this container.");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createElementMorph(element1);
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
              return morphs;
            },
            statements: [["element", "action", ["addModule"], [], ["loc", [null, [161, 77], [161, 99]]], 0, 0], ["inline", "fa-icon", ["plus-square"], [], ["loc", [null, [162, 29], [162, 54]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 131,
                "column": 4
              },
              "end": {
                "line": 167,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "sortedModules", ["loc", [null, [132, 12], [132, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [132, 6], [166, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 130,
              "column": 2
            },
            "end": {
              "line": 168,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "common/scroll-box", [], ["name", "modules", "resetScrollOn", ["subexpr", "@mut", [["get", "sortedModules", ["loc", [null, [131, 54], [131, 67]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [131, 4], [167, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 181,
                "column": 10
              },
              "end": {
                "line": 186,
                "column": 10
              }
            },
            "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cs-hf-layout-module-selector-module");
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n              ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n            ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(3);
            morphs[0] = dom.createElementMorph(element0);
            morphs[1] = dom.createMorphAt(element0, 1, 1);
            morphs[2] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
            return morphs;
          },
          statements: [["element", "action", ["chooseNewModuleType", ["get", "definition.id", ["loc", [null, [182, 48], [182, 61]]], 0, 0, 0, 0]], [], ["loc", [null, [182, 17], [182, 64]]], 0, 0], ["inline", "cs-icon", [["get", "definition.iconPath", ["loc", [null, [183, 24], [183, 43]]], 0, 0, 0, 0]], [], ["loc", [null, [183, 14], [183, 45]]], 0, 0], ["content", "definition.title", ["loc", [null, [184, 20], [184, 40]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 180,
              "column": 8
            },
            "end": {
              "line": 187,
              "column": 8
            }
          },
          "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "definition.isSelectable", ["loc", [null, [181, 16], [181, 39]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [181, 10], [186, 17]]]]],
        locals: ["definition"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 193,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/bars/region-manager/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-hf-layout-item bars");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-hf-layout-item containers");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-hf-layout-item modules");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("button");
        dom.setAttribute(el2, "class", "cs-hf-layout-module-selector-close");
        var el3 = dom.createTextNode("×");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cs-hf-layout-module-selector-content-outer");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cs-hf-layout-module-selector-content-inner");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "cs-hf-layout-module-selector-modules");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element6 = dom.childAt(fragment, [14]);
        var element7 = dom.childAt(element6, [1]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [5]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [8]), 1, 1);
        morphs[3] = dom.createMorphAt(dom.childAt(fragment, [11]), 1, 1);
        morphs[4] = dom.createAttrMorph(element6, 'class');
        morphs[5] = dom.createElementMorph(element7);
        morphs[6] = dom.createMorphAt(dom.childAt(element6, [3, 1, 1]), 1, 1);
        morphs[7] = dom.createMorphAt(fragment, 16, 16, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["get", "showRegionSelect", ["loc", [null, [5, 6], [5, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 0], [13, 7]]]], ["block", "common/scroll-box", [], ["name", "bars", "resetScrollOn", ["subexpr", "@mut", [["get", "sortedBars", ["loc", [null, [20, 49], [20, 59]]], 0, 0, 0, 0]], [], [], 0, 0]], 1, null, ["loc", [null, [20, 2], [74, 24]]]], ["block", "if", [["get", "selectedBar", ["loc", [null, [82, 8], [82, 19]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [82, 2], [122, 9]]]], ["block", "if", [["get", "selectedContainer", ["loc", [null, [130, 8], [130, 25]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [130, 2], [168, 9]]]], ["attribute", "class", ["concat", ["cs-hf-layout-module-selector ", ["subexpr", "if", [["get", "moduleSelectorIsShowing", ["loc", [null, [175, 47], [175, 70]]], 0, 0, 0, 0], "cs-active"], [], ["loc", [null, [175, 41], [175, 84]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["closeModuleSelection"], [], ["loc", [null, [176, 10], [176, 43]]], 0, 0], ["block", "each", [["get", "moduleDefinitions", ["loc", [null, [180, 16], [180, 33]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [180, 8], [187, 17]]]], ["content", "yield", ["loc", [null, [192, 0], [192, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('cornerstone/components/builder/builder-shim/component', ['exports', 'ember', 'cornerstone/mixins/preview-listener'], function (exports, _ember, _cornerstoneMixinsPreviewListener) {
  exports['default'] = _ember['default'].Component.extend(_cornerstoneMixinsPreviewListener['default'], {

    ready: false,

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);
      this.listenTo('builder:shim', function (message) {
        return _this.sendAction('message', message);
      });
    },

    didInsertElement: function didInsertElement() {
      var _this2 = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this2.set('ui.skeletonModeActive', false);
        _this2.set('ui.showPreviewSizer', false);
        _this2.set('ui.showCustomCSS', false);
        _this2.set('ui.showCustomJS', false);
        _this2.get('ui.isCollapsed', false);
        _this2.set('ready', true);
      });
    },

    observeSkeleton: _ember['default'].observer('ui.skeletonModeActive', function () {
      this.shimMessage('toggleSkeleton', this.get('ui.skeletonModeActive'));
    }),

    observeShowPreviewSizer: _ember['default'].observer('ui.showPreviewSizer', function () {
      this.shimMessage('togglePreviewSizer', this.get('ui.showPreviewSizer'));
    }),

    observeShowCustomCSS: _ember['default'].observer('ui.showCustomCSS', function () {
      this.shimMessage('toggleCustomCSS', this.get('ui.showCustomCSS'));
    }),

    observeShowCustomJS: _ember['default'].observer('ui.showCustomJS', function () {
      this.shimMessage('toggleCustomJS', this.get('ui.showCustomJS'));
    }),

    observeIsCollapsed: _ember['default'].observer('ui.isCollapsed', function () {
      this.shimMessage('toggleIsCollapsed', this.get('ui.isCollapsed'));
    }),

    shimMessage: function shimMessage(action, data) {
      if (this.get('ready')) {
        this.get('xfr').message(action, data);
      }
    }

  });
});
define("cornerstone/components/builder/builder-shim/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/builder/builder-shim/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/click-outside', ['exports', 'ember-click-outside/components/click-outside'], function (exports, _emberClickOutsideComponentsClickOutside) {
  exports['default'] = _emberClickOutsideComponentsClickOutside['default'];
});
define('cornerstone/components/common/bread-crumbs/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',

    classNames: ['cs-bread-crumbs'],
    labelKey: 'title',

    breadcrumbs: _ember['default'].computed('items.[]', 'labelKey', 'activeItem', function () {
      var labelKey = this.get('labelKey');
      var activeItem = this.get('activeItem');
      return this.getWithDefault('items', []).map(function (item) {
        return {
          entity: item,
          label: item.get(labelKey),
          active: item === activeItem
        };
      });
    }),

    isVisible: _ember['default'].computed('activeItem', 'breadcrumbs.[]', function () {
      return this.get('activeItem') && this.get('breadcrumbs').length > 0;
    }),

    actions: {
      navigate: function navigate(entity) {
        this.sendAction('onNavigate', entity);
      },
      mouseEnter: function mouseEnter(item) {
        this.sendAction('onMouseEnter', item);
      },
      mouseLeave: function mouseLeave(item) {
        this.sendAction('onMouseLeave', item);
      }
    }
  });
});
define("cornerstone/components/common/bread-crumbs/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/bread-crumbs/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("a");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'onmouseenter');
          morphs[1] = dom.createAttrMorph(element0, 'onmouseleave');
          morphs[2] = dom.createAttrMorph(element0, 'class');
          morphs[3] = dom.createElementMorph(element0);
          morphs[4] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "onmouseenter", ["subexpr", "action", ["mouseEnter", ["get", "breadcrumb", ["loc", [null, [4, 39], [4, 49]]], 0, 0, 0, 0]], [], ["loc", [null, [null, null], [4, 51]]], 0, 0], 0, 0, 0, 0], ["attribute", "onmouseleave", ["subexpr", "action", ["mouseLeave", ["get", "breadcrumb", ["loc", [null, [5, 39], [5, 49]]], 0, 0, 0, 0]], [], ["loc", [null, [null, null], [5, 51]]], 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "breadcrumb.active", ["loc", [null, [6, 16], [6, 33]]], 0, 0, 0, 0], "cs-active"], [], ["loc", [null, [6, 11], [6, 47]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["navigate", ["get", "breadcrumb.entity", ["loc", [null, [3, 27], [3, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 7], [3, 46]]], 0, 0], ["content", "breadcrumb.label", ["loc", [null, [6, 49], [6, 69]]], 0, 0, 0, 0]],
        locals: ["breadcrumb"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/bread-crumbs/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "breadcrumbs", ["loc", [null, [1, 8], [1, 19]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [7, 9]]]], ["content", "yield", ["loc", [null, [8, 0], [8, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/common/confirm-modal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    active: false,
    classNames: ['cs-action-modal-outer'],
    classNameBindings: ['screenClass', 'active:cs-active'],

    screenClass: _ember['default'].computed('screen', function () {
      var screen = this.get('screen');
      if (!screen) {
        return '';
      }
      return 'cs-action-modal-' + _ember['default'].String.dasherize(this.get('screen'));
    }),

    init: function init() {

      this._super.apply(this, arguments);
      var screen = this.get('screen');

      if (!screen) {
        console.warn('Confirm modals need an assigned screen');
      }

      this.set('ui.confirmHandlers.' + screen, this.confirm.bind(this));
    },

    confirm: function confirm(params) {

      params = _ember['default'].merge({

        // Callbacks. Null will always close the modal
        accept: null,
        decline: null,

        message: '',
        'class': '',
        acceptBtn: this.get('i18n').t('app.confirm-yep'),
        declineBtn: this.get('i18n').t('app.confirm-nope'),
        back: false,
        backBtn: this.get('i18n').t('app.confirm-back'),
        backBtnClass: '',
        acceptClass: '',
        declineClass: ''
      }, params);

      if (params.screen !== this.get('screen')) {
        return;
      }

      if (params.back) {
        params.declineBtn = params.backBtn;
        params.declineClass = params.backClass;
      }

      this.setProperties({
        message: params.message,
        acceptCallback: params.accept,
        declineCallback: params.decline,
        showAcceptBtn: !!params.accept,
        acceptBtn: params.acceptBtn,
        declineBtn: params.declineBtn,
        acceptClass: params.acceptClass,
        declineClass: params.declineClass
      });

      this.set('active', true);
    },

    actions: {
      accept: function accept() {
        var cb = this.get('acceptCallback');
        if ('function' === _ember['default'].typeOf(cb)) {
          cb();
        }
        this.set('active', false);
      },
      decline: function decline() {
        var cb = this.get('declineCallback');
        if ('function' === _ember['default'].typeOf(cb)) {
          cb();
        }
        this.set('active', false);
      }
    }

  });
});
define("cornerstone/components/common/confirm-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 7,
              "column": 6
            }
          },
          "moduleName": "cornerstone/components/common/confirm-modal/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["get", "acceptClass", ["loc", [null, [6, 25], [6, 36]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["accept"], [], ["loc", [null, [6, 40], [6, 59]]], 0, 0], ["content", "acceptBtn", ["loc", [null, [6, 60], [6, 73]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/confirm-modal/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-action-modal-inner");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cs-action-modal-content");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cs-action-modal-message");
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cs-action-modal-actions");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("button");
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0, 1]);
        var element2 = dom.childAt(element1, [3]);
        var element3 = dom.childAt(element2, [3]);
        var morphs = new Array(5);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createAttrMorph(element3, 'class');
        morphs[3] = dom.createElementMorph(element3);
        morphs[4] = dom.createMorphAt(element3, 0, 0);
        return morphs;
      },
      statements: [["content", "message", ["loc", [null, [3, 41], [3, 52]]], 0, 0, 0, 0], ["block", "if", [["get", "showAcceptBtn", ["loc", [null, [5, 12], [5, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 6], [7, 13]]]], ["attribute", "class", ["concat", [["get", "declineClass", ["loc", [null, [8, 23], [8, 35]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["decline"], [], ["loc", [null, [8, 39], [8, 59]]], 0, 0], ["content", "declineBtn", ["loc", [null, [8, 60], [8, 74]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/common/control-box/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-control cs-control-box'],

    showHeader: _ember['default'].computed('label', function () {
      return _ember['default'].isPresent(this.get('label'));
    })

  });
});
define("cornerstone/components/common/control-box/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/control-box/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-control-input");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["partials/controls/control-header"], [], ["loc", [null, [1, 0], [1, 46]]], 0, 0], ["content", "yield", ["loc", [null, [3, 2], [3, 11]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/control-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-controls'],
    actions: {
      searchNav: function searchNav(control) {
        this.sendAction('onSearchNavigate', control);
      }
    }
  });
});
define("cornerstone/components/common/control-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 4
                  },
                  "end": {
                    "line": 7,
                    "column": 4
                  }
                },
                "moduleName": "cornerstone/components/common/control-list/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("a");
                dom.setAttribute(el1, "class", "cs-control-nav");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var element0 = dom.childAt(fragment, [1]);
                var morphs = new Array(2);
                morphs[0] = dom.createElementMorph(element0);
                morphs[1] = dom.createMorphAt(element0, 0, 0);
                return morphs;
              },
              statements: [["element", "action", ["searchNav", ["get", "control", ["loc", [null, [6, 53], [6, 60]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 32], [6, 63]]], 0, 0], ["inline", "fa-icon", ["search-plus"], [], ["loc", [null, [6, 64], [6, 89]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 2
                },
                "end": {
                  "line": 8,
                  "column": 2
                }
              },
              "moduleName": "cornerstone/components/common/control-list/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isSearching", ["loc", [null, [5, 10], [5, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 4], [7, 11]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/common/control-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "component", [["subexpr", "locate-component", [["subexpr", "concat", ["controls/control-", ["get", "control.type", ["loc", [null, [4, 61], [4, 73]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 33], [4, 75]]], 0, 0], "controls/control-base"], [], ["loc", [null, [4, 15], [4, 101]]], 0, 0]], ["control", ["subexpr", "@mut", [["get", "control", ["loc", [null, [4, 110], [4, 117]]], 0, 0, 0, 0]], [], [], 0, 0], "hidden", ["subexpr", "or", [["subexpr", "contains", [["get", "control.id", ["loc", [null, [4, 139], [4, 149]]], 0, 0, 0, 0], ["get", "hiddenControls", ["loc", [null, [4, 150], [4, 164]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 129], [4, 165]]], 0, 0], ["get", "control.isHidden", ["loc", [null, [4, 166], [4, 182]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 125], [4, 183]]], 0, 0]], 0, null, ["loc", [null, [4, 2], [8, 16]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/control-list/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["subexpr", "contains", [["get", "control.id", ["loc", [null, [3, 22], [3, 32]]], 0, 0, 0, 0], ["get", "hiddenControls", ["loc", [null, [3, 33], [3, 47]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 12], [3, 48]]], 0, 0]], [], 0, null, ["loc", [null, [3, 2], [9, 13]]]]],
        locals: ["control"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/control-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0], ["block", "each", [["get", "controls", ["loc", [null, [2, 8], [2, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [10, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/common/cs-picker/component', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  exports['default'] = _ember['default'].Component.extend({

    rootSelector: '.cs-app',
    modalInPosition: false,

    classNames: ['cs-picker'],
    classNameBindings: ['class', 'open:cs-active'],
    floatingSide: 'right',
    scrollEvent: 'ps-y-reach-start ps-scroll-y ps-y-reach-end ps-x-reach-start ps-scroll-x ps-x-reach-end',
    modalMode: 'hide',

    attrModalClass: _ember['default'].computed('modalClass', function () {
      return 'cs-picker-modal ' + this.get('modalClass');
    }),

    canDisplayModal: _ember['default'].computed('modalInPosition', 'modalMode', function () {
      if ('hide' === this.get('modalMode')) {
        return true;
      }
      return this.get('modalInPosition');
    }),

    onInit: _ember['default'].on('init', function () {
      this.triggerExternalOpen();
    }),

    observeExternalOpen: _ember['default'].observer('externalOpen', function () {
      this.triggerExternalOpen();
    }),

    triggerExternalOpen: function triggerExternalOpen() {
      if (this.get('externalOpen')) {
        this.set('open', true);
      }
    },

    didInsertElement: function didInsertElement() {
      this.$modal = this.$('.cs-picker-modal');
      this.set('hasRendered', true);
      this.updatePositioning();
      // if ( this.get('debug') ) {
      //   document.addEventListener('mousemove', (e) => {
      //     this.$('.cs-picker-swatch').css({
      //       position: 'fixed',
      //       width: '200px',
      //       left: e.clientX - 50,
      //       top: e.clientY - 25
      //     });
      //     this.updatePositioning();
      //   });
      // }
    },

    observeState: _ember['default'].observer('open', function () {
      this.updatePositioning();
    }),

    updatePositioning: function updatePositioning() {
      var _this = this;

      if (!this.get('hasRendered')) {
        this.set('modalInPosition', false);
        return;
      }

      var $body = (0, _jquery['default'])('body');
      var $window = (0, _jquery['default'])(window);
      var $scrollContainer = $window;
      var $swatch = this.$('.cs-picker-swatch');
      var $el = this.$();

      var loseFocus = function loseFocus(e) {

        if ($el[0] === e.currentTarget || _this.$modal[0] === e.currentTarget || _jquery['default'].contains($el[0], e.currentTarget) || !_jquery['default'].contains(_this.get('ui.topLevelEl'), e.currentTarget) || _jquery['default'].contains(_this.$modal[0], e.currentTarget)) {
          e.stopPropagation();
          return;
        }

        $body.off('focus', '*', loseFocus);
        $body.off('click', '*', loseFocus);

        if (!_this.isDestroyed) {
          _this.set('open', false);
          _this.sendAction('onStateChange', false);
        }
      };

      var move = function move() {

        var s = $swatch[0].getBoundingClientRect();
        var m = _this.$modal[0].getBoundingClientRect();

        var offsets = {
          t: s.top - m.height,
          b: $window.height() - (s.top + m.height),
          l: s.left - m.width,
          r: $window.width() - (s.right + m.width)
        };

        var h = false;
        var v = true;

        if (offsets.t < 0) {
          v = offsets.b < 0 ? offsets.b < offsets.t : false;
        }

        if (offsets.r < 0) {
          h = offsets.l < 0 ? offsets.l > offsets.r : true;
        }

        _this.$modal.removeClass('cs-picker-floating-left huebert-floating-right').addClass(h ? 'cs-picker-floating-left' : 'cs-picker-floating-right').css({
          top: v ? s.bottom - m.height : s.top,
          left: h ? s.left - m.width : s.right
        });

        if (!_this.$modal.hasClass('cs-picker-floating')) {
          $scrollContainer.off(_this.get('scrollEvent'), move);
          $window.off('resize', move);
        }
      };

      if (this.get('open')) {

        this.$modal.detach().appendTo(this.get('rootSelector'));
        this.$modal.css('visibility', 'hidden').addClass('cs-picker-floating');
        this.$modal.removeAttr('style');
        move();

        $scrollContainer.on(this.get('scrollEvent'), move);
        $window.on('resize', move);
        $body.on('focus', '*', loseFocus);
        $body.on('click', '*', loseFocus);
        this.set('modalInPosition', true);
      } else {
        this.$modal.removeClass('cs-picker-floating cs-picker-floating-left cs-picker-floating-right');
        this.set('modalInPosition', false);
        this.$modal.detach().appendTo(this.$());
      }
    },

    willDestroy: function willDestroy() {
      this._super.apply(this, arguments);
      this.set('false');
      this.$modal.remove();
    },

    actions: {
      toggle: function toggle() {
        this.set('open', !this.get('open'));
        this.sendAction('onStateChange', this.get('open'));
      }
    }
  });
});
define("cornerstone/components/common/cs-picker/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/cs-picker/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [3, 10], [3, 21]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/cs-picker/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["get", "contentComponent", ["loc", [null, [7, 16], [7, 32]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 4], [7, 34]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 12,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/cs-picker/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["subexpr", "hash", [], ["open", ["get", "open", ["loc", [null, [13, 23], [13, 27]]], 0, 0, 0, 0]], ["loc", [null, [13, 12], [13, 28]]], 0, 0]], [], ["loc", [null, [13, 4], [13, 30]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/cs-picker/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-picker-swatch");
        dom.setAttribute(el1, "tabindex", "-1");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(element0, 3, 3);
        morphs[3] = dom.createMorphAt(element0, 5, 5);
        morphs[4] = dom.createAttrMorph(element1, 'class');
        morphs[5] = dom.createMorphAt(element1, 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["toggle"], [], ["loc", [null, [1, 44], [1, 63]]], 0, 0], ["block", "if", [["get", "label", ["loc", [null, [2, 8], [2, 13]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["content", "content", ["loc", [null, [5, 2], [5, 13]]], 0, 0, 0, 0], ["block", "if", [["get", "contentComponent", ["loc", [null, [6, 8], [6, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [6, 2], [8, 9]]]], ["attribute", "class", ["get", "attrModalClass", ["loc", [null, [11, 13], [11, 27]]], 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "canDisplayModal", ["loc", [null, [12, 8], [12, 23]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [12, 2], [14, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/components/common/defer-view/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNameBindings: ['class'],
    enabled: true,
    ready: false,
    defer: true,

    show: _ember['default'].computed('ready', 'hide', function () {
      return this.get('ready') && !this.get('hide');
    }),

    didReceiveAttrs: function didReceiveAttrs() {
      if (!this.get('defer')) {
        this.set('ready', true);
      }
    },

    didInsertElement: function didInsertElement() {
      var _this = this;

      if (this.get('ready')) {
        return;
      }

      _ember['default'].run.scheduleOnce('afterRender', function () {

        var scrollBoxRect = _this.$().closest('.cs-scroll-box')[0].getBoundingClientRect();
        var myRect = _this.get('element').getBoundingClientRect();

        if (myRect.top <= scrollBoxRect.bottom && myRect.right >= scrollBoxRect.left && myRect.bottom >= scrollBoxRect.top && myRect.left <= scrollBoxRect.right) {
          _this.set('ready', true);
        } else {
          _ember['default'].run.later('afterRender', function () {
            _this.set('ready', true);
          }, 10);
        }
      });
    }

  });
});
define("cornerstone/components/common/defer-view/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/defer-view/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/defer-view/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "show", ["loc", [null, [1, 6], [1, 10]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/common/file-upload/component', ['exports', 'ember', 'npm:dropzone'], function (exports, _ember, _npmDropzone) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-file-upload', 'dropzone'],
    maxFiles: 1,

    didInsertElement: function didInsertElement() {

      var $blankState = this.$('[data-dropzone-template="blank-state"]');
      var $preview = this.$('[data-dropzone-template="preview"]');

      this.dropzone = new _npmDropzone['default'](this.get('element'), {
        url: 'na',
        dictDefaultMessage: $blankState.html(),
        previewTemplate: $preview.html(),
        maxFiles: this.get('maxFiles'),
        accept: function accept(file, done) {
          // if (file.name === "justinbieber.jpg") {
          //   done("Naha, you don't.");
          // }
          // else { done(); }
          done();
        }
      });

      $blankState.remove();
      $preview.remove();
    }

  });
});
define("cornerstone/components/common/file-upload/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 2
            },
            "end": {
              "line": 28,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/file-upload/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [27, 4], [27, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 28,
              "column": 2
            },
            "end": {
              "line": 35,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/file-upload/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-file-upload-import-welcome");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "cs-file-upload-import-welcome-icon");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "cs-file-upload-import-welcome-text");
          var el3 = dom.createElement("strong");
          var el4 = dom.createTextNode("Choose a header data file");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" or drag it here to import.");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
          return morphs;
        },
        statements: [["inline", "cs-icon", ["interface/index-choice-import"], [], ["loc", [null, [31, 8], [31, 51]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 36,
            "column": 6
          }
        },
        "moduleName": "cornerstone/components/common/file-upload/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "data-dropzone-template", "preview");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "dz-preview dz-file-preview");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dz-details");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "dz-filename");
        var el5 = dom.createTextNode("\n        ");
        dom.appendChild(el4, el5);
        var el5 = dom.createElement("span");
        dom.setAttribute(el5, "data-dz-name", "");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("\n      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("div");
        dom.setAttribute(el4, "class", "dz-size");
        dom.setAttribute(el4, "data-dz-size", "");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("img");
        dom.setAttribute(el4, "data-dz-thumbnail", "");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dz-progress");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "class", "dz-upload");
        dom.setAttribute(el4, "data-dz-uploadprogress", "");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dz-success-mark");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("✔");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dz-error-mark");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        var el5 = dom.createTextNode("✘");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "dz-error-message");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("span");
        dom.setAttribute(el4, "data-dz-errormessage", "");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "data-dropzone-template", "blank-state");
        dom.setAttribute(el1, "style", "display: none;");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [26, 8], [26, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [26, 2], [35, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/common/floating-container/component', ['exports', 'ember', 'ember-click-outside/mixins/click-outside', 'ember-runloop'], function (exports, _ember, _emberClickOutsideMixinsClickOutside, _emberRunloop) {
  exports['default'] = _ember['default'].Component.extend(_emberClickOutsideMixinsClickOutside['default'], {

    classNameBindings: ['class', 'open:cs-active'],
    listening: false,

    listenWhenOpen: _ember['default'].observer('open', function () {
      this.toggleListeners(this.get('open'));
    }),

    clickOutside: function clickOutside() /* e */{
      this.sendAction('outsideClick');
    },

    toggleListeners: function toggleListeners(state) {
      var listening = this.get('listening');
      if (!state && listening) {
        //remove
        (0, _emberRunloop.cancel)(this._cancelListener);
        this.removeClickOutsideListener();
        this.set('listening', false);
      }
      if (state && !listening) {
        //add
        this._cancelListener = (0, _emberRunloop.next)(this, this.addClickOutsideListener);
        this.set('listening', true);
      }
    },

    didInsertElement: function didInsertElement() {
      this.toggleListeners(this.get('open'));
    },

    willDestroyElement: function willDestroyElement() {
      this.toggleListeners(false);
    }

  });
});
define("cornerstone/components/common/floating-container/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/floating-container/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/in-view/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNameBindings: ['class'],
    enabled: true,

    ready: _ember['default'].computed('viewed', 'enabled', function () {
      if (!this.get('enabled')) {
        return true;
      }
      return this.get('viewed');
    }),

    init: function init() {
      this._super.apply(this, arguments);
      this.set('onScroll', this.onScroll.bind(this));
    },

    didInsertElement: function didInsertElement() {
      var _this = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this.onScroll();
        if (!_this.get('ready')) {
          _this.addEventListeners();
        }
      });
    },

    addEventListeners: function addEventListeners() {
      _ember['default'].$(document).on('ps-scroll-x ps-scroll-y', this.onScroll);
      _ember['default'].$(document.body).on('scroll', this.onScroll);
    },

    removeEventListeners: function removeEventListeners() {
      _ember['default'].$(document).off('ps-scroll-x ps-scroll-y', this.onScroll);
      _ember['default'].$(document.body).off('scroll', this.onScroll);
    },

    onScroll: function onScroll() {
      this.detectScrollbox();
      var myRect = this.get('element').getBoundingClientRect();

      var scrollBoxRect = this.scrollBox.getBoundingClientRect();
      if (myRect.top <= scrollBoxRect.bottom && myRect.right >= scrollBoxRect.left && myRect.bottom >= scrollBoxRect.top && myRect.left <= scrollBoxRect.right) {
        this.set('ready', true);
        this.removeEventListeners();
      }
    },

    detectScrollbox: function detectScrollbox() {
      if (!this.scrollBox) {
        this.scrollBox = this.$().closest('.cs-scroll-box')[0];
      }
    },

    willDestroyElement: function willDestroyElement() {
      this.removeEventListeners();
    }

  });
});
define("cornerstone/components/common/in-view/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/in-view/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/in-view/template.hbs"
        },
        isEmpty: true,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 7
          }
        },
        "moduleName": "cornerstone/components/common/in-view/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "ready", ["loc", [null, [1, 6], [1, 11]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/common/index-entry/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-index-entry'],
    classNameBindings: ['selected:cs-active', 'isNew:cs-new'],

    click: function click() {
      this.sendAction();
    },

    actions: {
      titleUpdate: function titleUpdate() {
        this.sendAction('titleUpdate');
      }
    }

  });
});
define("cornerstone/components/common/index-entry/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/index-entry/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-index-entry-info-meta");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "meta", ["loc", [null, [3, 40], [3, 50]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/index-entry/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-index-entry-info");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("h2");
        dom.setAttribute(el2, "class", "cs-index-entry-info-title");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-index-entry-actions");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        return morphs;
      },
      statements: [["block", "if", [["get", "meta", ["loc", [null, [2, 8], [2, 12]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["inline", "forms/inline-edit", [], ["value", ["subexpr", "@mut", [["get", "title", ["loc", [null, [5, 66], [5, 71]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["titleUpdate"], [], ["loc", [null, [5, 79], [5, 101]]], 0, 0]], ["loc", [null, [5, 40], [5, 103]]], 0, 0], ["content", "yield", ["loc", [null, [8, 2], [8, 11]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/common/link-out/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'a',
    classNameBindings: ['class'],
    attributeBindings: ['href'],
    output: _ember['default'].computed('content', function () {
      return _ember['default'].String.htmlSafe(this.get('content'));
    }),

    click: function click(e) {
      var _this = this;

      if (this.get('ui.unsavedData')) {

        e.preventDefault();
        this.get('ui').confirm({
          noSkip: true,
          message: this.get('i18n').t('app.unsaved-warning'),
          accept: function accept() {
            window.location = _this.get('href');
          },
          acceptClass: 'sad'
        });
      }
    }
  });
});
define("cornerstone/components/common/link-out/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/link-out/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/link-out/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "output", ["loc", [null, [4, 2], [4, 14]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/link-out/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/common/loading-indicator/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-loading-indicator'],
    attributeBindings: ['style:safeStyle'],
    safeStyle: _ember['default'].computed('style', function () {
      return _ember['default'].String.htmlSafe(this.get('style'));
    })
  });
});
define("cornerstone/components/common/loading-indicator/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 10
          }
        },
        "moduleName": "cornerstone/components/common/loading-indicator/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("Loading...");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/preview-frame/component', ['exports', 'ember', 'cornerstone/mixins/hover-state', 'cornerstone/xfr/mixins/agent', 'cornerstone/mixins/preview-listener', 'npm:url-parse', 'npm:js-base64'], function (exports, _ember, _cornerstoneMixinsHoverState, _cornerstoneXfrMixinsAgent, _cornerstoneMixinsPreviewListener, _npmUrlParse, _npmJsBase64) {
  var Base64 = _npmJsBase64['default'].Base64;

  exports['default'] = _ember['default'].Component.extend(_cornerstoneMixinsPreviewListener['default'], _cornerstoneXfrMixinsAgent['default'], _cornerstoneMixinsHoverState['default'], {

    xfrOrigin: 'app',

    config: _ember['default'].inject.service(),
    radio: _ember['default'].inject.service('global/radio'),

    ui: _ember['default'].inject.service(),
    debugLogging: _ember['default'].computed.alias('ui.debugEnabled'),

    ready: false,
    showAsLoading: true,
    loadedOnce: false,
    loadError: false,
    allowPreviewSizer: true,
    usePreloader: true,
    canResize: true,
    state: {},
    name: 'generic',
    content: 'default',
    showStatusIndicator: false,
    statusIndicatorMode: 'loading',

    classNames: ['cs-preview-frame'],

    clientShowPreloader: true,
    preLoaderComplete: _ember['default'].computed('ready', 'clientShowPreloader', function () {
      return this.get('ready') && !this.get('clientShowPreloader');
    }),

    previewSizeClass: _ember['default'].computed('canResize', 'ui.previewSize', function () {
      if (!this.get('canResize')) {
        return;
      }
      return 'cs-preview-size-' + this.get('ui.previewSize');
    }),

    showPreviewSizer: _ember['default'].computed('allowPreviewSizer', 'ui.routeEnabledPreviewSizer', function () {
      return this.get('allowPreviewSizer') && this.get('ui.routeEnabledPreviewSizer');
    }),

    encodedState: _ember['default'].computed('state.inc', function () {
      return Base64.encode(JSON.stringify(this.get('state')));
    }),

    detectStateChange: _ember['default'].observer('src', 'state.inc', function () {
      this.generateIframeDebounce();
    }),

    generateIframeDebounce: function generateIframeDebounce() {
      _ember['default'].run.debounce(this, this.generateIframe, 215);
    },

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);

      this.componentListenTo('navigate', function (params) {
        return _this.sendAction('navigate', params);
      });

      this.componentListenTo('status-indicator', function (_ref) {
        var show = _ref.show;
        var mode = _ref.mode;

        _this.set('showStatusIndicator', show);
        _this.set('statusIndicatorMode', mode);
      });

      this.componentListenTo('pre-loader-state', function (_ref2) {
        var show = _ref2.show;

        if (!show) {
          _ember['default'].run.cancel(_this.waitForClientPreloader);
        }
        _this.set('clientShowPreloader', show);
      });

      this.componentListenTo('preview:package:setup', function (data, resolve) {
        _this.set('canUpdatePackage', true);
        resolve(_this.get('package'));
      });

      // These listeners don't need to be in the frame component
      this.componentListenTo('preview:event-propagation', function (_ref3) {
        var event = _ref3.event;
        return _this.synthesizeEvent(event);
      });
      this.componentListenTo('preview:action-propagation', function (_ref4) {
        var action = _ref4.action;
        return _this.get('ui.primaryRoute').send(action);
      });

      this.componentListenTo('preview:error-message', function (_ref5) {
        var key = _ref5.key;

        console.log('preview-error.' + key);
        _this.get('ui').notify({
          type: 'error',
          message: _this.get('i18n').t('app.preview-error.' + key),
          timeout: 15000,
          extendedTimeout: 650
        });
      });
    },

    didInsertElement: function didInsertElement() {
      this.set('rendered', true);
      this.generateIframeDebounce();
    },

    packageChange: _ember['default'].observer('package', function () {
      if (!this.get('canUpdatePackage')) {
        return;
      }
      this.message('preview:package:update', this.get('package'));
    }),

    generateIframe: function generateIframe() {
      var _this2 = this;

      if (!this.get('rendered') || this.isDestroyed) {
        return;
      }

      this.set('showAsLoading', true);
      this.set('ready', false);

      var loadFailure = function loadFailure(cb) {
        _this2.set('loadError', true);
        _this2.set('ready', true);
        if ('function' === typeof cb) {
          cb.call(_this2);
        }
      };

      this.requestHTML(_ember['default'].copy(this.get('state'))).then(function (_ref6) {
        var html = _ref6.html;
        var state = _ref6.state;

        if (_this2.isDestroyed) {
          return;
        }

        _ember['default'].run.cancel(_this2.scheduledUpdate);
        _this2.scheduledUpdate = _ember['default'].run.scheduleOnce('afterRender', function () {
          if (_this2.isDestroyed) {
            return;
          }
          var $newFrame = _ember['default'].$('<iframe />');
          _this2.$('.cs-preview-frame-container').append($newFrame);

          var frameWindow = $newFrame[0].contentWindow;

          frameWindow.document.open();
          frameWindow.document.write(html);
          frameWindow.document.close();

          // $newFrame[0].contentDocument.title = `Cornerstone Preview (${state.timestamp})`;
          _ember['default'].run.cancel(_this2.loadTimeout);
          _this2.loadTimeout = _ember['default'].run.later(function () {
            if (_this2.isDestroyed) {
              return;
            }
            loadFailure(function () {
              _this2.$('iframe').not($newFrame).remove();
              _this2.get('ui').incrementProperty('previewDelayed');
              console.warn('Preview timeout');
            });
          }, (_this2.get('ui.previewDelayed') + 1) * 15000);

          _this2.initFrame($newFrame[0], state.timestamp, function () {

            // We know the iframe has booted the preview
            _this2.$('iframe').not($newFrame).remove();
            _ember['default'].run.cancel(_this2.loadTimeout);
            _this2.set('loadError', false);
            _this2.set('ready', true);

            _this2.waitForClientPreloader = _ember['default'].run.later(function () {
              if (!_this2.isDestroyed && _this2.get('clientShowPreloader') && _this2.get('usePreloader')) {
                console.warn('The preview booted, but never requested the loader be removed.', _this2.get('ui.previewDelayed'));
                _this2.set('loadError', true);
                _this2.get('ui').incrementProperty('previewDelayed');
              }
            }, (_this2.get('ui.previewDelayed') + 1) * 15000);
          });
        });
      }, function (reason) {

        _ember['default'].Logger.warn('preview-frame::update-aborted', reason);

        if (!reason || false !== reason.error) {
          loadFailure();
        }
      });
    },

    requestHTML: function requestHTML(state) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {

        var parsed = (0, _npmUrlParse['default'])(_this3.get('src'), true);
        var url = '' + parsed.origin + parsed.pathname;

        if ('/' !== url.charAt(url.length - 1)) {
          url += '/';
        }

        var timestamp = Date.now();
        state.timestamp = 't-' + timestamp; // Use a string to prevent rounding across systems.

        var data = _ember['default'].assign({}, {
          _cs_nonce: _this3.get('config.global._cs_nonce'),
          cs_preview_state: Base64.encode(JSON.stringify(state))
        }, _this3.getWithDefault('requestParams', {}), parsed.query);

        if (_this3.get('debugLogging')) {
          console.log('Requesting iFrame HTML', url, data);
        }

        _ember['default'].$.ajax({ type: 'POST', url: url, data: data }).done(function (r, textStatus, jqXHR) {

          if (_this3.get('lastUpdate') > timestamp) {
            reject({ error: false, message: 'updated since request' });
            return;
          }
          _this3.get('lastUpdate', timestamp);

          var response = jqXHR.responseText;
          var signature = 'CORNERSTONE_FRAME';

          if (_this3.get('debugLogging')) {
            console.log('Receiving iFrame HTML', jqXHR);
          }

          var index = response.lastIndexOf(signature);
          if (-1 === index || index < response.lastIndexOf('</html>')) {
            reject({ error: true, message: 'incomplete', response: response });
            return;
          }

          var html = response.slice(0, index) + response.slice(index + signature.length);
          resolve({ html: html, state: state });
        }).fail(function (jqXHR) {
          return reject(jqXHR);
        });
      });
    },

    initFrame: function initFrame(frame, time, callback) {
      var _this4 = this;

      this.closeChannel();
      var channel = new MessageChannel();
      channel.port1.addEventListener('message', this.get('xfrOnMessage'), false);
      channel.port1.start();
      this.set('messageChannel', channel);
      this.set('xfrMessagePort', channel.port1);
      // console.log('CHANNEL SETUP');

      this.set('boundiFrameLoaded', function (e) {

        if (_this4.get('debugLogging')) {
          console.log('Preview frame [' + time + '] recieving message', e);
        }

        if ('cs-preview-port-request::' + time === e.data) {
          frame.contentWindow.postMessage('cs-preview-port', '*', [channel.port2]);
          callback();
        }
      });

      window.addEventListener('message', this.get('boundiFrameLoaded'), false);
    },

    willDestroyElement: function willDestroyElement() {
      //console.log('Destroying frame');
      this.get('radio').off('outgoing:message', this.get('boundOutgoingMessage'));
      this.closeChannel();
    },

    closeChannel: function closeChannel() {
      window.removeEventListener('message', this.get('boundiFrameLoaded'), false);
      var channel = this.get('messageChannel');
      if (channel) {
        channel.port1.removeEventListener('message', this.get('xfrOnMessage'), false);
        channel.port1.close();
      }
    },

    synthesizeEvent: function synthesizeEvent(event) {

      if (['mousedown', 'mouseup', 'click'].includes(event.type)) {
        dispatchMouseEvent(event.type, event);
      } else if (['keydown', 'keypress', 'keyup'].includes(event.type)) {
        dispatchKeyboardEvent(event.type, event);
      }

      function dispatchMouseEvent(type, args) {

        var init = _ember['default'].assign({}, args, {
          'view': window,
          'bubbles': true,
          'cancelable': true
        });
        delete init.type;

        var event = new MouseEvent(type, init);

        return !!window.dispatchEvent(event);
      }

      function dispatchKeyboardEvent(type, args) {

        var init = _ember['default'].assign({}, args, {
          'view': window,
          'bubbles': true,
          'cancelable': true
        });

        delete init.type;

        var event = new KeyboardEvent(type, init);
        event.synthesizedWhich = args.which;
        return !!document.body.dispatchEvent(event);
      }
    },

    actions: {
      closeLoader: function closeLoader() {
        this.set('loadedOnce', true);
        this.set('showAsLoading', false);
      },
      reloadAfterTimeout: function reloadAfterTimeout() {
        this.set('showAsLoading', true);
        this.set('loadError', false);
        this.set('ready', false);
        this.generateIframeDebounce();
      }
    }

  });
});

// import queryString from 'npm:query-string';
define('cornerstone/components/common/preview-frame/overlay-action/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-preview-frame-overlay-action'],
    attributeBindings: ['ui.scrollBarWidthRightStyle:style']
  });
});
define("cornerstone/components/common/preview-frame/overlay-action/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/preview-frame/overlay-action/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/preview-frame/pre-loader/component', ['exports', 'ember', 'cornerstone/mixins/fadeable'], function (exports, _ember, _cornerstoneMixinsFadeable) {
  exports['default'] = _ember['default'].Component.extend(_cornerstoneMixinsFadeable['default'], {
    classNames: ['cs-pre-loader'],
    classNameBindings: ['incomplete:cs-active', 'refreshing:cs-pre-loader-semi-transparent'],
    content: 'default',
    contentPartial: _ember['default'].computed('content', function () {
      return 'iframe-loaders/' + this.get('content');
    })
  });
});
define("cornerstone/components/common/preview-frame/pre-loader/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/preview-frame/pre-loader/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "contentPartial", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/preview-frame/preview-sizer/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-preview-sizer'],
    classNameBindings: ['sizeClass', 'active:cs-active'],

    active: _ember['default'].computed.alias('ui.showPreviewSizer'),
    size: _ember['default'].computed.alias('ui.previewSize'),

    init: function init() {
      this._super.apply(this, arguments);
      var i18n = this.get('i18n');
      var sizes = ['xl', 'lg', 'md', 'sm', 'xs'];
      var icons = {};

      sizes.forEach(function (s) {
        icons[s] = {
          icon: 'interface/preview-sizer-' + s,
          abbr: i18n.t('app.preview-sizer-abbr-' + s),
          desc: i18n.t('app.preview-sizer-desc-' + s)
        };
      });

      this.set('icons', icons);
    },

    sizeClass: _ember['default'].computed('size', function () {
      return 'cs-preview-sizer-' + this.get('size');
    }),

    actions: {
      selectSize: function selectSize(size) {
        this.set('size', size);
      }
    }

  });
});
define("cornerstone/components/common/preview-frame/preview-sizer/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/preview-frame/preview-sizer/template.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "cs-preview-sizer-abbr");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          dom.setAttribute(el2, "class", "cs-preview-sizer-desc");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(5);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 1, 1);
          morphs[3] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
          morphs[4] = dom.createMorphAt(dom.childAt(element0, [5]), 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "sz", ["loc", [null, [2, 26], [2, 28]]], 0, 0, 0, 0], ["get", "size", ["loc", [null, [2, 29], [2, 33]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 22], [2, 34]]], 0, 0], "cs-active"], [], ["loc", [null, [2, 17], [2, 48]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["selectSize", ["get", "sz", ["loc", [null, [2, 72], [2, 74]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 50], [2, 76]]], 0, 0], ["inline", "cs-icon", [["get", "item.icon", ["loc", [null, [3, 14], [3, 23]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 4], [3, 25]]], 0, 0], ["content", "item.abbr", ["loc", [null, [4, 40], [4, 53]]], 0, 0, 0, 0], ["content", "item.desc", ["loc", [null, [5, 40], [5, 53]]], 0, 0, 0, 0]],
        locals: ["sz", "item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 12
          }
        },
        "moduleName": "cornerstone/components/common/preview-frame/preview-sizer/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each-in", [["get", "icons", ["loc", [null, [1, 11], [1, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [7, 12]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/components/common/preview-frame/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/preview-frame/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "common/preview-frame/preview-sizer", ["loc", [null, [2, 2], [2, 40]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/common/preview-frame/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "common/preview-frame/pre-loader", [], ["refreshing", ["subexpr", "@mut", [["get", "loadedOnce", ["loc", [null, [9, 19], [9, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "complete", ["subexpr", "@mut", [["get", "preLoaderComplete", ["loc", [null, [10, 17], [10, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "onComplete", ["subexpr", "action", ["closeLoader"], [], ["loc", [null, [11, 19], [11, 41]]], 0, 0], "content", ["subexpr", "@mut", [["get", "preloader", ["loc", [null, [12, 16], [12, 25]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [8, 6], [13, 8]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 15,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/preview-frame/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "showAsLoading", ["loc", [null, [7, 10], [7, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 4], [14, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 16,
              "column": 2
            },
            "end": {
              "line": 29,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/preview-frame/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-preview-load-error-outer cs-active");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "cs-preview-load-error-inner");
          var el3 = dom.createTextNode("\n        ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("div");
          dom.setAttribute(el3, "class", "cs-action-modal-content");
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "cs-action-modal-message");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("p");
          var el6 = dom.createTextNode("A conflict on the front end of your site has prevented the preview from loading.");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n          ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("div");
          dom.setAttribute(el4, "class", "cs-action-modal-actions");
          var el5 = dom.createTextNode("\n            ");
          dom.appendChild(el4, el5);
          var el5 = dom.createElement("button");
          var el6 = dom.createTextNode("Try again");
          dom.appendChild(el5, el6);
          dom.appendChild(el4, el5);
          var el5 = dom.createTextNode("\n          ");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1, 1, 1, 3, 1]);
          var morphs = new Array(1);
          morphs[0] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["element", "action", ["reloadAfterTimeout"], [], ["loc", [null, [24, 20], [24, 51]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 32,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/preview-frame/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [3]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createAttrMorph(element1, 'class');
        morphs[3] = dom.createMorphAt(element1, 1, 1);
        morphs[4] = dom.createMorphAt(element1, 2, 2);
        morphs[5] = dom.createMorphAt(element1, 4, 4);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "showPreviewSizer", ["loc", [null, [1, 6], [1, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["inline", "common/status-indicator", [], ["active", ["subexpr", "@mut", [["get", "showStatusIndicator", ["loc", [null, [4, 33], [4, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "mode", ["subexpr", "@mut", [["get", "statusIndicatorMode", ["loc", [null, [4, 58], [4, 77]]], 0, 0, 0, 0]], [], [], 0, 0], "style", ["subexpr", "@mut", [["get", "ui.scrollBarWidthRightStyle", ["loc", [null, [4, 84], [4, 111]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 0], [4, 113]]], 0, 0], ["attribute", "class", ["concat", ["cs-preview-frame-container ", ["get", "previewSizeClass", ["loc", [null, [5, 41], [5, 57]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "usePreloader", ["loc", [null, [6, 8], [6, 20]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [6, 2], [15, 9]]]], ["block", "if", [["get", "loadError", ["loc", [null, [16, 8], [16, 17]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [16, 2], [29, 9]]]], ["content", "yield", ["loc", [null, [30, 2], [30, 11]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/components/common/scroll-box/component', ['exports', 'ember', 'npm:perfect-scrollbar'], function (exports, _ember, _npmPerfectScrollbar) {
  exports['default'] = _ember['default'].Component.extend({

    classNameBindings: ['enabled:cs-scroll-box:cs-scroll-box-disabled', 'name'],
    enabled: true,
    ready: false,
    initialized: false,
    autoRefresh: false, // 150,
    scrollEvents: ['ps-scroll-y', 'ps-y-reach-start', 'ps-y-reach-end', 'ps-scroll-x', 'ps-x-reach-start', 'ps-x-reach-end'],

    horizontalScrollSupport: _ember['default'].computed.alias('ui.horizontalScrollSupport'),

    configChange: _ember['default'].observer('horizontalScrollSupport', function () {
      this.psInit();
    }),

    psInit: function psInit() {

      var el = this.get('element');
      var useBothWheelAxes = !this.get('horizontalScrollSupport');

      el.removeEventListener('wheel', this.get('wheelCheck'));
      if (useBothWheelAxes) {
        el.addEventListener('wheel', this.get('wheelCheck'));
      }

      _npmPerfectScrollbar['default'].destroy(el);
      _npmPerfectScrollbar['default'].initialize(el, {
        wheelSpeed: 2,
        scrollYMarginOffset: 0,
        scrollXMarginOffset: 0,
        wheelPropagation: false,
        swipePropagation: false,
        useBothWheelAxes: useBothWheelAxes,
        minScrollbarLength: 20
      });
    },

    wheelCheck: function wheelCheck(e) {
      if (Math.abs(e.deltaX) > 0) {
        this.set('ui.horizontalScrollSupport', true);
      }
    },

    init: function init() {
      this._super.apply(this, arguments);
      this.set('scrollHander', this.get('scrollHander').bind(this));
      this.set('wheelCheck', this.get('wheelCheck').bind(this));
      this.get('searchTarget');
    },

    scrollHander: function scrollHander(e) {

      if (e.target !== this.get('element')) {
        return;
      }

      // Note: improper use of run.debounce
      _ember['default'].run.debounce(this, function () {
        this.sendAction('onScroll', this, this.get('element'), e.type);
      }, 25);
    },

    setupTeardown: _ember['default'].observer('ready', function () {
      if (!this.get('ready')) {
        _ember['default'].run.cancel(this.autoRefreshSchedule);
      }

      this.refresh();
    }),

    enabledChanged: _ember['default'].observer('enabled', function () {

      if (!this.get('ready')) {
        return;
      }

      _ember['default'].run(this, this.refresh);
    }),

    refresh: function refresh() {

      if (this.get('enabled')) {

        if (this.get('initialized')) {

          _npmPerfectScrollbar['default'].update(this.get('element'));
        } else {

          this.psInit();

          this.get('scrollEvents').forEach((function (event) {
            document.addEventListener(event, this.get('scrollHander'));
          }).bind(this));

          this.set('initialized', true);
          var _scrollTo = this.get('scrollTo');
          if (_scrollTo) {
            this.updateScrollTo(_scrollTo);
          }
        }

        if (this.get('autoRefresh')) {
          this.autoRefreshSchedule = _ember['default'].run.later(this, this.refresh, this.get('autoRefresh'));
        }
      } else if (this.get('element') && this.get('initialized')) {
        this.tearDown();
      }
    },

    tearDown: function tearDown() {
      _npmPerfectScrollbar['default'].destroy(this.get('element'));
      this.set('initialized', false);
    },

    didInsertElement: function didInsertElement() {
      this._super.apply(this, arguments);
      this.set('ready', true);
    },

    willDestroyElement: function willDestroyElement() {
      this.set('ready', false);
      if (this.get('initialized')) {
        this.tearDown();
      }

      this.get('element').removeEventListener('wheel', this.get('wheelCheck'));
      this.get('scrollEvents').forEach((function (event) {
        document.removeEventListener(event, this.get('scrollHander'));
      }).bind(this));
    },

    scrollToObserver: _ember['default'].observer('scrollTo', function () {
      this.updateScrollTo(this.get('scrollTo'));
    }),

    updateScrollTo: function updateScrollTo(params) {

      var el = this.get('element');
      if (!this.get('initialized') || !el) {
        return;
      }

      var left = 0;
      var top = 0;

      if (!params.start) {
        var $scrollTo = params.$el ? params.$el : this.$(params.selector).first();

        if ($scrollTo.length > 0) {
          left = $scrollTo.position().left + el.scrollLeft;
          top = $scrollTo.position().top + el.scrollTop;
        }
      }

      var offset = isNaN(params.offset) ? 0 : params.offset;
      var atts = params.horizontal ? { scrollLeft: left + offset } : { scrollTop: top + offset };

      this.set('isScrollingTo', true);

      this.$().animate(atts, {
        duration: isNaN(params.duration) ? 450 : params.duration,
        //easing: 'easeOutExpo',
        complete: (function () {
          if (!this.isDestroyed) {
            _npmPerfectScrollbar['default'].update(el);
            this.set('isScrollingTo', false);
            if (params.reset) {
              _npmPerfectScrollbar['default'].update(el);
            }
            if ('function' === _ember['default'].typeOf(params.after)) {
              params.after();
            }
          }
        }).bind(this)
      });
    },

    search: _ember['default'].inject.service(),
    searchTarget: _ember['default'].computed('linkedSearch', function () {
      return this.get('search').getTarget(this.get('linkedSearch'));
    }),

    resetScroll: _ember['default'].observer('searchTarget.query', 'resetScrollOn', 'resetScrollOn.[]', function () {

      var el = this.get('element');

      // Note: improper use of run.debounce
      _ember['default'].run.debounce(this, function () {

        _ember['default'].run.scheduleOnce('afterRender', function () {
          el.scrollTop = 0;
          el.scrollLeft = 0;
          _npmPerfectScrollbar['default'].update(el);
        });
      }, 25);
    })

  });
});
define("cornerstone/components/common/scroll-box/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/common/scroll-box/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/search-bar/component', ['exports', 'ember', 'cornerstone/mixins/keyboard-shortcuts/component'], function (exports, _ember, _cornerstoneMixinsKeyboardShortcutsComponent) {
  exports['default'] = _ember['default'].Component.extend(_cornerstoneMixinsKeyboardShortcutsComponent['default'], {
    classNameBindings: ['customClass'],
    customClass: 'cs-search-bar',

    keyboardShortcuts: {
      'esc': 'clear',
      'find': 'focus'
    },

    focusOnShortcut: true,
    autoFocus: false,
    showIcon: true,

    search: _ember['default'].inject.service(),
    searchTarget: _ember['default'].computed('target', function () {
      return this.get('search').getTarget(this.get('target'));
    }),

    isSearching: _ember['default'].computed.alias('query', function () {
      return !!this.get('query');
    }),

    init: function init() {
      this._super.apply(this, arguments);

      if (_ember['default'].isNone(this.get('query'))) {
        _ember['default'].defineProperty(this, 'query', _ember['default'].computed.alias('searchTarget.query'));
        this.get('searchTarget');
      }
    },

    didInsertElement: function didInsertElement() {
      this.updateInput();
      if (this.get('autoFocus')) {
        this.$('input[type=search]').focus();
      }
    },

    updateQuery: _ember['default'].observer('query', function () {

      if (this.get('query') !== this.$('input[type=search]').val()) {
        this.updateInput();
      }
    }),

    updateInput: function updateInput() {
      this.$('input[type=search]').val(this.get('query'));
    },

    keyUp: function keyUp() {
      this.set('query', this.$('input[type=search]').val());
    },

    actions: {
      clear: function clear() {
        this.set('query', '');
      },
      focus: function focus() {
        if (this.get('focusOnShortcut')) {
          this.$('input[type=search]').focus();
        }
      }
    }

  });
});
define("cornerstone/components/common/search-bar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 49
            }
          },
          "moduleName": "cornerstone/components/common/search-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
          return morphs;
        },
        statements: [["inline", "fa-icon", ["search"], [], ["loc", [null, [2, 22], [2, 42]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 86
            }
          },
          "moduleName": "cornerstone/components/common/search-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("span");
          dom.setAttribute(el1, "class", "cs-clear");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [0]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["clear"], [], ["loc", [null, [3, 41], [3, 59]]], 0, 0], ["inline", "fa-icon", ["close"], [], ["loc", [null, [3, 60], [3, 79]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 93
          }
        },
        "moduleName": "cornerstone/components/common/search-bar/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "search");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var morphs = new Array(4);
        morphs[0] = dom.createAttrMorph(element1, 'class');
        morphs[1] = dom.createAttrMorph(element1, 'placeholder');
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "noFocus", ["loc", [null, [1, 19], [1, 26]]], 0, 0, 0, 0], "cs-no-input-focus"], [], ["loc", [null, [1, 14], [1, 48]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "placeholder", ["concat", [["get", "placeholder", ["loc", [null, [1, 79], [1, 90]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "showIcon", ["loc", [null, [2, 6], [2, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [2, 56]]]], ["block", "if", [["get", "isSearching", ["loc", [null, [3, 6], [3, 17]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [3, 0], [3, 93]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/common/sortable-container/component', ['exports', 'ember', 'cornerstone/vendor/dragula/dragula'], function (exports, _ember, _cornerstoneVendorDragulaDragula) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',
    classNames: ['cs-sortable'],
    classNameBindings: ['isDragging:cs-sorting', 'condensed:cs-sortable-condensed'],
    condensed: true,
    isDragging: false,
    didInsertElement: function didInsertElement() {

      var drake = (0, _cornerstoneVendorDragulaDragula['default'])({
        offset: function offset(_offset, e, item) {
          _offset.y = window.jQuery(item).height() / 2; // snap to vertical center
          return _offset;
        },
        revertOnSpill: true,
        mirrorContainer: this.get('element')
      });

      drake.containers.push(this.get('element'));
      var self = this;

      drake.on('drag', function () /* el */{
        self.set('isDragging', true);
      });

      drake.on('dragend', function () /* el */{
        self.set('isDragging', false);
      });

      drake.on('drop', function (el, target, source, sibling) {
        window.jQuery(el).trigger('dragula:drop', window.jQuery(sibling).index() - 1);
      });
    }
  });
});
define("cornerstone/components/common/sortable-container/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/sortable-container/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/sortable-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'li',
    classNames: ['sortable-item'],
    classNameBindings: ['active:cs-active', 'isHovering:cs-hover'],

    canEditLabel: true,
    canQuickDelete: true,
    showAddAfter: false,

    deleteConfirm: _ember['default'].computed('ui.deleteConfirm', function () {
      return this.get('canQuickDelete') && this.get('ui.deleteConfirm');
    }),

    canShowAddAfter: _ember['default'].computed('showAddAfter', 'onAddAfter', function () {
      return this.get('showAddAfter') && this.get('onAddAfter');
    }),

    didInsertElement: function didInsertElement() {
      var _this = this;

      this.$().on('dragula:drop', (function (e, index) {
        this.sendAction('onDrop', this.get('item'), index, e);
      }).bind(this));

      this.$().on('mouseenter', '.handle, .controls', function () {
        _this.set('isHovering', true);
        _this.sendAction('onMouseEnter');
      }).on('mouseleave', '.handle, .controls', function () {
        _this.set('isHovering', false);
        _this.sendAction('onMouseLeave');
      });
    },

    actions: {
      select: function select() {
        this.sendAction('onSelect');
      },
      inspect: function inspect() {
        this.sendAction('onInspect');
      },
      duplicate: function duplicate() {
        this.sendAction('onDuplicate');
      },
      'delete': function _delete() {
        this.sendAction('onDelete');
      },
      addBefore: function addBefore() {
        this.sendAction('onAddBefore');
      },
      addAfter: function addAfter() {
        this.sendAction('onAddAfter');
      }
    }
  });
});
define("cornerstone/components/common/sortable-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/sortable-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "cs-add-sortable-item-inline");
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Add");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element4 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element4);
          morphs[1] = dom.createMorphAt(dom.childAt(element4, [0]), 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["addBefore"], [], ["loc", [null, [2, 10], [2, 32]]], 0, 0], ["inline", "fa-icon", ["plus"], [], ["loc", [null, [2, 75], [2, 93]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/sortable-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "cs-icon");
          dom.setAttribute(el1, "title", "Inspect");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element3 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element3);
          morphs[1] = dom.createMorphAt(element3, 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["inspect"], [], ["loc", [null, [15, 12], [15, 32]]], 0, 0], ["inline", "fa-icon", ["search"], [], ["loc", [null, [15, 65], [15, 85]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/sortable-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "cs-icon");
          dom.setAttribute(el1, "title", "Duplicate");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element2 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element2);
          morphs[1] = dom.createMorphAt(element2, 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["duplicate"], [], ["loc", [null, [18, 12], [18, 34]]], 0, 0], ["inline", "fa-icon", ["copy"], [], ["loc", [null, [18, 69], [18, 87]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child3 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/common/sortable-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "title", "Delete");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["cs-icon ", ["subexpr", "if", [["get", "deleteConfirm", ["loc", [null, [21, 73], [21, 86]]], 0, 0, 0, 0], "cs-danger"], [], ["loc", [null, [21, 67], [21, 100]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["delete"], ["allowedKeys", "shift"], ["loc", [null, [21, 12], [21, 51]]], 0, 0], ["inline", "fa-icon", ["trash-o"], [], ["loc", [null, [21, 117], [21, 138]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child4 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 25,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/sortable-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "cs-add-sortable-item-inline bottom");
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode(" Add");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createElementMorph(element0);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [0]), 0, 0);
          return morphs;
        },
        statements: [["element", "action", ["addAfter"], [], ["loc", [null, [26, 10], [26, 31]]], 0, 0], ["inline", "fa-icon", ["plus"], [], ["loc", [null, [26, 81], [26, 99]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/sortable-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "handle");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "controls");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element5 = dom.childAt(fragment, [1]);
        var element6 = dom.childAt(fragment, [3]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createElementMorph(element5);
        morphs[2] = dom.createMorphAt(element5, 1, 1);
        morphs[3] = dom.createMorphAt(element6, 1, 1);
        morphs[4] = dom.createMorphAt(element6, 2, 2);
        morphs[5] = dom.createMorphAt(element6, 3, 3);
        morphs[6] = dom.createMorphAt(element6, 5, 5);
        morphs[7] = dom.createMorphAt(fragment, 5, 5, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "onAddBefore", ["loc", [null, [1, 6], [1, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["element", "action", ["select"], [], ["loc", [null, [4, 21], [4, 40]]], 0, 0], ["inline", "forms/inline-edit", [], ["class", "label", "value", ["subexpr", "@mut", [["get", "label", ["loc", [null, [7, 10], [7, 15]]], 0, 0, 0, 0]], [], [], 0, 0], "enabled", ["subexpr", "@mut", [["get", "canEditLabel", ["loc", [null, [8, 12], [8, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "labelPlaceholder", ["loc", [null, [9, 16], [9, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "invalid", ["subexpr", "@mut", [["get", "labelInvalid", ["loc", [null, [10, 12], [10, 24]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [5, 2], [11, 4]]], 0, 0], ["block", "if", [["get", "onInspect", ["loc", [null, [14, 8], [14, 17]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [14, 2], [16, 9]]]], ["block", "if", [["get", "onDuplicate", ["loc", [null, [17, 8], [17, 19]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [17, 2], [19, 9]]]], ["block", "if", [["get", "onDelete", ["loc", [null, [20, 8], [20, 16]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [20, 2], [22, 9]]]], ["content", "yield", ["loc", [null, [23, 2], [23, 11]]], 0, 0, 0, 0], ["block", "if", [["get", "canShowAddAfter", ["loc", [null, [25, 6], [25, 21]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [25, 0], [27, 7]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('cornerstone/components/common/status-indicator/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-status-indicator'],
    classNameBindings: ['active:cs-active', 'mode'],
    attributeBindings: ['style']
  });
});
define("cornerstone/components/common/status-indicator/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 28
          }
        },
        "moduleName": "cornerstone/components/common/status-indicator/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "common/loading-indicator", ["loc", [null, [1, 0], [1, 28]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/common/tab-modal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-tab-modal'],
    classNameBindings: ['active:cs-active'],

    selectedTab: false,

    activeTab: _ember['default'].computed('selectedTab', 'panels', function () {

      var panels = this.get('panels');
      var selectedTab = this.get('selectedTab');

      var filtered = panels.filter(function (item) {
        return item.name === selectedTab;
      });

      if (_ember['default'].isEmpty(filtered)) {
        filtered = panels;
      }

      return filtered.get('firstObject').name;
    }),

    activeLabel: _ember['default'].computed('activeTab', function () {

      var activeTab = this.get('activeTab');

      return this.get('navItems').filter(function (item) {
        return item.name === activeTab;
      }).get('firstObject.label');
    }),

    activeContent: _ember['default'].computed('activeTab', 'panels', function () {

      var activeTab = this.get('activeTab');

      return this.get('panels').filter(function (item) {
        return item.name === activeTab;
      }).get('firstObject.content');
    }),

    actions: {
      close: function close() {
        this.set('active', false);
      },
      nav: function nav(tab) {
        this.set('selectedTab', tab);
      }
    }
  });
});
define("cornerstone/components/common/tab-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 8
            },
            "end": {
              "line": 10,
              "column": 8
            }
          },
          "moduleName": "cornerstone/components/common/tab-modal/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("          ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "activeTab", ["loc", [null, [9, 60], [9, 69]]], 0, 0, 0, 0], ["get", "nav.name", ["loc", [null, [9, 70], [9, 78]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 56], [9, 79]]], 0, 0], "cs-active"], [], ["loc", [null, [9, 51], [9, 93]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["nav", ["get", "nav.name", ["loc", [null, [9, 33], [9, 41]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 18], [9, 43]]], 0, 0], ["content", "nav.label", ["loc", [null, [9, 95], [9, 108]]], 0, 0, 0, 0]],
        locals: ["nav"],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 10
              },
              "end": {
                "line": 16,
                "column": 10
              }
            },
            "moduleName": "cornerstone/components/common/tab-modal/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "yield", [["subexpr", "hash", [], ["activeTab", ["get", "activeTab", ["loc", [null, [15, 36], [15, 45]]], 0, 0, 0, 0]], ["loc", [null, [15, 20], [15, 46]]], 0, 0]], [], ["loc", [null, [15, 12], [15, 48]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 10
              },
              "end": {
                "line": 18,
                "column": 10
              }
            },
            "moduleName": "cornerstone/components/common/tab-modal/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("            ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "activeContent", ["loc", [null, [17, 12], [17, 31]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 8
            },
            "end": {
              "line": 19,
              "column": 8
            }
          },
          "moduleName": "cornerstone/components/common/tab-modal/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [14, 16], [14, 24]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [14, 10], [18, 17]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/tab-modal/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        dom.setAttribute(el1, "class", "cs-tab-modal-close");
        dom.setAttribute(el1, "aria-label", "Close");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("×");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-tab-modal-content-outer");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cs-tab-modal-content-inner");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "cs-tab-modal-content");
        dom.setAttribute(el3, "role", "document");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("nav");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("article");
        var el5 = dom.createTextNode("\n");
        dom.appendChild(el4, el5);
        var el5 = dom.createComment("");
        dom.appendChild(el4, el5);
        var el5 = dom.createTextNode("      ");
        dom.appendChild(el4, el5);
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [0]);
        var element2 = dom.childAt(fragment, [2, 1, 1]);
        var morphs = new Array(3);
        morphs[0] = dom.createElementMorph(element1);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[2] = dom.createMorphAt(dom.childAt(element2, [3]), 1, 1);
        return morphs;
      },
      statements: [["element", "action", ["close"], [], ["loc", [null, [1, 8], [1, 26]]], 0, 0], ["block", "each", [["get", "panels", ["loc", [null, [8, 16], [8, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 8], [10, 17]]]], ["block", "common/scroll-box", [], [], 1, null, ["loc", [null, [13, 8], [19, 30]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/common/welcome-message/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-welcome']
  });
});
define("cornerstone/components/common/welcome-message/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/common/welcome-message/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          dom.setAttribute(el1, "class", "cs-welcome-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [2, 31], [2, 40]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/common/welcome-message/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "title", ["loc", [null, [1, 6], [1, 11]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["content", "yield", ["loc", [null, [4, 0], [4, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-base/component', ['exports', 'ember', 'cornerstone/util/deep-assign'], function (exports, _ember, _cornerstoneUtilDeepAssign) {

  var ControlBase = _ember['default'].Component.extend({

    level: 1,
    firstLevel: _ember['default'].computed.equal('level', 1),
    deeplyNested: _ember['default'].computed.gt('level', 2),

    headerTemplate: _ember['default'].computed('level', function () {
      return this.get('firstLevel') ? 'partials/controls/control-header' : 'partials/controls/input-list-item-header';
    }),

    classNameBindings: ['baseClasses', 'isHidden:cs-hide', 'class'],
    attributeBindings: ['groupName:data-cs-control-group-name', 'control.id:data-cs-control-id'],
    groupName: _ember['default'].computed.alias('control.group'),

    containerClass: _ember['default'].computed(function () {

      var classes = [];

      if (!this.get('firstLevel')) {

        classes.push('cs-control-input-list-input');
        // classes.push( `cs-control-input-list-input-${this.get('level')}`);

        var height = undefined;
        var defaultHeight = this.get('defaultHeight');
        var mappedHeight = this.get('control.options.height');

        if (_ember['default'].isPresent(defaultHeight)) {
          height = defaultHeight;
        }

        if (_ember['default'].isPresent(mappedHeight)) {
          height = mappedHeight;
        }

        if (_ember['default'].isPresent(height)) {
          classes.push('cs-control-input-list-input-height-' + height);
        }
      } else {
        classes.push('cs-control-input');
      }

      return classes.join(' ');
    }),

    // Todo: Stop using these aliases since we're moving into control aggregates which have variable keys

    options: _ember['default'].computed.alias('control.options'),
    value: _ember['default'].computed.alias('control.keyValue'),

    service: _ember['default'].inject.service('controls'),

    baseClasses: _ember['default'].computed('control.type', 'control.originalType', function () {

      var levelClass = this.get('firstLevel') ? 'cs-control' : 'cs-control-input-list-item';

      var type = this.get('control.type');

      var originalType = this.get('control.originalType');
      if (_ember['default'].isPresent(originalType)) {
        type += '-' + originalType;
      }

      return levelClass + ' ' + levelClass + '-' + type;
    }),

    isHidden: _ember['default'].computed('hidden', 'control.excluded', function () {
      return this.get('hidden') || this.get('control.excluded');
    }),

    showHeader: _ember['default'].computed('control.label', function () {
      return _ember['default'].isPresent(this.get('control.label'));
    }),

    label: _ember['default'].computed('control.label', function () {
      var label = this.get('control.label');
      return _ember['default'].isPresent(label) ? label : '&nbsp;';
    })

  });

  ControlBase.isKeyMapped = function (key) {
    return _ember['default'].computed(function () {
      return _ember['default'].isPresent(this.get('control.keys.' + key));
    });
  };

  ControlBase.subOptions = function (key, defaults, transform) {
    var optionPath = 'control.options.' + key;
    return _ember['default'].computed(optionPath, function () {
      var options = (0, _cornerstoneUtilDeepAssign['default'])(_ember['default'].isNone(defaults) ? {} : _ember['default'].copy(defaults, true), this.getWithDefault(optionPath, {}));
      if ('function' === typeof transform) {
        options = transform.call(this, options);
      }
      return options;
    });
  };

  exports['default'] = ControlBase;
});
define("cornerstone/components/controls/control-base/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-base/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment(" Undefined Control ");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-base/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-border/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder', 'cornerstone/util/split-on-whitespace'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder, _cornerstoneUtilSplitOnWhitespace) {

  var sides = ['top', 'right', 'bottom', 'left'];

  function linkedKey(prop, fallback) {
    return _ember['default'].computed(prop, 'activeSide', {
      get: function get() {
        return valueForSide(this.getWithDefault(prop, ''), this.get('activeSide'), fallback);
      },
      set: function set(key, value) {

        value = value.replace(/\ /g, '');

        if (this.get('linked')) {
          this.set(prop, value);
        } else {
          var update = {};
          update[this.get('activeSide')] = value;
          this.set(prop, unlinkedValue(this.getWithDefault(prop, ''), fallback, update));
        }

        return value;
      }
    });
  }

  function valueForSide(combined, side, fallback) {
    var index = sides.indexOf(side);

    var parts = (0, _cornerstoneUtilSplitOnWhitespace['default'])(combined);
    return _ember['default'].isNone(parts[index]) ? fallback : parts[index];
  }

  function unlinkedValue(combined, fallback, update) {

    var parts = (0, _cornerstoneUtilSplitOnWhitespace['default'])(combined);
    var updated = [];

    if (1 === parts.length) {
      parts[1] = parts[0];
      parts[2] = parts[0];
      parts[3] = parts[0];
    }

    sides.forEach(function (item, index) {

      if (_ember['default'].isNone(parts[index])) {
        parts[index] = fallback;
      }

      updated.push(parts[index]);
    });

    if (update) {
      for (var side in update) {
        var index = sides.indexOf(side);
        if (-1 !== index) {
          updated[index] = update[side];
        }
      }
    }

    return updated.join(' ');
  }

  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    showColor: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('color'),
    showAltColor: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('alt_color'),

    init: function init() {
      this._super.apply(this, arguments);
      if (this.get('options.always_linked')) {
        this.set('alwaysLinked', true);
        this.set('linked', true);
      } else {
        this.set('linked', (0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('control.keyStyle', '')).length <= 1);
      }
    },

    linkedObserver: _ember['default'].observer('linked', function () {

      var activeStyle = this.get('activeStyle');
      this.set('activeStyle', activeStyle);
      this.set('activeWidth', this.get('activeWidth'));

      if (this.get('showColor')) {
        this.set('activeColor', this.get('activeColor'));
      }

      if (this.get('showAltColor')) {
        this.set('activeAltColor', this.get('activeAltColor'));
      }
    }),

    activeSide: _ember['default'].computed({
      get: function get() {
        return 'top';
      },
      set: function set(key, value) {
        return value;
      }
    }),

    activeStyle: linkedKey('control.keyStyle', 'none'),
    activeWidth: linkedKey('control.keyWidth', '0px'),
    activeColor: linkedKey('control.keyColor', 'transparent'),
    activeAltColor: linkedKey('control.keyAltColor', 'transparent'),

    widthOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('width', {
      available_units: ['px', 'em', 'rem'],
      ranges: {
        px: { min: 0, max: 25, step: 1 },
        em: { min: 0, max: 2.5, step: 0.001 },
        rem: { min: 0, max: 2.5, step: 0.001 }
      }
    }),

    colorOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('color'),
    altColorOptions: _ember['default'].computed('colorOptions', function () {
      var options = _ember['default'].copy(this.get('colorOptions'));
      if (options.alt_label) {
        options.label = options.alt_label;
      }
      return options;
    })

  });
});
define("cornerstone/components/controls/control-border/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 6
                  },
                  "end": {
                    "line": 9,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-border/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [7, 37], [7, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "value", false, "icon", "unlink", "tooltip", "Unlinked"], ["loc", [null, [7, 8], [7, 90]]], 0, 0], ["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [8, 37], [8, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "value", true, "icon", "link", "tooltip", "Linked"], ["loc", [null, [8, 8], [8, 85]]], 0, 0]],
              locals: ["choose"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-border/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "forms/choose-single", [], ["value", ["subexpr", "@mut", [["get", "linked", ["loc", [null, [6, 35], [6, 41]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [6, 6], [9, 30]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 18,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-border/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(4);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
                morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/choose-choice", [], ["class", "cs-choice-top", "choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [14, 59], [14, 65]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "top", "tooltip", "Top"], ["loc", [null, [14, 8], [14, 93]]], 0, 0], ["inline", "forms/choose-choice", [], ["class", "cs-choice-right", "choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [15, 61], [15, 67]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "right", "tooltip", "Right"], ["loc", [null, [15, 8], [15, 99]]], 0, 0], ["inline", "forms/choose-choice", [], ["class", "cs-choice-bottom", "choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [16, 62], [16, 68]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "bottom", "tooltip", "Bottom"], ["loc", [null, [16, 8], [16, 102]]], 0, 0], ["inline", "forms/choose-choice", [], ["class", "cs-choice-left", "choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [17, 60], [17, 66]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "left", "tooltip", "Left"], ["loc", [null, [17, 8], [17, 96]]], 0, 0]],
              locals: ["choose"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-border/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "forms/choose-single", [], ["value", ["subexpr", "@mut", [["get", "activeSide", ["loc", [null, [13, 35], [13, 45]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [13, 6], [18, 30]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-border/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "activeStyle", ["loc", [null, [23, 14], [23, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "array", [["subexpr", "hash", [], ["value", "none", "label", "None"], ["loc", [null, [25, 10], [25, 42]]], 0, 0], ["subexpr", "hash", [], ["value", "solid", "label", "Solid"], ["loc", [null, [26, 10], [26, 44]]], 0, 0], ["subexpr", "hash", [], ["value", "dotted", "label", "Dotted"], ["loc", [null, [27, 10], [27, 46]]], 0, 0], ["subexpr", "hash", [], ["value", "dashed", "label", "Dashed"], ["loc", [null, [28, 10], [28, 46]]], 0, 0], ["subexpr", "hash", [], ["value", "double", "label", "Double"], ["loc", [null, [29, 10], [29, 46]]], 0, 0], ["subexpr", "hash", [], ["value", "groove", "label", "Groove"], ["loc", [null, [30, 10], [30, 46]]], 0, 0], ["subexpr", "hash", [], ["value", "ridge", "label", "Ridge"], ["loc", [null, [31, 10], [31, 44]]], 0, 0], ["subexpr", "hash", [], ["value", "inset", "label", "Inset"], ["loc", [null, [32, 10], [32, 44]]], 0, 0], ["subexpr", "hash", [], ["value", "outset", "label", "Outset"], ["loc", [null, [33, 10], [33, 46]]], 0, 0]], [], ["loc", [null, [24, 16], [34, 9]]], 0, 0]], ["loc", [null, [22, 6], [35, 8]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 6
                  },
                  "end": {
                    "line": 41,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-border/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "activeWidth", ["loc", [null, [40, 34], [40, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "widthOptions", ["loc", [null, [40, 54], [40, 66]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [40, 8], [40, 68]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 46,
                        "column": 10
                      },
                      "end": {
                        "line": 48,
                        "column": 10
                      }
                    },
                    "moduleName": "cornerstone/components/controls/control-border/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "activeAltColor", ["loc", [null, [47, 39], [47, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "altColorOptions", ["loc", [null, [47, 62], [47, 77]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [47, 12], [47, 79]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 44,
                      "column": 8
                    },
                    "end": {
                      "line": 49,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-border/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "activeColor", ["loc", [null, [45, 37], [45, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "colorOptions", ["loc", [null, [45, 57], [45, 69]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [45, 10], [45, 71]]], 0, 0], ["block", "if", [["get", "showAltColor", ["loc", [null, [46, 16], [46, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [46, 10], [48, 17]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 43,
                    "column": 6
                  },
                  "end": {
                    "line": 50,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-border/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "controls/input-list-item", [], ["label", "Color"], 0, null, ["loc", [null, [44, 8], [49, 37]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 38,
                  "column": 4
                },
                "end": {
                  "line": 51,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-border/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "controls/input-list-item", [], ["label", "Width"], 0, null, ["loc", [null, [39, 6], [41, 35]]]], ["block", "if", [["get", "showColor", ["loc", [null, [43, 12], [43, 21]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [43, 6], [50, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-border/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "Link Sides", "isVisible", ["subexpr", "not", [["get", "alwaysLinked", ["loc", [null, [5, 66], [5, 78]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 61], [5, 79]]], 0, 0]], 0, null, ["loc", [null, [5, 4], [10, 33]]]], ["block", "controls/input-list-item", [], ["label", "Side", "isVisible", ["subexpr", "not", [["get", "linked", ["loc", [null, [12, 60], [12, 66]]], 0, 0, 0, 0]], [], ["loc", [null, [12, 55], [12, 67]]], 0, 0]], 1, null, ["loc", [null, [12, 4], [19, 33]]]], ["block", "controls/input-list-item", [], ["label", "Style"], 2, null, ["loc", [null, [21, 4], [36, 33]]]], ["block", "unless", [["subexpr", "eq", [["get", "activeStyle", ["loc", [null, [38, 18], [38, 29]]], 0, 0, 0, 0], "none"], [], ["loc", [null, [38, 14], [38, 37]]], 0, 0]], [], 3, null, ["loc", [null, [38, 4], [51, 15]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-border/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [53, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 57,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-border/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [55, 22]]]], ["content", "yield", ["loc", [null, [56, 0], [56, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-box-shadow/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder', 'cornerstone/util/split-on-whitespace'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder, _cornerstoneUtilSplitOnWhitespace) {

  function composedValue(name) {
    return _ember['default'].computed('value', {
      get: function get() {
        return this.destruct()[name];
      },
      set: function set(key, value) {
        var update = {};
        update[name] = value;
        this.set('value', this.reconstitute(update));
        return value;
      }
    });
  }

  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    reconstitute: function reconstitute(updates) {

      var data = this.destruct();

      for (var key in updates) {
        data[key] = updates[key];
      }

      return '' + (data.inset ? 'inset ' : '') + data.xOffset + ' ' + data.yOffset + ' ' + data.blur + ' ' + data.spread;
    },

    destruct: function destruct() {

      var parts = (0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('value', ''));
      var inset = 'inset' === parts[0];

      if (inset) {
        parts.shift();
      }

      var data = {
        xOffset: _ember['default'].isPresent(parts[0]) ? parts[0] : '0px',
        yOffset: _ember['default'].isPresent(parts[1]) ? parts[1] : '0px',
        blur: _ember['default'].isPresent(parts[2]) ? parts[2] : '0px',
        spread: _ember['default'].isPresent(parts[3]) ? parts[3] : '0px',
        inset: inset
      };

      // debugger;
      return data;
    },

    inset: composedValue('inset'),
    xOffset: composedValue('xOffset'),
    yOffset: composedValue('yOffset'),
    blur: composedValue('blur'),
    spread: composedValue('spread'),

    showColor: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('color'),
    showAltColor: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('alt_color'),

    xOffsetOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('x_offset', {
      available_units: ['px', 'em', 'rem'],
      ranges: {
        px: { min: -50, max: 50, step: 1 },
        em: { min: -1, max: 1, step: 0.001 },
        rem: { min: -1, max: 1, step: 0.001 }
      }
    }),

    yOffsetOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('y_offset', {
      available_units: ['px', 'em', 'rem'],
      ranges: {
        px: { min: -50, max: 50, step: 1 },
        em: { min: -1, max: 1, step: 0.001 },
        rem: { min: -1, max: 1, step: 0.001 }
      }
    }),

    blurOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('blur', {
      available_units: ['px', 'em', 'rem'],
      ranges: {
        px: { min: 0, max: 100, step: 1 },
        em: { min: 0, max: 5, step: 0.001 },
        rem: { min: 0, max: 5, step: 0.001 }
      }
    }),

    spreadOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('blur', {
      available_units: ['px', 'em', 'rem']
    }),

    colorOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('color'),
    altColorOptions: _ember['default'].computed('colorOptions', function () {
      var options = _ember['default'].copy(this.get('colorOptions'));
      if (options.alt_label) {
        options.label = options.alt_label;
      }
      return options;
    })
  });
});
define("cornerstone/components/controls/control-box-shadow/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "xOffset", ["loc", [null, [6, 32], [6, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "xOffsetOptions", ["loc", [null, [6, 48], [6, 62]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 6], [6, 64]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "yOffset", ["loc", [null, [10, 32], [10, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "yOffsetOptions", ["loc", [null, [10, 48], [10, 62]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 6], [10, 64]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "blur", ["loc", [null, [14, 32], [14, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "blurOptions", ["loc", [null, [14, 45], [14, 56]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [14, 6], [14, 59]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 23,
                    "column": 10
                  },
                  "end": {
                    "line": 26,
                    "column": 10
                  }
                },
                "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n            ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [24, 41], [24, 47]]], 0, 0, 0, 0]], [], [], 0, 0], "value", false, "icon", "sign-out"], ["loc", [null, [24, 12], [24, 77]]], 0, 0], ["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [25, 41], [25, 47]]], 0, 0, 0, 0]], [], [], 0, 0], "value", true, "icon", "sign-in"], ["loc", [null, [25, 12], [25, 75]]], 0, 0]],
              locals: ["choose"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 29,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2, "style", "-webkit-flex: 0 0 48%; flex: 0 0 48%;");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              dom.setAttribute(el2, "style", "-webkit-flex: 0 0 48%; flex: 0 0 48%;");
              var el3 = dom.createTextNode("\n");
              dom.appendChild(el2, el3);
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(2);
              morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 1, 1);
              morphs[1] = dom.createMorphAt(dom.childAt(element0, [3]), 1, 1);
              return morphs;
            },
            statements: [["inline", "forms/unit-input", [], ["value", ["subexpr", "@mut", [["get", "spread", ["loc", [null, [20, 35], [20, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "spreadOptions", ["loc", [null, [20, 50], [20, 63]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [20, 10], [20, 65]]], 0, 0], ["block", "forms/choose-single", [], ["value", ["subexpr", "@mut", [["get", "inset", ["loc", [null, [23, 39], [23, 44]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [23, 10], [26, 34]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child4 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 34,
                      "column": 8
                    },
                    "end": {
                      "line": 36,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "control.keyAltColor", ["loc", [null, [35, 37], [35, 56]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "altColorOptions", ["loc", [null, [35, 65], [35, 80]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [35, 10], [35, 82]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 32,
                    "column": 6
                  },
                  "end": {
                    "line": 37,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "control.keyColor", ["loc", [null, [33, 35], [33, 51]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "colorOptions", ["loc", [null, [33, 60], [33, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [33, 8], [33, 74]]], 0, 0], ["block", "if", [["get", "showAltColor", ["loc", [null, [34, 14], [34, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [34, 8], [36, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 31,
                  "column": 4
                },
                "end": {
                  "line": 38,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "controls/input-list-item", [], ["label", "Color"], 0, null, ["loc", [null, [32, 6], [37, 35]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 40,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "X-Offset"], 0, null, ["loc", [null, [5, 4], [7, 33]]]], ["block", "controls/input-list-item", [], ["label", "Y-Offset"], 1, null, ["loc", [null, [9, 4], [11, 33]]]], ["block", "controls/input-list-item", [], ["label", "Blur"], 2, null, ["loc", [null, [13, 4], [15, 33]]]], ["block", "controls/input-list-item", [], ["label", "Spread &amp;<br>Position"], 3, null, ["loc", [null, [17, 4], [29, 33]]]], ["block", "if", [["get", "showColor", ["loc", [null, [31, 10], [31, 19]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [31, 4], [38, 11]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 41,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [40, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 43,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-box-shadow/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [41, 22]]]], ["content", "yield", ["loc", [null, [42, 0], [42, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-breakpoints/component', ['exports', 'ember', 'npm:nouislider', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _npmNouislider, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({

    didInsertElement: function didInsertElement() {

      _ember['default'].run.scheduleOnce('afterRender', (function () {

        _npmNouislider['default'].create(this.$('.cs-bp-slider-xs .cs-unit-slider-target')[0], {
          start: 300,
          step: 1,
          connect: 'lower',
          range: {
            'min': 0,
            'max': 1500
          }
        });

        _npmNouislider['default'].create(this.$('.cs-bp-slider-sm .cs-unit-slider-target')[0], {
          start: [301, 600],
          step: 1,
          connect: true,
          range: {
            'min': 0,
            'max': 1500
          }
        });

        _npmNouislider['default'].create(this.$('.cs-bp-slider-md .cs-unit-slider-target')[0], {
          start: [601, 900],
          step: 1,
          connect: true,
          range: {
            'min': 0,
            'max': 1500
          }
        });

        _npmNouislider['default'].create(this.$('.cs-bp-slider-lg .cs-unit-slider-target')[0], {
          start: [901, 1200],
          step: 1,
          connect: true,
          range: {
            'min': 0,
            'max': 1500
          }
        });

        _npmNouislider['default'].create(this.$('.cs-bp-slider-xl .cs-unit-slider-target')[0], {
          start: 1201,
          step: 1,
          connect: 'upper',
          range: {
            'min': 0,
            'max': 1500
          }
        });
      }).bind(this));
    }

  });
});
define("cornerstone/components/controls/control-breakpoints/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-unit-slider cs-bp-slider-xs");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "cs-unit-slider-target-container");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "cs-unit-slider-target");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createElement("strong");
              var el4 = dom.createTextNode("XS");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 21,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-unit-slider cs-bp-slider-sm");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "cs-unit-slider-target-container");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "cs-unit-slider-target");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createElement("strong");
              var el4 = dom.createTextNode("SM");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 23,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-unit-slider cs-bp-slider-md");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "cs-unit-slider-target-container");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "cs-unit-slider-target");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createElement("strong");
              var el4 = dom.createTextNode("MD");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-unit-slider cs-bp-slider-lg");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "cs-unit-slider-target-container");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "cs-unit-slider-target");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createElement("strong");
              var el4 = dom.createTextNode("LG");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 41,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-unit-slider cs-bp-slider-xl");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "cs-unit-slider-target-container");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("div");
              dom.setAttribute(el3, "class", "cs-unit-slider-target");
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createElement("strong");
              var el4 = dom.createTextNode("XL");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 50,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "<strong>300px</strong> &amp;<br>Below"], 0, null, ["loc", [null, [5, 4], [12, 33]]]], ["block", "controls/input-list-item", [], ["label", "<strong>301px</strong> to<br><strong>600px</strong>"], 1, null, ["loc", [null, [14, 4], [21, 33]]]], ["block", "controls/input-list-item", [], ["label", "<strong>601px</strong> to<br><strong>900px</strong>"], 2, null, ["loc", [null, [23, 4], [30, 33]]]], ["block", "controls/input-list-item", [], ["label", "<strong>901px</strong> to<br><strong>1200px</strong>"], 3, null, ["loc", [null, [32, 4], [39, 33]]]], ["block", "controls/input-list-item", [], ["label", "<strong>1201px</strong> &amp;<br>Above"], 4, null, ["loc", [null, [41, 4], [48, 33]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 52,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [50, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 54,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-breakpoints/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [52, 22]]]], ["content", "yield", ["loc", [null, [53, 0], [53, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-checkbox-list/component', ['exports', 'ember', 'cornerstone/components/controls/input-list-item/component'], function (exports, _ember, _cornerstoneComponentsControlsInputListItemComponent) {
  exports['default'] = _cornerstoneComponentsControlsInputListItemComponent['default'].extend({
    checkboxes: _ember['default'].computed('control.options.list', function () {

      var cbs = this.get('control.options.list');
      if (!_ember['default'].isArray(cbs)) {
        return _ember['default'].A();
      }

      return cbs.map(function (cb) {
        cb.keyPath = _ember['default'].String.camelize('key-' + cb.key);
        return cb;
      });
    })
  });
});
define("cornerstone/components/controls/control-checkbox-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-checkbox-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/checkbox-list", [], ["checkboxes", ["subexpr", "@mut", [["get", "checkboxes", ["loc", [null, [3, 35], [3, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "proxy", ["subexpr", "@mut", [["get", "control", ["loc", [null, [3, 52], [3, 59]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 61]]], 0, 0], ["content", "yield", ["loc", [null, [4, 2], [4, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-checkbox-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [5, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-choose-multi/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-choose-multi/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 10,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-choose-multi/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/choose-multi", [], ["visibilityObservation", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [4, 26], [4, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "choices", ["subexpr", "@mut", [["get", "control.options.choices", ["loc", [null, [5, 12], [5, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "offValue", ["subexpr", "@mut", [["get", "options.off_value", ["loc", [null, [6, 13], [6, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "delimiter", ["subexpr", "@mut", [["get", "options.delimiter", ["loc", [null, [7, 14], [7, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [8, 10], [8, 15]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [9, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-choose-multi/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [10, 22]]]], ["content", "yield", ["loc", [null, [11, 0], [11, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-choose-single/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-choose-single/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-choose-single/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/choose-single", [], ["visibilityObservation", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [3, 46], [3, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "choices", ["subexpr", "@mut", [["get", "control.options.choices", ["loc", [null, [3, 63], [3, 86]]], 0, 0, 0, 0]], [], [], 0, 0], "offValue", ["subexpr", "@mut", [["get", "options.off_value", ["loc", [null, [3, 96], [3, 113]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 120], [3, 125]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 127]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-choose-single/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-color/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({

    showAlt: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('alt'),

    colorValue: _ember['default'].computed.alias('value'),
    altColorValue: _ember['default'].computed.alias('control.keyAlt'),

    baseOptions: _ember['default'].computed.alias('control.options'),
    altOptions: _ember['default'].computed('baseOptions', function () {
      var options = _ember['default'].merge({}, this.get('baseOptions'));
      if (options.alt_label) {
        options.label = options.alt_label;
      }
      return options;
    })

  });
});
define("cornerstone/components/controls/control-color/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-color/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "control.keyAlt", ["loc", [null, [6, 31], [6, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "altOptions", ["loc", [null, [6, 54], [6, 64]]], 0, 0, 0, 0]], [], [], 0, 0], "usePalette", true], ["loc", [null, [6, 4], [6, 82]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-color/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 29], [4, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "baseOptions", ["loc", [null, [4, 43], [4, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "usePalette", true], ["loc", [null, [4, 2], [4, 72]]], 0, 0], ["block", "if", [["get", "showAlt", ["loc", [null, [5, 8], [5, 15]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 2], [7, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-color/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [8, 22]]]], ["content", "yield", ["loc", [null, [9, 0], [9, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-dimensions/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder', 'cornerstone/util/split-on-whitespace'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder, _cornerstoneUtilSplitOnWhitespace) {

  var dims = ['top', 'right', 'bottom', 'left'];

  function dimensionOptions(dim) {
    return _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions(dim, {
      available_units: ['px', 'em', 'rem', '%'],
      ranges: {
        px: { min: 0, max: 100, step: 1 },
        em: { min: 0, max: 2.5, step: 0.001 },
        rem: { min: 0, max: 2.5, step: 0.001 },
        '%': { min: 0, max: 100, step: 0.1 }
      }
    }, function (options) {
      if (options.disabled && options.hasOwnProperty('fallback_value')) {
        options.unlinkedState = options.fallback_value;
      }
      return options;
    });
  }

  function dimensionProperty(dim) {

    return _ember['default'].computed('expandedValue', {
      get: function get() {
        return this.getWithDefault(dim + 'Options.unlinkedState', (0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('expandedValue', ''))[dims.indexOf(dim)]);
      },
      set: function set(key, value) {

        var parts = (0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('expandedValue', ''));

        if (this.get('linked')) {
          dims.forEach((function (side, index) {
            var unlinked = this.get(side + 'Options.unlinkedState');
            parts[index] = _ember['default'].isNone(unlinked) ? value : unlinked;
          }).bind(this));
        } else {
          parts[dims.indexOf(dim)] = value;
        }

        this.set('expandedValue', parts.join(' '));
        this.set('recentlyChanged', dim);
        return value;
      }
    });
  }

  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    init: function init() {

      this._super.apply(this, arguments);

      // Linked detection
      var value = (0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('value', ''));
      var linked = false;

      if (1 === value.length) {
        linked = true;
      } else {
        linked = 1 === dims.filter((function (dim) {
          return _ember['default'].isNone(this.get(dim + 'Options.unlinkedState'));
        }).bind(this)).map(function (dim) {
          return value[dims.indexOf(dim)];
        }).uniq().length;
      }

      if (linked) {
        this.set('linked', true);
      }
    },

    expandedValue: _ember['default'].computed('value', {
      get: function get() {
        var value = this.getWithDefault('value', '');

        if (1 === (0, _cornerstoneUtilSplitOnWhitespace['default'])(value).length) {
          return [value, value, value, value].join(' ');
        }

        return value;
      },
      set: function set(key, value) {
        var a = _ember['default'].A((0, _cornerstoneUtilSplitOnWhitespace['default'])(value));
        this.set('value', 1 === a.uniq().length ? a.get('firstObject') : value);
        return value;
      }
    }),

    labels: _ember['default'].computed('control.options.labels', function () {

      var labels = {};
      var defaults = {
        top: 'Top',
        right: 'Right',
        bottom: 'Bottom',
        left: 'Left'
      };

      var mappedLabels = this.getWithDefault('control.options.labels', {});
      Object.keys(defaults).forEach(function (label) {
        labels[label] = _ember['default'].isPresent(mappedLabels[label]) ? mappedLabels[label] : defaults[label];
      });

      return labels;
    }),

    linked: false,

    top: dimensionProperty('top'),
    right: dimensionProperty('right'),
    bottom: dimensionProperty('bottom'),
    left: dimensionProperty('left'),

    topOptions: dimensionOptions('top'),
    rightOptions: dimensionOptions('right'),
    bottomOptions: dimensionOptions('bottom'),
    leftOptions: dimensionOptions('left'),

    observeRecentDimension: _ember['default'].observer('linked', function () {

      if (!this.get('linked')) {
        return;
      }

      var recent = this.get('recentlyChanged');

      if (!recent) {
        recent = 'top';
      }

      this.set(recent, this.get(recent));
    })
  });
});
define("cornerstone/components/controls/control-dimensions/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 6
                  },
                  "end": {
                    "line": 18,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [7, 17], [7, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "value", false, "icon", "unlink", "tooltip", "Unlinked"], ["loc", [null, [6, 8], [11, 10]]], 0, 0], ["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [13, 17], [13, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "value", true, "icon", "link", "tooltip", "Linked"], ["loc", [null, [12, 8], [17, 10]]], 0, 0]],
              locals: ["choose"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 19,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "forms/choose-single", [], ["choices", ["subexpr", "@mut", [["get", "linkedChoices", ["loc", [null, [5, 37], [5, 50]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "linked", ["loc", [null, [5, 57], [5, 63]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [5, 6], [18, 30]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 23,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "top", ["loc", [null, [22, 32], [22, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "topOptions", ["loc", [null, [22, 44], [22, 54]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [22, 6], [22, 56]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 25,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "right", ["loc", [null, [26, 32], [26, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "rightOptions", ["loc", [null, [26, 46], [26, 58]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [26, 6], [26, 60]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "bottom", ["loc", [null, [30, 32], [30, 38]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "bottomOptions", ["loc", [null, [30, 47], [30, 60]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [30, 6], [30, 62]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "left", ["loc", [null, [34, 32], [34, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "leftOptions", ["loc", [null, [34, 45], [34, 56]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [34, 6], [34, 58]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(5);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 8, 8, contextualElement);
            dom.insertBoundary(fragment, 0);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "Link Sides"], 0, null, ["loc", [null, [4, 4], [19, 33]]]], ["block", "controls/input-list-item", [], ["label", ["subexpr", "@mut", [["get", "labels.top", ["loc", [null, [21, 38], [21, 48]]], 0, 0, 0, 0]], [], [], 0, 0]], 1, null, ["loc", [null, [21, 4], [23, 33]]]], ["block", "controls/input-list-item", [], ["label", ["subexpr", "@mut", [["get", "labels.right", ["loc", [null, [25, 38], [25, 50]]], 0, 0, 0, 0]], [], [], 0, 0]], 2, null, ["loc", [null, [25, 4], [27, 33]]]], ["block", "controls/input-list-item", [], ["label", ["subexpr", "@mut", [["get", "labels.bottom", ["loc", [null, [29, 38], [29, 51]]], 0, 0, 0, 0]], [], [], 0, 0]], 3, null, ["loc", [null, [29, 4], [31, 33]]]], ["block", "controls/input-list-item", [], ["label", ["subexpr", "@mut", [["get", "labels.left", ["loc", [null, [33, 38], [33, 49]]], 0, 0, 0, 0]], [], [], 0, 0]], 4, null, ["loc", [null, [33, 4], [35, 33]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [37, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 41,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-dimensions/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [39, 22]]]], ["content", "yield", ["loc", [null, [40, 0], [40, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-flex-layout-attr/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder', 'cornerstone/util/split-on-whitespace'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder, _cornerstoneUtilSplitOnWhitespace) {

  var linkedProperyKeys = ['flexDirection', 'reverseLayout', 'wrapChildren', 'horizontal', 'vertical'];

  function linkedProperty(key, parser) {

    if ('horizontal' === key) {
      parser = function (value) {
        return linkedAxis(value, 1);
      };
    }

    if ('vertical' === key) {
      parser = function (value) {
        return linkedAxis(value, 0);
      };
    }

    function linkedAxis(value, index) {
      var side = (value[1] || '').split('-')[index];
      return _ember['default'].isPresent(side) ? side.replace('top', 'start').replace('left', 'start').replace('right', 'end').replace('bottom', 'end') : 'start';
    }

    return _ember['default'].computed.apply(_ember['default'], ['value', {
      get: function get() {
        // if ( linkedProperty )
        return parser((0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('value', '')));
      },
      set: function set(key, value) {

        var otherKeys = linkedProperyKeys.filter(function (otherKey) {
          return key !== otherKey;
        });

        var args = this.getProperties(otherKeys);
        args[key] = value;

        var isRow = 'row' === args.flexDirection;
        var layout = isRow ? 'row' : 'col';

        if (args.wrapChildren) {
          layout += 's';
        }

        var map = {
          vertical: {
            start: 'top',
            end: 'bottom'
          },
          horizontal: {
            start: 'left',
            end: 'right'
          }
        };

        var vertical = map.vertical[args.vertical] ? map.vertical[args.vertical] : args.vertical;
        var horizontal = map.horizontal[args.horizontal] ? map.horizontal[args.horizontal] : args.horizontal;

        var reverse = args.reverseLayout ? ' rev' : '';

        // console.log(`${layout} ${vertical}-${horizontal}${reverse}`);

        this.set('value', layout + ' ' + vertical + '-' + horizontal + reverse);
        return value;
      }
    }]);
  }

  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    flexDirection: linkedProperty('flexDirection', function (value) {
      return ['col', 'cols'].includes(value[0]) ? 'col' : 'row';
    }),

    reverseLayout: linkedProperty('reverseLayout', function (value) {
      return 'rev' === value[2];
    }),

    wrapChildren: linkedProperty('wrapChildren', function (value) {
      return ['rows', 'cols'].includes(value[0]);
    }),

    horizontal: linkedProperty('horizontal'),

    vertical: linkedProperty('vertical'),

    baseOptions: [{ value: 'start', label: 'Start' }, { value: 'center', label: 'Center' }, { value: 'end', label: 'End' }],

    mainAxisOptions: [{ value: 'justify', label: 'Space Between' }, { value: 'spread', label: 'Space Around' }],

    crossAxisOptions: [{ value: 'stretch', label: 'Stretch' }],

    horizontalOptions: _ember['default'].computed('flexDirection', function () {
      return _ember['default'].A('row' === this.get('flexDirection') ? this.get('baseOptions').concat(this.get('mainAxisOptions')) : this.get('baseOptions').concat(this.get('crossAxisOptions')));
    }),

    verticalOptions: _ember['default'].computed('flexDirection', function () {
      return _ember['default'].A('row' === this.get('flexDirection') ? this.get('baseOptions').concat(this.get('crossAxisOptions')) : this.get('baseOptions').concat(this.get('mainAxisOptions')));
    }),

    horizontalOptionObserver: _ember['default'].observer('horizontalOptions', function () {

      var current = this.get('horizontal');

      if (!_ember['default'].isNone(this.get('horizontalOptions').find(function (opt) {
        return opt.value === current;
      }))) {
        return;
      }

      var fallback = 'start';

      if ('row' === this.get('flexDirection')) {
        if ('stretch' === current) {
          fallback = 'spread';
        }
      } else {
        if ('spread' === current) {
          fallback = 'stretch';
        }
      }

      this.set('horizontal', fallback);
    }),

    verticalOptionObserver: _ember['default'].observer('verticalOptions', function () {

      var current = this.get('vertical');

      if (!_ember['default'].isNone(this.get('verticalOptions').find(function (opt) {
        return opt.value === current;
      }))) {
        return;
      }

      var fallback = 'start';

      if ('row' === this.get('flexDirection')) {
        if ('spread' === current) {
          fallback = 'stretch';
        }
      } else {
        if ('stretch' === current) {
          fallback = 'spread';
        }
      }

      this.set('vertical', fallback);
    })

  });
});
define("cornerstone/components/controls/control-flex-layout-attr/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 6
                  },
                  "end": {
                    "line": 9,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [7, 37], [7, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "row", "label", "Row"], ["loc", [null, [7, 8], [7, 69]]], 0, 0], ["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [8, 37], [8, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "col", "label", "Column"], ["loc", [null, [8, 8], [8, 72]]], 0, 0]],
              locals: ["choose"],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "wrapChildren", ["loc", [null, [12, 32], [12, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "label", "Wrap Children", "wide", true], ["loc", [null, [12, 8], [12, 78]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "forms/choose-single", [], ["value", ["subexpr", "@mut", [["get", "flexDirection", ["loc", [null, [6, 35], [6, 48]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [6, 6], [9, 30]]]], ["inline", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "reverseLayout", ["loc", [null, [10, 30], [10, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "label", "Reverse Layout", "wide", true], ["loc", [null, [10, 6], [10, 78]]], 0, 0], ["block", "if", [["get", "control.options.allow_wrap", ["loc", [null, [11, 12], [11, 38]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [11, 6], [13, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 16,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "horizontal", ["loc", [null, [17, 34], [17, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "horizontalOptions", ["loc", [null, [17, 53], [17, 70]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [17, 6], [17, 73]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 20,
                  "column": 4
                },
                "end": {
                  "line": 22,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "vertical", ["loc", [null, [21, 34], [21, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "verticalOptions", ["loc", [null, [21, 51], [21, 66]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [21, 6], [21, 69]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 24,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "Layout"], 0, null, ["loc", [null, [5, 4], [14, 33]]]], ["block", "controls/input-list-item", [], ["label", "Horizontal"], 1, null, ["loc", [null, [16, 4], [18, 33]]]], ["block", "controls/input-list-item", [], ["label", "Vertical"], 2, null, ["loc", [null, [20, 4], [22, 33]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [24, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-flex-layout-attr/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [26, 22]]]], ["content", "yield", ["loc", [null, [27, 0], [27, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-flex-layout/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    canWrap: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('wrap'),
    canReverse: _ember['default'].computed('control.options.allow_reverse', function () {
      return false !== this.get('control.options.allow_reverse');
    }),

    wrapChildren: _ember['default'].computed.alias('control.keyWrap'),
    // wrapChildren: Ember.computed('control.keyWrap', {
    //   get() {
    //     return 'wrap' === this.get('control.keyWrap');
    //   },
    //   set(key,value) {
    //     this.set('control.keyWrap', value ? 'wrap' : '');
    //     return value;
    //   }
    // }),

    directionUpdated: 0,
    didReceiveAttrs: function didReceiveAttrs() {
      var direction = this.get('flexDirection');
      this.set('previousDirection', this.get('flexDirection'));
      this.set('isRow', 'row' === direction);
    },

    directionChange: _ember['default'].observer('flexDirection', function () {
      var previousDirection = this.get('previousDirection');
      var direction = this.get('flexDirection');
      if (direction !== previousDirection) {

        var align = this.get('control.keyAlign');
        var justify = this.get('control.keyJustify');
        this.set('control.keyAlign', justify);
        this.set('control.keyJustify', align);

        this.set('isRow', 'row' === direction);
        this.incrementProperty('directionUpdated');
        this.set('previousDirection', direction);
      }
    }),

    flexDirection: _ember['default'].computed('control.keyDirection', {
      get: function get() {
        return this.getWithDefault('control.keyDirection', 'row').split('-')[0];
      },

      set: function set(key, value) {
        var direction = value;
        if (this.get('canReverse') && this.get('reverseLayout')) {
          direction += '-reverse';
        }
        this.set('control.keyDirection', direction);
        return value;
      }
    }),

    reverseLayout: _ember['default'].computed('control.keyDirection', {
      get: function get() {
        return this.getWithDefault('control.keyDirection', 'row').includes('reverse');
      },

      set: function set(key, value) {
        var direction = this.getWithDefault('control.keyDirection', 'row').split('-')[0];
        if (value) {
          direction += '-reverse';
        }
        this.set('control.keyDirection', direction);
        return value;
      }
    }),

    flexDir: _ember['default'].computed.alias('flexDirection'),

    horizontalPath: _ember['default'].computed('flexDirection', function () {
      return 'row' === this.get('flexDirection') ? 'control.keyJustify' : 'control.keyAlign';
    }),

    verticalPath: _ember['default'].computed('flexDirection', function () {
      return 'row' === this.get('flexDirection') ? 'control.keyAlign' : 'control.keyJustify';
    }),

    baseOptions: [{ value: 'flex-start', label: 'Start' }, { value: 'center', label: 'Center' }, { value: 'flex-end', label: 'End' }],

    mainAxisOptions: [{ value: 'space-between', label: 'Space Between' }, { value: 'space-around', label: 'Space Around' }],

    crossAxisOptions: [{ value: 'stretch', label: 'Stretch' }],

    horizontalOptions: _ember['default'].computed('directionUpdated', function () {
      // console.log('option update', this.get('flexDirection') );
      return _ember['default'].A('row' === this.get('flexDirection') ? this.get('baseOptions').concat(this.get('mainAxisOptions')) : this.get('baseOptions').concat(this.get('crossAxisOptions')));
    }),

    verticalOptions: _ember['default'].computed('directionUpdated', function () {

      return _ember['default'].A('row' === this.get('flexDirection') ? this.get('baseOptions').concat(this.get('crossAxisOptions')) : this.get('baseOptions').concat(this.get('mainAxisOptions')));
    }),

    horizontalOptionObserver: _ember['default'].observer('horizontalOptions', function () {
      var isRow = this.get('isRow');
      var key = isRow ? 'control.keyJustify' : 'control.keyAlign';
      var current = this.get(key);

      if (!_ember['default'].isNone(this.get('horizontalOptions').find(function (opt) {
        return opt.value === current;
      }))) {
        return;
      }

      var fallback = 'flex-start';

      if (isRow) {
        if ('stretch' === current) {
          fallback = 'space-around';
        }
      } else {
        if ('space-around' === current) {
          fallback = 'stretch';
        }
      }

      this.set(key, fallback);
    }),

    verticalOptionObserver: _ember['default'].observer('verticalOptions', function () {

      var isRow = this.get('isRow');
      var key = isRow ? 'control.keyAlign' : 'control.keyJustify';
      var current = this.get(key);

      if (!_ember['default'].isNone(this.get('verticalOptions').find(function (opt) {
        return opt.value === current;
      }))) {
        return;
      }

      var fallback = 'flex-start';

      if ('row' === this.get('flexDirection')) {
        if ('space-around' === current) {
          fallback = 'stretch';
        }
      } else {
        if ('stretch' === current) {
          fallback = 'space-around';
        }
      }

      this.set(key, fallback);
    })

  });
});
define("cornerstone/components/controls/control-flex-layout/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 6
                  },
                  "end": {
                    "line": 9,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [7, 37], [7, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "row", "label", "Row"], ["loc", [null, [7, 8], [7, 69]]], 0, 0], ["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "choose", ["loc", [null, [8, 37], [8, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "value", "column", "label", "Column"], ["loc", [null, [8, 8], [8, 75]]], 0, 0]],
              locals: ["choose"],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 10,
                    "column": 6
                  },
                  "end": {
                    "line": 12,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "reverseLayout", ["loc", [null, [11, 32], [11, 45]]], 0, 0, 0, 0]], [], [], 0, 0], "label", "Reverse Layout", "wide", true], ["loc", [null, [11, 8], [11, 80]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child2 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 6
                  },
                  "end": {
                    "line": 15,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "wrapChildren", ["loc", [null, [14, 32], [14, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "label", "Wrap Children", "wide", true], ["loc", [null, [14, 8], [14, 78]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 16,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "forms/choose-single", [], ["value", ["subexpr", "@mut", [["get", "flexDirection", ["loc", [null, [6, 35], [6, 48]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [6, 6], [9, 30]]]], ["block", "if", [["get", "canReverse", ["loc", [null, [10, 12], [10, 22]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [10, 6], [12, 13]]]], ["block", "if", [["get", "canWrap", ["loc", [null, [13, 12], [13, 19]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [13, 6], [15, 13]]]]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 6
                  },
                  "end": {
                    "line": 21,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "control.keyJustify", ["loc", [null, [20, 36], [20, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "horizontalOptions", ["loc", [null, [20, 63], [20, 80]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [20, 8], [20, 83]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 21,
                    "column": 6
                  },
                  "end": {
                    "line": 23,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "control.keyAlign", ["loc", [null, [22, 36], [22, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "horizontalOptions", ["loc", [null, [22, 61], [22, 78]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [22, 8], [22, 81]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 18,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isRow", ["loc", [null, [19, 12], [19, 17]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [19, 6], [23, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child2 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 6
                  },
                  "end": {
                    "line": 29,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "control.keyAlign", ["loc", [null, [28, 36], [28, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "verticalOptions", ["loc", [null, [28, 61], [28, 76]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [28, 8], [28, 79]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 29,
                    "column": 6
                  },
                  "end": {
                    "line": 31,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "control.keyJustify", ["loc", [null, [30, 36], [30, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "verticalOptions", ["loc", [null, [30, 63], [30, 78]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [30, 8], [30, 81]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 32,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "isRow", ["loc", [null, [27, 12], [27, 17]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [27, 6], [31, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 34,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "Layout"], 0, null, ["loc", [null, [5, 4], [16, 33]]]], ["block", "controls/input-list-item", [], ["label", "Horizontal"], 1, null, ["loc", [null, [18, 4], [24, 33]]]], ["block", "controls/input-list-item", [], ["label", "Vertical"], 2, null, ["loc", [null, [26, 4], [32, 33]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [34, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-flex-layout/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [36, 22]]]], ["content", "yield", ["loc", [null, [37, 0], [37, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-flex/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder', 'cornerstone/util/split-on-whitespace'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder, _cornerstoneUtilSplitOnWhitespace) {

  function composedValue(name) {
    return _ember['default'].computed('value', {
      get: function get() {
        return this.destruct()[name];
      },
      set: function set(key, value) {
        var update = {};
        update[name] = value;
        this.set('value', this.reconstitute(update));
        return value;
      }
    });
  }

  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    presetChoices: _ember['default'].A([{
      label: 'Standard',
      value: '0 1 auto'
    }, {
      label: 'No Shrink',
      value: '0 0 auto'
    }, {
      label: 'Fill Space',
      value: '1 0 auto'
    }, {
      label: 'Fill Space Equally',
      value: '1 0 0%'
    }]),

    flexGrow: composedValue('flexGrow'),
    flexShrink: composedValue('flexShrink'),
    flexBasis: composedValue('flexBasis'),

    reconstitute: function reconstitute(updates) {

      var data = this.destruct();

      for (var key in updates) {
        data[key] = updates[key];
      }

      return data.flexGrow + ' ' + data.flexShrink + ' ' + data.flexBasis;
    },

    destruct: function destruct() {

      var parts = (0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('value', ''));

      return {
        flexGrow: _ember['default'].isPresent(parts[0]) ? parts[0] : '0',
        flexShrink: _ember['default'].isPresent(parts[1]) ? parts[1] : '01',
        flexBasis: _ember['default'].isPresent(parts[2]) ? parts[2] : 'auto'
      };
    },

    init: function init() {
      this._super.apply(this, arguments);
      this.detectMode();
      this.set('mode', _ember['default'].isNone(this.detectMode()) ? 'custom' : 'presets');
      window.tester = this;
    },

    detectMode: function detectMode() {

      var value = this.get('value');
      return this.get('presetChoices').find(function (preset) {
        return preset.value === value;
      });
    }

  });
});
define("cornerstone/components/controls/control-flex/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 34], [6, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "presetChoices", ["loc", [null, [6, 48], [6, 61]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Custom"], ["loc", [null, [6, 6], [6, 85]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 10,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "flexGrow", ["loc", [null, [9, 20], [9, 28]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [9, 6], [9, 30]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 13,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "flexShrink", ["loc", [null, [12, 20], [12, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [12, 6], [12, 32]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 16,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-flex/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "flexBasis", ["loc", [null, [15, 20], [15, 29]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [15, 6], [15, 31]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-flex/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "Preset"], 0, null, ["loc", [null, [5, 4], [7, 33]]]], ["block", "controls/input-list-item", [], ["label", "Flex<br>Grow"], 1, null, ["loc", [null, [8, 4], [10, 33]]]], ["block", "controls/input-list-item", [], ["label", "Flex<br>Shrink"], 2, null, ["loc", [null, [11, 4], [13, 33]]]], ["block", "controls/input-list-item", [], ["label", "Flex<br>Basis"], 3, null, ["loc", [null, [14, 4], [16, 33]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 20,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-flex/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [18, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-flex/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [20, 22]]]], ["content", "yield", ["loc", [null, [21, 0], [21, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-font-family/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({
    fonts: _ember['default'].inject.service('templates/fonts')
  });
});
define("cornerstone/components/controls/control-font-family/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-font-family/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 10], [4, 15]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "fonts.fontFamilyOptions", ["loc", [null, [5, 12], [5, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "visibilityObservation", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [6, 26], [6, 34]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [7, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-font-family/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [8, 22]]]], ["content", "yield", ["loc", [null, [9, 0], [9, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-font-weight/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({

    store: _ember['default'].inject.service(),
    fonts: _ember['default'].inject.service('templates/fonts'),

    fontWeightOptions: _ember['default'].computed('control.keyFontFamily', function () {
      var _this = this;

      var selectionID = this.get('control.keyFontFamily');

      var fontSelection = this.get('store').peekAll('templates/fonts/selection').find(function (choice) {
        return selectionID === choice.get('_id');
      });

      if ('inherit' === selectionID) {
        fontSelection = _ember['default'].Object.create({
          _id: 'inherit',
          weights: this.get('fonts.allWeights')
        });
      }

      var weights = _ember['default'].isNone(fontSelection) ? _ember['default'].A() : fontSelection.get('weights');
      var _idPrefix = _ember['default'].isNone(fontSelection) ? '' : fontSelection.get('_id') + ':';
      weights.sort();

      return weights.reduce(function (choices, weight) {
        if (!weight.includes('i')) {
          choices.push({
            value: '' + _idPrefix + weight,
            label: _this.get('i18n').t('app.font-weight.' + weight)
          });
        }
        return choices;
      }, _ember['default'].A());
    }),

    determineNewWeight: _ember['default'].computed(function () {

      var getWeight = (function (val) {
        return this.get('fonts').normalizeWeight(val).split(':')[1];
      }).bind(this);

      return function (newValue, oldValue) {
        return getWeight(newValue) === getWeight(oldValue.value ? oldValue.value : oldValue);
      };
    })

  });
});
define("cornerstone/components/controls/control-font-weight/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-font-weight/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 10], [4, 15]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "fontWeightOptions", ["loc", [null, [5, 12], [5, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "assignDefaultLocator", ["subexpr", "@mut", [["get", "determineNewWeight", ["loc", [null, [6, 25], [6, 43]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [7, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-font-weight/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [8, 22]]]], ["content", "yield", ["loc", [null, [9, 0], [9, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-gradient/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    gradientState: 'linear-gradient',

    actions: {
      openLG: function openLG() {
        this.set('gradientState', 'linear-gradient');
      },
      openRLG: function openRLG() {
        this.set('gradientState', 'repeating-linear-gradient');
      },
      openRG: function openRG() {
        this.set('gradientState', 'radial-gradient');
      },
      openRRG: function openRRG() {
        this.set('gradientState', 'repeating-radial-gradient');
      }
    }

  });
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-gradient/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 12,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-gradient/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "cs-choose cs-choose-condensed cols-4");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createComment("");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [1]);
              var element2 = dom.childAt(element0, [3]);
              var element3 = dom.childAt(element0, [5]);
              var element4 = dom.childAt(element0, [7]);
              var morphs = new Array(12);
              morphs[0] = dom.createAttrMorph(element1, 'class');
              morphs[1] = dom.createElementMorph(element1);
              morphs[2] = dom.createMorphAt(element1, 0, 0);
              morphs[3] = dom.createAttrMorph(element2, 'class');
              morphs[4] = dom.createElementMorph(element2);
              morphs[5] = dom.createMorphAt(element2, 0, 0);
              morphs[6] = dom.createAttrMorph(element3, 'class');
              morphs[7] = dom.createElementMorph(element3);
              morphs[8] = dom.createMorphAt(element3, 0, 0);
              morphs[9] = dom.createAttrMorph(element4, 'class');
              morphs[10] = dom.createElementMorph(element4);
              morphs[11] = dom.createMorphAt(element4, 0, 0);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "gradientState", ["loc", [null, [7, 28], [7, 41]]], 0, 0, 0, 0], "linear-gradient"], [], ["loc", [null, [7, 24], [7, 60]]], 0, 0], "cs-active"], [], ["loc", [null, [7, 19], [7, 74]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["openLG"], [], ["loc", [null, [7, 76], [7, 95]]], 0, 0], ["inline", "fa-icon", ["minus"], [], ["loc", [null, [7, 96], [7, 115]]], 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "gradientState", ["loc", [null, [8, 28], [8, 41]]], 0, 0, 0, 0], "repeating-linear-gradient"], [], ["loc", [null, [8, 24], [8, 70]]], 0, 0], "cs-active"], [], ["loc", [null, [8, 19], [8, 84]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["openRLG"], [], ["loc", [null, [8, 86], [8, 106]]], 0, 0], ["inline", "fa-icon", ["ellipsis-h"], [], ["loc", [null, [8, 107], [8, 131]]], 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "gradientState", ["loc", [null, [9, 28], [9, 41]]], 0, 0, 0, 0], "radial-gradient"], [], ["loc", [null, [9, 24], [9, 60]]], 0, 0], "cs-active"], [], ["loc", [null, [9, 19], [9, 74]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["openRG"], [], ["loc", [null, [9, 76], [9, 95]]], 0, 0], ["inline", "fa-icon", ["circle-thin"], [], ["loc", [null, [9, 96], [9, 121]]], 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "gradientState", ["loc", [null, [10, 28], [10, 41]]], 0, 0, 0, 0], "repeating-radial-gradient"], [], ["loc", [null, [10, 24], [10, 70]]], 0, 0], "cs-active"], [], ["loc", [null, [10, 19], [10, 84]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["openRRG"], [], ["loc", [null, [10, 86], [10, 106]]], 0, 0], ["inline", "fa-icon", ["bullseye"], [], ["loc", [null, [10, 107], [10, 129]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 34,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-gradient/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("select");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("0deg");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("90deg");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("180deg");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("360deg");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("to top");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("to left");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("to right");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("to bottom");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("to bottom left");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("circle");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("circle at top right");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("circle closest-side");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("circle closest-corner");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("circle farthest-side");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("circle farthest-corner");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("ellipsis");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("option");
              var el3 = dom.createTextNode("ellipsis farthest-side at right");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 4
                },
                "end": {
                  "line": 38,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-gradient/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["class", "cs-gradient-color", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [37, 46], [37, 51]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [37, 6], [37, 53]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 40,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-gradient/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "Type"], 0, null, ["loc", [null, [5, 4], [12, 33]]]], ["block", "controls/input-list-item", [], ["label", "Style"], 1, null, ["loc", [null, [14, 4], [34, 33]]]], ["block", "controls/input-list-item", [], ["label", "Colors"], 2, null, ["loc", [null, [36, 4], [38, 33]]]]],
          locals: [],
          templates: [child0, child1, child2]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 42,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-gradient/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [40, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-gradient/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [42, 22]]]], ["content", "yield", ["loc", [null, [43, 0], [43, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-group/component', ['exports', 'cornerstone/components/controls/control-base/component'], function (exports, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-group/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-group/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "controls/input-list", [], ["controls", ["subexpr", "@mut", [["get", "control.controls", ["loc", [null, [3, 33], [3, 49]]], 0, 0, 0, 0]], [], [], 0, 0], "parentLevel", ["subexpr", "@mut", [["get", "level", ["loc", [null, [3, 62], [3, 67]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 69]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-group/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-icon/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({
    showAlt: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('alt'),
    baseOptions: _ember['default'].computed.alias('control.options'),
    altOptions: _ember['default'].computed('baseOptions', function () {
      var options = _ember['default'].merge({}, this.get('baseOptions'));
      if (options.alt_label) {
        options.label = options.alt_label;
      }
      return options;
    })
  });
});
define("cornerstone/components/controls/control-icon/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-icon/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "forms/icon-picker", [], ["value", ["subexpr", "@mut", [["get", "control.keyAlt", ["loc", [null, [5, 30], [5, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "altOptions", ["loc", [null, [5, 53], [5, 63]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [5, 4], [5, 65]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-icon/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "forms/icon-picker", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 28], [3, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "baseOptions", ["loc", [null, [3, 42], [3, 53]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 55]]], 0, 0], ["block", "if", [["get", "showAlt", ["loc", [null, [4, 8], [4, 15]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 2], [6, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-icon/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [7, 22]]]], ["content", "yield", ["loc", [null, [8, 0], [8, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-image-source/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-image-source/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-image-source/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/image-upload", [], ["value", ["subexpr", "@mut", [["get", "control.keyValue", ["loc", [null, [3, 29], [3, 45]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 47]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-image-source/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-image/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent) {

  function dimensionPreview(dimensionKey) {

    return _ember['default'].computed(dimensionKey, 'control.keyIsRetina', function () {

      var dim = this.get(dimensionKey);

      if (!dim || isNaN(dim)) {
        return '';
      }

      if (this.get('control.keyIsRetina')) {
        return Math.round(dim / 2); // (dim / 2).toFixed(4).replace(/\.?0+$/,'');
      }

      return dim;
    });
  }

  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({
    defaultHeight: 2,

    useWidth: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('width'),
    useHeight: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('height'),
    useImgSource: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('img_source'),
    showLink: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('has_link'),
    showInfo: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('has_info'),
    showRetinaReady: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('is_retina'),
    showAltText: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('alt_text'),

    showDimensionPreview: _ember['default'].computed('useWidth', 'useHeight', function () {
      return this.get('useWidth') && this.get('useHeight');
    }),

    widthPreview: dimensionPreview('control.keyWidth'),
    heightPreview: dimensionPreview('control.keyHeight'),

    showDisplayFunction: _ember['default'].computed('showLink', 'showInfo', function () {
      return this.get('showLink') || this.get('showInfo');
    }),

    detectedHeight: _ember['default'].computed('showDimensionPreview', 'showAltText', 'showLink', 'showInfo', function () {

      var cols = Math.floor([{
        key: 'showAltText',
        weight: 1
      }, {
        key: 'showLink',
        weight: 0.5
      }, {
        key: 'showInfo',
        weight: 0.5
      }, {
        key: 'showDimensionPreview',
        weight: 1
      }].reduce((function (memo, item) {
        if (this.get(item.key)) {
          memo -= item.weight;
        }
        return memo;
      }).bind(this), 5));

      return cols;
    }),

    altTextPlaceholder: _ember['default'].computed('control.options', function () {
      var placeholder = this.get('control.options.alt_text_placeholder');
      return placeholder ? placeholder : 'Describe Your Image Here';
    }),

    actions: {
      toggleRetinaReady: function toggleRetinaReady() {
        this.set('control.keyIsRetina', !this.get('control.keyIsRetina'));
      },
      dimensionChange: function dimensionChange(_ref) {
        var width = _ref.width;
        var height = _ref.height;

        this.set('control.keyWidth', width ? width : 48);
        this.set('control.keyHeight', height ? height : 48);
      }
    }

  });
});
define("cornerstone/components/controls/control-image/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-image/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/image-upload", [], ["value", ["subexpr", "@mut", [["get", "control.keyImgSource", ["loc", [null, [5, 33], [5, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "onDimensionChange", ["subexpr", "action", ["dimensionChange"], [], ["loc", [null, [5, 72], [5, 98]]], 0, 0]], ["loc", [null, [5, 6], [5, 101]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 8,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-image/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/image-upload", [], ["value", ["subexpr", "@mut", [["get", "control.keyValue", ["loc", [null, [7, 33], [7, 49]]], 0, 0, 0, 0]], [], [], 0, 0], "onDimensionChange", ["subexpr", "action", ["dimensionChange"], [], ["loc", [null, [7, 68], [7, 94]]], 0, 0]], ["loc", [null, [7, 6], [7, 97]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-image/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "useImgSource", ["loc", [null, [4, 10], [4, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 4], [8, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 17,
                      "column": 10
                    },
                    "end": {
                      "line": 19,
                      "column": 10
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-image/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("            ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("button");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createAttrMorph(element0, 'class');
                  morphs[1] = dom.createElementMorph(element0);
                  morphs[2] = dom.createMorphAt(element0, 0, 0);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", [["subexpr", "if", [["get", "control.keyIsRetina", ["loc", [null, [18, 32], [18, 51]]], 0, 0, 0, 0], "cs-active"], [], ["loc", [null, [18, 27], [18, 65]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["toggleRetinaReady"], [], ["loc", [null, [18, 67], [18, 97]]], 0, 0], ["inline", "fa-icon", ["eye"], [], ["loc", [null, [18, 98], [18, 115]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 13,
                    "column": 8
                  },
                  "end": {
                    "line": 28,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/controls/control-image/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("W");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createElement("span");
                var el3 = dom.createTextNode("H");
                dom.appendChild(el2, el3);
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n            ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(3);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 3, 3);
                morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 3, 3);
                dom.insertBoundary(fragment, 0);
                return morphs;
              },
              statements: [["block", "if", [["get", "showRetinaReady", ["loc", [null, [17, 16], [17, 31]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [17, 10], [19, 17]]]], ["inline", "input", [], ["disabled", true, "value", ["subexpr", "@mut", [["get", "widthPreview", ["loc", [null, [22, 40], [22, 52]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [22, 12], [22, 54]]], 0, 0], ["inline", "input", [], ["disabled", true, "value", ["subexpr", "@mut", [["get", "heightPreview", ["loc", [null, [26, 40], [26, 53]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [26, 12], [26, 55]]], 0, 0]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 32,
                      "column": 8
                    },
                    "end": {
                      "line": 34,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-image/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "forms/image-upload", [], ["value", ["subexpr", "@mut", [["get", "control.keyImgSource", ["loc", [null, [33, 37], [33, 57]]], 0, 0, 0, 0]], [], [], 0, 0], "onDimensionChange", ["subexpr", "action", ["dimensionChange"], [], ["loc", [null, [33, 76], [33, 102]]], 0, 0]], ["loc", [null, [33, 10], [33, 105]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 34,
                      "column": 8
                    },
                    "end": {
                      "line": 36,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-image/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "forms/image-upload", [], ["value", ["subexpr", "@mut", [["get", "control.keyValue", ["loc", [null, [35, 37], [35, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "onDimensionChange", ["subexpr", "action", ["dimensionChange"], [], ["loc", [null, [35, 72], [35, 98]]], 0, 0]], ["loc", [null, [35, 10], [35, 101]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 6
                  },
                  "end": {
                    "line": 37,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-image/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "useImgSource", ["loc", [null, [32, 14], [32, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [32, 8], [36, 15]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 41,
                        "column": 10
                      },
                      "end": {
                        "line": 43,
                        "column": 10
                      }
                    },
                    "moduleName": "cornerstone/components/controls/control-image/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "control.keyHasLink", ["loc", [null, [42, 36], [42, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "label", "Link", "half", true], ["loc", [null, [42, 12], [42, 79]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              var child1 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 44,
                        "column": 10
                      },
                      "end": {
                        "line": 46,
                        "column": 10
                      }
                    },
                    "moduleName": "cornerstone/components/controls/control-image/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createTextNode("            ");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createComment("");
                    dom.appendChild(el0, el1);
                    var el1 = dom.createTextNode("\n");
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                    return morphs;
                  },
                  statements: [["inline", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "control.keyHasInfo", ["loc", [null, [45, 36], [45, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "label", "Info", "half", true], ["loc", [null, [45, 12], [45, 79]]], 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 40,
                      "column": 8
                    },
                    "end": {
                      "line": 50,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-image/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "showLink", ["loc", [null, [41, 16], [41, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [41, 10], [43, 17]]]], ["block", "if", [["get", "showInfo", ["loc", [null, [44, 16], [44, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [44, 10], [46, 17]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 39,
                    "column": 6
                  },
                  "end": {
                    "line": 51,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-image/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "controls/input-list-item", [], [], 0, null, ["loc", [null, [40, 8], [50, 37]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child3 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 54,
                      "column": 8
                    },
                    "end": {
                      "line": 56,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-image/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "input", [], ["type", "text", "placeholder", ["subexpr", "@mut", [["get", "altTextPlaceholder", ["loc", [null, [55, 42], [55, 60]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "control.keyAltText", ["loc", [null, [55, 67], [55, 85]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [55, 10], [55, 87]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 53,
                    "column": 6
                  },
                  "end": {
                    "line": 57,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-image/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "controls/input-list-item", [], ["label", "Alt Text"], 0, null, ["loc", [null, [54, 8], [56, 37]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 59,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-image/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
              return morphs;
            },
            statements: [["block", "controls/input-list-item", [], ["label", ["subexpr", "if", [["get", "showRetinaReady", ["loc", [null, [14, 20], [14, 35]]], 0, 0, 0, 0], "Retina & Dimensions", "Dimensions Preview"], [], ["loc", [null, [14, 16], [14, 80]]], 0, 0], "class", "cs-input-list-image-dimensions"], 0, null, ["loc", [null, [13, 8], [28, 37]]]], ["block", "controls/input-list-item", [], ["label", "Source", "defaultHeight", ["subexpr", "@mut", [["get", "detectedHeight", ["loc", [null, [31, 63], [31, 77]]], 0, 0, 0, 0]], [], [], 0, 0]], 1, null, ["loc", [null, [31, 6], [37, 35]]]], ["block", "if", [["get", "showDisplayFunction", ["loc", [null, [39, 12], [39, 31]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [39, 6], [51, 13]]]], ["block", "if", [["get", "showAltText", ["loc", [null, [53, 12], [53, 23]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [53, 6], [57, 13]]]]],
            locals: [],
            templates: [child0, child1, child2, child3]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 60,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-image/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [10, 4], [59, 28]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 62,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-image/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "unless", [["get", "firstLevel", ["loc", [null, [3, 12], [3, 22]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 2], [60, 13]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 64,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-image/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [62, 22]]]], ["content", "yield", ["loc", [null, [63, 0], [63, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-link/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    // Cache old URL, update preview immediately
    typeChoices: [{ value: 'url', icon: 'link', tooltip: 'URL' }, { value: 'email', icon: 'envelope', tooltip: 'Email' }, { value: 'tel', icon: 'phone', tooltip: 'Phone' }],

    showContent: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('content'),
    showNewTab: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('new_tab'),
    showNofollow: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('nofollow'),

    showURL: _ember['default'].computed.equal('linkType', 'url'),
    showEmail: _ember['default'].computed.equal('linkType', 'email'),
    showPhone: _ember['default'].computed.equal('linkType', 'tel'),

    linkPreview: _ember['default'].computed('control.keyUrl', 'linkType', function () {
      switch (this.get('linkType')) {
        case 'email':
          {
            var subject = this.get('emailSubject');
            subject = subject ? '?subject=' + encodeURI(subject) : '';
            return 'mailto:' + this.get('emailAddress') + subject;
          }
        case 'tel':
          {
            return 'tel:' + encodeURI(this.get('phoneNumber'));
          }
      }

      return this.get('control.keyUrl');
    }),

    linkType: _ember['default'].computed('control.keyUrl', {
      get: function get() {

        var current = this.get('control.keyUrl') || '';

        if (current.match(/mailto:/)) {
          return 'email';
        }

        if (current.match(/tel:/)) {
          return 'tel';
        }

        return 'url';
      },
      set: function set(key, value) {
        return value;
      }
    }),

    emailAddress: _ember['default'].computed('control.keyUrl', {
      get: function get() {

        var current = this.get('control.keyUrl') || '';

        if (!current.match(/mailto:/)) {
          return '';
        }

        return current.replace(/mailto:(?:\/\/)?/g, '').replace(/\?.*/g, '');
      },
      set: function set(key, value) {
        var subject = this.get('emailSubject');
        subject = subject ? '?subject=' + encodeURI(subject) : '';
        value = value.replace(/mailto:(?:\/\/)?/g, '').replace(/\?.*/g, '');
        this.set('control.keyUrl', 'mailto:' + value + subject);

        return value;
      }
    }),

    emailSubject: _ember['default'].computed('control.keyUrl', {
      get: function get() {
        var current = this.get('control.keyUrl') || '';

        if (!current.match(/mailto:/)) {
          return '';
        }

        var matches = current.match(/\?subject=(.*)/) || '';
        if (!matches && !matches[1]) {
          return '';
        }
        return decodeURI(matches[1]);
      },
      set: function set(key, value) {

        var mailto = (this.get('control.keyUrl') || '').replace(/\?.*/g, '');
        var subject = value.length > 0 ? '?subject=' + encodeURI(value) : '';

        this.set('control.keyUrl', '' + mailto + subject);

        return value;
      }
    }),

    phoneNumber: _ember['default'].computed('control.keyUrl', {
      get: function get() {
        var current = this.get('control.keyUrl') || '';
        if (!current.match(/tel:/)) {
          return '';
        }
        return decodeURI(current.replace(/tel:(?:\/\/)?/g, ''));
      },
      set: function set(key, value) {
        this.set('control.keyUrl', '' === value ? '' : 'tel:' + encodeURI(value));
        return value;
      }
    })

  });
});
define("cornerstone/components/controls/control-link/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-link/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "linkPreview", ["loc", [null, [6, 20], [6, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", "true"], ["loc", [null, [6, 6], [6, 49]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-link/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/choose-single", [], ["choices", ["subexpr", "@mut", [["get", "typeChoices", ["loc", [null, [10, 36], [10, 47]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "linkType", ["loc", [null, [10, 54], [10, 62]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 6], [10, 64]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-link/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "control.keyContent", ["loc", [null, [14, 20], [14, 38]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [14, 6], [14, 40]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 19,
                    "column": 6
                  },
                  "end": {
                    "line": 21,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-link/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "control.keyNewTab", ["loc", [null, [20, 32], [20, 49]]], 0, 0, 0, 0]], [], [], 0, 0], "label", "New Tab", "half", true], ["loc", [null, [20, 8], [20, 77]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 23,
                      "column": 8
                    },
                    "end": {
                      "line": 25,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-link/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("code");
                  var el2 = dom.createTextNode("nofollow");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 22,
                    "column": 6
                  },
                  "end": {
                    "line": 26,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-link/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "control.keyNofollow", ["loc", [null, [23, 33], [23, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "half", true], 0, null, ["loc", [null, [23, 8], [25, 28]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 27,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-link/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "control.keyUrl", ["loc", [null, [18, 20], [18, 34]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "e.g. http://theme.co/"], ["loc", [null, [18, 6], [18, 72]]], 0, 0], ["block", "if", [["get", "showNewTab", ["loc", [null, [19, 12], [19, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [19, 6], [21, 13]]]], ["block", "if", [["get", "showNofollow", ["loc", [null, [22, 12], [22, 24]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [22, 6], [26, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child4 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-link/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "emailAddress", ["loc", [null, [30, 20], [30, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "e.g. hello@example.com"], ["loc", [null, [30, 6], [30, 71]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child5 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-link/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "emailSubject", ["loc", [null, [34, 20], [34, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "e.g. Howdy!"], ["loc", [null, [34, 6], [34, 60]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child6 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 37,
                  "column": 4
                },
                "end": {
                  "line": 39,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-link/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "phoneNumber", ["loc", [null, [38, 20], [38, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "e.g. 18885551234"], ["loc", [null, [38, 6], [38, 64]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 41,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-link/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(7);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            morphs[4] = dom.createMorphAt(fragment, 9, 9, contextualElement);
            morphs[5] = dom.createMorphAt(fragment, 11, 11, contextualElement);
            morphs[6] = dom.createMorphAt(fragment, 13, 13, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "Preview"], 0, null, ["loc", [null, [5, 4], [7, 33]]]], ["block", "controls/input-list-item", [], ["label", "Type"], 1, null, ["loc", [null, [9, 4], [11, 33]]]], ["block", "controls/input-list-item", [], ["label", "Content", "isVisible", ["subexpr", "@mut", [["get", "showContent", ["loc", [null, [13, 58], [13, 69]]], 0, 0, 0, 0]], [], [], 0, 0]], 2, null, ["loc", [null, [13, 4], [15, 33]]]], ["block", "controls/input-list-item", [], ["label", "URL", "isVisible", ["subexpr", "@mut", [["get", "showURL", ["loc", [null, [17, 54], [17, 61]]], 0, 0, 0, 0]], [], [], 0, 0]], 3, null, ["loc", [null, [17, 4], [27, 33]]]], ["block", "controls/input-list-item", [], ["label", "Email", "isVisible", ["subexpr", "@mut", [["get", "showEmail", ["loc", [null, [29, 56], [29, 65]]], 0, 0, 0, 0]], [], [], 0, 0]], 4, null, ["loc", [null, [29, 4], [31, 33]]]], ["block", "controls/input-list-item", [], ["label", "Subject", "isVisible", ["subexpr", "@mut", [["get", "showEmail", ["loc", [null, [33, 58], [33, 67]]], 0, 0, 0, 0]], [], [], 0, 0]], 5, null, ["loc", [null, [33, 4], [35, 33]]]], ["block", "controls/input-list-item", [], ["label", "Phone", "isVisible", ["subexpr", "@mut", [["get", "showPhone", ["loc", [null, [37, 56], [37, 65]]], 0, 0, 0, 0]], [], [], 0, 0]], 6, null, ["loc", [null, [37, 4], [39, 33]]]]],
          locals: [],
          templates: [child0, child1, child2, child3, child4, child5, child6]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-link/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [41, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-link/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [43, 22]]]], ["content", "yield", ["loc", [null, [44, 0], [44, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-number/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-number/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-number/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 16], [3, 21]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 34], [3, 45]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 47]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-number/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-ratio/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {
    classNameBindings: ['monospace:cs-monospace-input']
  });
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-ratio/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-ratio/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/ratio-input", [], ["value", ["subexpr", "@mut", [["get", "control.keyValue", ["loc", [null, [3, 28], [3, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 57], [3, 68]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 70]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-ratio/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-select/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({

    service: _ember['default'].inject.service('controls'),
    store: _ember['default'].inject.service(),

    choices: _ember['default'].computed('control.choices.[]', 'control.options.choices.[]', function () {

      var choices = this.getWithDefault('control.choices', this.getWithDefault('control.options.choices', _ember['default'].A()));

      if ('list:fonts' === choices) {
        return this.get('service').getOptionList('fonts');
      }

      if ('list:font-weights' === choices) {
        return this.get('service').getOptionList('font-weights');
      }

      if ('string' === typeof choices && 0 === choices.indexOf('dynamic:')) {
        return choices.replace('dynamic:', '');
      }

      return _ember['default'].isArray(choices) ? choices : _ember['default'].A();
    })

  });
});
define("cornerstone/components/controls/control-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-select/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/styled-select", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 30], [3, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "choices", ["loc", [null, [3, 44], [3, 51]]], 0, 0, 0, 0]], [], [], 0, 0], "visibilityObservation", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [3, 74], [3, 82]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 85]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-select/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-text-editor/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-text-editor/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 8,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-text-editor/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/expandable-text-editor", [], ["placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [4, 16], [4, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [5, 10], [5, 15]]], 0, 0, 0, 0]], [], [], 0, 0], "mode", ["subexpr", "@mut", [["get", "control.options.mode", ["loc", [null, [6, 9], [6, 29]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [7, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-text-editor/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [8, 22]]]], ["content", "yield", ["loc", [null, [9, 0], [9, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-text-shadow/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder', 'cornerstone/util/split-on-whitespace'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder, _cornerstoneUtilSplitOnWhitespace) {

  function composedValue(name) {
    return _ember['default'].computed('value', {
      get: function get() {
        return this.destruct()[name];
      },
      set: function set(key, value) {
        var update = {};
        update[name] = value;
        this.set('value', this.reconstitute(update));
        return value;
      }
    });
  }

  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {

    reconstitute: function reconstitute(updates) {

      var data = this.destruct();

      for (var key in updates) {
        data[key] = updates[key];
      }

      return data.xOffset + ' ' + data.yOffset + ' ' + data.blur;
    },

    destruct: function destruct() {

      var parts = (0, _cornerstoneUtilSplitOnWhitespace['default'])(this.getWithDefault('value', ''));

      var data = {
        xOffset: _ember['default'].isPresent(parts[0]) ? parts[0] : '0px',
        yOffset: _ember['default'].isPresent(parts[1]) ? parts[1] : '0px',
        blur: _ember['default'].isPresent(parts[2]) ? parts[2] : '0px'
      };

      return data;
    },

    xOffset: composedValue('xOffset'),
    yOffset: composedValue('yOffset'),
    blur: composedValue('blur'),
    showColor: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('color'),
    showAltColor: _cornerstoneComponentsControlsControlBaseComponent['default'].isKeyMapped('alt_color'),

    xOffsetOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('x_offset', {
      available_units: ['px', 'em', 'rem'],
      ranges: {
        px: { min: -50, max: 50, step: 1 },
        em: { min: -1, max: 1, step: 0.001 },
        rem: { min: -1, max: 1, step: 0.001 }
      }
    }),

    yOffsetOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('y_offset', {
      available_units: ['px', 'em', 'rem'],
      ranges: {
        px: { min: -50, max: 50, step: 1 },
        em: { min: -1, max: 1, step: 0.001 },
        rem: { min: -1, max: 1, step: 0.001 }
      }
    }),

    blurOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('blur', {
      available_units: ['px', 'em', 'rem'],
      ranges: {
        px: { min: 0, max: 50, step: 1 },
        em: { min: 0, max: 2.5, step: 0.001 },
        rem: { min: 0, max: 2.5, step: 0.001 }
      }
    }),

    colorOptions: _cornerstoneComponentsControlsControlBaseComponent['default'].subOptions('color'),
    altColorOptions: _ember['default'].computed('colorOptions', function () {
      var options = _ember['default'].copy(this.get('colorOptions'));
      if (options.alt_label) {
        options.label = options.alt_label;
      }
      return options;
    })
  });
});
define("cornerstone/components/controls/control-text-shadow/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "xOffset", ["loc", [null, [6, 32], [6, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "xOffsetOptions", ["loc", [null, [6, 48], [6, 62]]], 0, 0, 0, 0]], [], [], 0, 0], "debug", true], ["loc", [null, [6, 6], [6, 75]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "yOffset", ["loc", [null, [10, 32], [10, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "yOffsetOptions", ["loc", [null, [10, 48], [10, 62]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 6], [10, 65]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child2 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 13,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "blur", ["loc", [null, [14, 32], [14, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "blurOptions", ["loc", [null, [14, 45], [14, 56]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [14, 6], [14, 58]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child3 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 20,
                      "column": 8
                    },
                    "end": {
                      "line": 22,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "control.keyAltColor", ["loc", [null, [21, 37], [21, 56]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "altColorOptions", ["loc", [null, [21, 65], [21, 80]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [21, 10], [21, 82]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 6
                  },
                  "end": {
                    "line": 23,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["inline", "forms/color-picker", [], ["value", ["subexpr", "@mut", [["get", "control.keyColor", ["loc", [null, [19, 35], [19, 51]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "colorOptions", ["loc", [null, [19, 60], [19, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [19, 8], [19, 74]]], 0, 0], ["block", "if", [["get", "showAltColor", ["loc", [null, [20, 14], [20, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [20, 8], [22, 15]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "controls/input-list-item", [], ["label", "Color"], 0, null, ["loc", [null, [18, 6], [23, 35]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 26,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(4);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
            return morphs;
          },
          statements: [["block", "controls/input-list-item", [], ["label", "X-Offset"], 0, null, ["loc", [null, [5, 4], [7, 33]]]], ["block", "controls/input-list-item", [], ["label", "Y-Offset"], 1, null, ["loc", [null, [9, 4], [11, 33]]]], ["block", "controls/input-list-item", [], ["label", "Blur"], 2, null, ["loc", [null, [13, 4], [15, 33]]]], ["block", "if", [["get", "showColor", ["loc", [null, [17, 10], [17, 19]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [17, 4], [24, 11]]]]],
          locals: [],
          templates: [child0, child1, child2, child3]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [26, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 29,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-text-shadow/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [27, 22]]]], ["content", "yield", ["loc", [null, [28, 0], [28, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-text/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {
    classNameBindings: ['monospace:cs-monospace-input']
  });
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-text/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-text/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "control.keyValue", ["loc", [null, [3, 16], [3, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 45], [3, 56]]], 0, 0, 0, 0]], [], [], 0, 0], "class", ["subexpr", "if", [["get", "control.options.monospace", ["loc", [null, [3, 67], [3, 92]]], 0, 0, 0, 0], "cs-input-code"], [], ["loc", [null, [3, 63], [3, 109]]], 0, 0]], ["loc", [null, [3, 2], [3, 111]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/control-text/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-textarea/component', ['exports', 'cornerstone/components/controls/control-base/component', 'cornerstone/mixins/controls/placeholder'], function (exports, _cornerstoneComponentsControlsControlBaseComponent, _cornerstoneMixinsControlsPlaceholder) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend(_cornerstoneMixinsControlsPlaceholder['default'], {
    classNameBindings: ['monospace:cs-monospace-input'],
    defaultHeight: 5
  });
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-textarea/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-textarea/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 19], [3, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [3, 37], [3, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "class", ["subexpr", "if", [["get", "control.options.monospace", ["loc", [null, [3, 59], [3, 84]]], 0, 0, 0, 0], "cs-input-code"], [], ["loc", [null, [3, 55], [3, 101]]], 0, 0]], ["loc", [null, [3, 2], [3, 103]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/controls/control-textarea/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-toggle/component', ['exports', 'ember', 'cornerstone/components/controls/control-base/component'], function (exports, _ember, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({

    state: _ember['default'].computed('value', function () {
      return this.normalize(this.get('value'));
    }),

    toggleStateClass: _ember['default'].computed('state', function () {
      return this.get('state') ? 'on' : 'off';
    }),

    // Detect various forms of boolean storage and play along

    normalize: function normalize(value) {

      if ('1' === value || 'true' === value) {
        return true;
      }

      if ('' === value || 'false' === value) {
        return false;
      }

      return !!value;
    },

    invert: function invert(value) {

      if ('true' === value) {
        return 'false';
      }

      if ('false' === value) {
        return 'true';
      }

      if ('1' === value) {
        return '';
      }

      if ('' === value) {
        return '1';
      }

      return !value;
    },

    actions: {
      toggle: function toggle() {
        this.set('value', this.invert(this.get('value')));
      }
    }
  });
});
define("cornerstone/components/controls/control-toggle/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-toggle/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/cs-toggle", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 26], [3, 31]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 33]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/controls/control-toggle/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-unit-slider/component', ['exports', 'cornerstone/components/controls/control-base/component'], function (exports, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-unit-slider/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-unit-slider/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/unit-slider", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [3, 28], [3, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "control.options", ["loc", [null, [3, 42], [3, 57]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 59]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/controls/control-unit-slider/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [4, 22]]]], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/control-unit/component', ['exports', 'cornerstone/components/controls/control-base/component'], function (exports, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({});
});
// import Ember from 'ember';
define("cornerstone/components/controls/control-unit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/control-unit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/unit-input", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 10], [4, 15]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "control.options", ["loc", [null, [5, 12], [5, 27]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [6, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/controls/control-unit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["block", "common/defer-view", [], ["class", ["subexpr", "@mut", [["get", "containerClass", ["loc", [null, [2, 27], [2, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "defer", ["subexpr", "@mut", [["get", "firstLevel", ["loc", [null, [2, 48], [2, 58]]], 0, 0, 0, 0]], [], [], 0, 0], "hide", ["subexpr", "@mut", [["get", "isHidden", ["loc", [null, [2, 64], [2, 72]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [2, 0], [7, 22]]]], ["content", "yield", ["loc", [null, [8, 0], [8, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/controls/input-list-item/component', ['exports', 'cornerstone/components/controls/control-base/component'], function (exports, _cornerstoneComponentsControlsControlBaseComponent) {
  exports['default'] = _cornerstoneComponentsControlsControlBaseComponent['default'].extend({
    level: 2,
    tagName: 'li',
    control: {
      type: 'aggregate'
    }
  });
});
// import Ember from 'ember';
define("cornerstone/components/controls/input-list-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/input-list-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'class');
        morphs[2] = dom.createMorphAt(element0, 0, 0);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", [["get", "headerTemplate", ["loc", [null, [1, 10], [1, 24]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 0], [1, 26]]], 0, 0], ["attribute", "class", ["concat", [["get", "containerClass", ["loc", [null, [2, 14], [2, 28]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "yield", ["loc", [null, [2, 32], [2, 41]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/controls/input-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',
    classNames: ['cs-control-input-list'],

    level: _ember['default'].computed('parentLevel', function () {
      return this.getWithDefault('parentLevel', 1) + 1;
    })
  });
});
define("cornerstone/components/controls/input-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/input-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/controls/input-list/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["subexpr", "locate-component", [["subexpr", "concat", ["controls/control-", ["get", "control.type", ["loc", [null, [5, 62], [5, 74]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 34], [5, 76]]], 0, 0], "controls/input-list-item"], [], ["loc", [null, [5, 16], [5, 104]]], 0, 0]], ["control", ["subexpr", "@mut", [["get", "control", ["loc", [null, [5, 113], [5, 120]]], 0, 0, 0, 0]], [], [], 0, 0], "level", ["subexpr", "@mut", [["get", "level", ["loc", [null, [5, 127], [5, 132]]], 0, 0, 0, 0]], [], [], 0, 0], "tagName", "li"], ["loc", [null, [5, 4], [5, 147]]], 0, 0]],
          locals: ["control"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/controls/input-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "controls", ["loc", [null, [4, 10], [4, 18]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 2], [6, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 7
          }
        },
        "moduleName": "cornerstone/components/controls/input-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/controls/manage-presets/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-control cs-control-manage-presets'],
    showHeader: true,
    label: 'Element Presets',
    actions: {
      apply: function apply() {
        var _this = this;

        var selected = this.get('selected');
        if (!selected) {
          return;
        }

        this.get('ui').confirm({
          message: this.get('i18n').t('app.inspector.apply-preset-warning'),
          accept: function accept() {
            _this.sendAction('onApply', selected);
          },
          acceptClass: 'sad'
        });
      },
      save: function save() {
        this.sendAction('onSave', this.get('name'));
        this.set('name', '');
      }
    }
  });
});
define("cornerstone/components/controls/manage-presets/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 12,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/controls/manage-presets/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("button");
            var el2 = dom.createTextNode("Apply");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createAttrMorph(element0, 'class');
            morphs[2] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["inline", "forms/styled-select", [], ["placeholder", "No presets", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [7, 14], [7, 19]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "presets", ["loc", [null, [8, 16], [8, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [9, 14], [9, 22]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [5, 6], [10, 8]]], 0, 0], ["attribute", "class", ["concat", ["cs-control-manage-presets-apply ", ["subexpr", "if", [["get", "ui.deleteConfirm", ["loc", [null, [11, 58], [11, 74]]], 0, 0, 0, 0], "cs-danger"], [], ["loc", [null, [11, 53], [11, 88]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["apply"], ["allowedKeys", "shift"], ["loc", [null, [11, 90], [11, 128]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 17,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/controls/manage-presets/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "controls/input-list-item", [], ["label", "Apply<br>Preset"], 0, null, ["loc", [null, [4, 4], [12, 33]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/controls/manage-presets/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-control-input");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["partials/controls/control-header"], [], ["loc", [null, [1, 0], [1, 46]]], 0, 0], ["block", "controls/input-list", [], [], 0, null, ["loc", [null, [3, 2], [17, 26]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/cs-islands/component', ['exports', 'ember'], function (exports, _ember) {
  var $ = _ember['default'].$;
  var assert = _ember['default'].assert;
  var Component = _ember['default'].Component;
  var getOwner = _ember['default'].getOwner;
  exports['default'] = _ember['default'].Component.extend({
    tagName: '',

    init: function init() {
      this._super.apply(this, arguments);
      this.renderComponent = getRenderComponentFor(this);
      this.componentsToRender = queryIslandComponents();
      this.renderedComponents = [];
    },

    didInsertElement: function didInsertElement() {
      this.renderedComponents = this.componentsToRender.map(this.renderComponent);
    },

    didDestroyElement: function didDestroyElement() {
      this.renderedComponents.forEach(function (renderedComponent) {
        renderedComponent.destroy();
      });
    }
  });

  function componentAttributes(element) {
    var attrs = undefined;
    var attrsJSON = element.getAttribute('data-attrs');

    if (attrsJSON) {
      attrs = JSON.parse(attrsJSON);
    } else {
      attrs = {};
    }

    attrs.innerContent = element.innerHTML;
    return attrs;
  }

  function getRenderComponentFor(emberObject) {
    var owner = getOwner(emberObject);

    return function renderComponent(_ref) {
      var name = _ref.name;
      var attrs = _ref.attrs;
      var element = _ref.element;

      var component = lookupComponent(owner, name);
      assert('ember-islands could not find a component named "' + name + '" in your Ember appliction.', component);

      // Work around for #replaceIn bug
      $(element).empty();
      var componentInstance = component.create(attrs);
      componentInstance.appendTo(element);
      _ember['default'].run.scheduleOnce('afterRender', function () {
        $(element).contents().unwrap();
      });

      return componentInstance;
    };
  }

  function queryIslandComponents() {
    var components = [];

    $('[data-cs-component]').each(function () {
      var name = this.getAttribute('data-cs-component');
      var attrs = componentAttributes(this);
      components.push({ attrs: attrs, name: name, element: this });
    });

    return components;
  }

  function lookupComponent(owner, name) {
    var componentLookupKey = 'component:' + name;
    var layoutLookupKey = 'template:components/' + name;
    var layout = owner.lookup(layoutLookupKey);

    if (layout) {
      owner.inject(componentLookupKey, 'layout', layoutLookupKey);
    }

    var component = owner._lookupFactory(componentLookupKey);

    if (layout && !component) {
      owner.register(componentLookupKey, Component);
      component = owner._lookupFactory(componentLookupKey);
    }

    return component;
  }
});
// Ember Islands, modified per https://github.com/mitchlloyd/ember-islands/issues/7#issuecomment-241179736
define("cornerstone/components/cs-islands/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/cs-islands/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/debug/module-data/component', ['exports', 'ember', 'cornerstone/mixins/debug/component'], function (exports, _ember, _cornerstoneMixinsDebugComponent) {
  exports['default'] = _ember['default'].Component.extend(_cornerstoneMixinsDebugComponent['default'], {
    tagName: 'pre',
    classNames: ['cs-debug-module-data'],
    storeAttsFind: '',
    storeAttsReplace: '',

    attsObserver: _ember['default'].observer('module.attsUpdated', function () {
      this.rerender();
    }),

    actions: {
      storeAtts: function storeAtts() {
        var atts = this.get('module').getCleanAtts();
        this.set('ui.debugStoredType', atts._type);
        delete atts._type;
        delete atts._region;
        this.set('ui.debugStoredAtts', atts);
      },
      restoreAtts: function restoreAtts() {
        var atts = this.get('ui.debugStoredAtts');

        var find = this.getWithDefault('storeAttsFind', '');
        var replace = this.getWithDefault('storeAttsReplace', '');

        var defaults = Object.keys(this.get('module.definition.defaults'));
        for (var key in atts) {
          if (atts.hasOwnProperty(key) && 0 === key.indexOf(find)) {
            var newKey = '' === replace ? key : key.replace(find, replace);
            if (defaults.includes(newKey)) {
              this.set('module.atts.' + newKey, atts[key]);
            }
          }
        }
      }
    }

  });
});
define("cornerstone/components/debug/module-data/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/debug/module-data/template.hbs"
        },
        isEmpty: false,
        arity: 2,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode(": ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["content", "key", ["loc", [null, [8, 0], [8, 7]]], 0, 0, 0, 0], ["content", "value", ["loc", [null, [8, 9], [8, 18]]], 0, 0, 0, 0]],
        locals: ["key", "value"],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/debug/module-data/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "module.atts.content", ["loc", [null, [11, 16], [11, 35]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [11, 2], [11, 37]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/debug/module-data/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("button");
        var el2 = dom.createTextNode("Store");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        var el2 = dom.createTextNode("Storing: ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("button");
        var el2 = dom.createTextNode("Restore");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [8]);
        var morphs = new Array(9);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        morphs[4] = dom.createElementMorph(element1);
        morphs[5] = dom.createMorphAt(fragment, 10, 10, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 12, 12, contextualElement);
        morphs[7] = dom.createMorphAt(fragment, 13, 13, contextualElement);
        morphs[8] = dom.createMorphAt(fragment, 14, 14, contextualElement);
        return morphs;
      },
      statements: [["element", "action", ["storeAtts"], [], ["loc", [null, [1, 8], [1, 30]]], 0, 0], ["content", "ui.debugStoredType", ["loc", [null, [2, 15], [2, 37]]], 0, 0, 0, 0], ["inline", "input", [], ["placeholder", "Find: toggle_", "value", ["subexpr", "@mut", [["get", "storeAttsFind", ["loc", [null, [3, 42], [3, 55]]], 0, 0, 0, 0]], [], [], 0, 0], "enter", ["subexpr", "action", ["storeAtts"], [], ["loc", [null, [3, 62], [3, 82]]], 0, 0]], ["loc", [null, [3, 0], [3, 85]]], 0, 0], ["inline", "input", [], ["placeholder", "Replace: toggle_", "value", ["subexpr", "@mut", [["get", "storeAttsReplace", ["loc", [null, [4, 45], [4, 61]]], 0, 0, 0, 0]], [], [], 0, 0], "enter", ["subexpr", "action", ["storeAtts"], [], ["loc", [null, [4, 68], [4, 88]]], 0, 0]], ["loc", [null, [4, 0], [4, 91]]], 0, 0], ["element", "action", ["restoreAtts"], [], ["loc", [null, [5, 8], [5, 32]]], 0, 0], ["content", "module.id", ["loc", [null, [6, 0], [6, 13]]], 0, 0, 0, 0], ["block", "each-in", [["get", "module.atts", ["loc", [null, [7, 11], [7, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 0], [9, 12]]]], ["block", "if", [["subexpr", "eq", [["get", "module.atts._type", ["loc", [null, [10, 10], [10, 27]]], 0, 0, 0, 0], "text"], [], ["loc", [null, [10, 6], [10, 35]]], 0, 0]], [], 1, null, ["loc", [null, [10, 0], [12, 7]]]], ["content", "yield", ["loc", [null, [13, 0], [13, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/debug/module-preview/component', ['exports', 'ember', 'npm:Faker'], function (exports, _ember, _npmFaker) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: ['li'],
    classNames: ['cs-module-preview'],
    xfr: _ember['default'].inject.service(),
    store: _ember['default'].inject.service(),

    childrenSorting: ['order'],
    sortedChildren: _ember['default'].computed.sort('entity.children', 'childrenSorting'),
    init: function init() {
      this._super.apply(this, arguments);
      // this.set('entity', this.get('store').peekRecord('element', this.get('entityId') ) );
      //this.updateObservers();
    },

    actions: {
      test: function test() {
        this.rerender();
      },
      addChild: function addChild() {
        this.get('entity').addChild({
          first_name: _npmFaker['default'].Name.firstName(),
          last_name: _npmFaker['default'].Name.lastName() // this.get('xfr.agent.xfrOrigin'),
        });
      },
      deleteItem: function deleteItem() {
        this.get('entity').selfDestruct();
      },
      dupe: function dupe() {
        this.get('entity').duplicate();
      },
      moveUp: function moveUp() {
        this.get('entity.updatePosition')(this.get('entity.order') - 1);
      },
      moveDown: function moveDown() {
        this.get('entity.updatePosition')(this.get('entity.order') + 1);
      }
    }
  });
});
define("cornerstone/components/debug/module-preview/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/debug/module-preview/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "debug/module-preview", [], ["entity", ["subexpr", "@mut", [["get", "child", ["loc", [null, [11, 32], [11, 37]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [11, 2], [11, 39]]], 0, 0]],
        locals: ["child"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/debug/module-preview/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "children");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "debug/module-data", [], ["module", ["subexpr", "@mut", [["get", "entity", ["loc", [null, [8, 32], [8, 38]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [8, 5], [8, 40]]], 0, 0], ["block", "each", [["get", "sortedChildren", ["loc", [null, [10, 8], [10, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [10, 0], [12, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/ember-selectize', ['exports', 'ember-cli-selectize/components/ember-selectize'], function (exports, _emberCliSelectizeComponentsEmberSelectize) {
  exports['default'] = _emberCliSelectizeComponentsEmberSelectize['default'];
});
define('cornerstone/components/flash-message', ['exports', 'ember-cli-flash/components/flash-message'], function (exports, _emberCliFlashComponentsFlashMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliFlashComponentsFlashMessage['default'];
    }
  });
});
define('cornerstone/components/forms/checkbox-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("cornerstone/components/forms/checkbox-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/checkbox-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/forms/checkbox-list/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/rc-checkbox", [], ["value", ["subexpr", "mut", [["subexpr", "get", [["get", "proxy", ["loc", [null, [6, 42], [6, 47]]], 0, 0, 0, 0], ["get", "checkbox.keyPath", ["loc", [null, [6, 48], [6, 64]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 37], [6, 65]]], 0, 0]], [], ["loc", [null, [6, 32], [6, 66]]], 0, 0], "label", ["subexpr", "@mut", [["get", "checkbox.label", ["loc", [null, [6, 73], [6, 87]]], 0, 0, 0, 0]], [], [], 0, 0], "half", ["subexpr", "@mut", [["get", "checkbox.half", ["loc", [null, [6, 93], [6, 106]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 6], [6, 108]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/forms/checkbox-list/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "checkbox.keyPath", ["loc", [null, [5, 10], [5, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 4], [7, 11]]]]],
          locals: ["checkbox"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/checkbox-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "checkboxes", ["loc", [null, [4, 10], [4, 20]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 2], [8, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/checkbox-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/choose-choice/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'li',
    classNameBindings: ['class', 'selected:cs-active'],

    selected: _ember['default'].computed('choose.value', 'value', function () {

      if (this.get('choose.multi')) {
        return this.getWithDefault('choose.value', '').split(this.getWithDefault('choose.delimiter', ' ')).includes(this.get('value'));
      } else {
        return this.get('choose.value') === this.get('value');
      }
    }),

    click: function click() {
      this.get('choose').send('select', this.get('value'));
    }

  });
});
define("cornerstone/components/forms/choose-choice/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/choose-choice/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [3, 4], [3, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 4
              },
              "end": {
                "line": 7,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/forms/choose-choice/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "icon", [["get", "icon", ["loc", [null, [6, 13], [6, 17]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 6], [6, 19]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 9,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/forms/choose-choice/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "label", ["loc", [null, [8, 6], [8, 17]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/choose-choice/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "icon", ["loc", [null, [5, 10], [5, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [5, 4], [9, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 11,
            "column": 7
          }
        },
        "moduleName": "cornerstone/components/forms/choose-choice/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("abbr");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'title');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "title", ["concat", [["get", "tooltip", ["loc", [null, [1, 15], [1, 22]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "if", [["get", "hasBlock", ["loc", [null, [2, 8], [2, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 2], [10, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/choose-icon/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-icons-outer'],
    rendered: false,
    ready: false,
    searchQuery: '',
    scrollReset: 0,

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);
      this.get('ui').getFaIcons().then(function (icons) {
        if (_this.isDestroyed) {
          return;
        }
        var reduced = [];
        for (var key in icons) {
          reduced.push({
            id: icons[key][0],
            title: icons[key].length > 1 ? icons[key].join(', ') : icons[key][0]
          });
        }

        _this.set('icons', reduced);
        _this.set('ready', true);
      });
    },

    observeScrollToSelectedOn: _ember['default'].observer('scrollToSelectedOn', function () {
      this.get('scrollToSelectedOn');
      this.scrollToSelected();
    }),

    loaded: _ember['default'].computed('ready', 'rendered', function () {
      return this.get('ready') && this.get('rendered');
    }),

    afterLoad: _ember['default'].observer('loaded', function () {
      this.scrollToSelected();
    }),

    scrollToSelected: function scrollToSelected() {
      var _this2 = this;

      if (!this.get('loaded')) {
        return;
      }

      _ember['default'].run.scheduleOnce('afterRender', function () {
        var value = _this2.get('value');
        if (_ember['default'].isPresent(value)) {
          _this2.set('scrollTo', {
            selector: 'li[data-choice=' + value + ']',
            offset: 1
          });
        } else {
          _this2.incrementProperty('scrollReset');
        }
      });
    },

    didInsertElement: function didInsertElement() {
      var _this3 = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this3.set('rendered', true);
      });
    },

    actions: {
      select: function select(icon) {
        this.set('value', icon);
      }
    },

    onSearchQuery: _ember['default'].observer('searchQuery', function () {
      _ember['default'].run.debounce(this, this.searchUpdate, 25);
    }),

    searchUpdate: function searchUpdate() {
      var _this4 = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {

        var $ul = _this4.$('ul.cs-choose');
        var query = _this4.get('searchQuery');

        $ul.find('li').show();
        if ('' !== query) {
          $ul.find('li:not([title*="' + query + '"])').hide();
          _this4.incrementProperty('scrollReset');
        } else {
          _this4.scrollToSelected();
        }
      });
    }

  });
});
define("cornerstone/components/forms/choose-icon/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 8
                },
                "end": {
                  "line": 12,
                  "column": 8
                }
              },
              "moduleName": "cornerstone/components/forms/choose-icon/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(5);
              morphs[0] = dom.createAttrMorph(element0, 'data-choice');
              morphs[1] = dom.createAttrMorph(element0, 'title');
              morphs[2] = dom.createAttrMorph(element0, 'class');
              morphs[3] = dom.createElementMorph(element0);
              morphs[4] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "data-choice", ["concat", [["get", "icon.id", ["loc", [null, [8, 27], [8, 34]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "title", ["concat", [["get", "icon.title", ["loc", [null, [9, 21], [9, 31]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "icon.id", ["loc", [null, [10, 28], [10, 35]]], 0, 0, 0, 0], ["get", "value", ["loc", [null, [10, 36], [10, 41]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 24], [10, 42]]], 0, 0], "cs-active"], [], ["loc", [null, [10, 19], [10, 57]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["select", ["get", "icon.id", ["loc", [null, [7, 32], [7, 39]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 14], [7, 41]]], 0, 0], ["inline", "fa-icon", [["get", "icon.id", ["loc", [null, [11, 21], [11, 28]]], 0, 0, 0, 0]], [], ["loc", [null, [11, 11], [11, 30]]], 0, 0]],
            locals: ["icon"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 4
              },
              "end": {
                "line": 14,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/forms/choose-icon/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "cs-choose cols-6 single");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "icons", ["loc", [null, [6, 16], [6, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [6, 8], [12, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 4
              },
              "end": {
                "line": 16,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/forms/choose-icon/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cs-icons-loading");
            var el2 = dom.createTextNode("…");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 17,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/choose-icon/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "loaded", ["loc", [null, [4, 10], [4, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 4], [16, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 19,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/choose-icon/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-icons-inner");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "common/search-bar", [], ["query", ["subexpr", "@mut", [["get", "searchQuery", ["loc", [null, [1, 26], [1, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "Search Icons", "focusOnShortcut", false], ["loc", [null, [1, 0], [1, 88]]], 0, 0], ["block", "common/scroll-box", [], ["scrollTo", ["subexpr", "@mut", [["get", "scrollTo", ["loc", [null, [3, 32], [3, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "resetScrollOn", ["subexpr", "@mut", [["get", "scrollReset", ["loc", [null, [3, 55], [3, 66]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [3, 2], [17, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/forms/choose-multi/component', ['exports', 'ember', 'cornerstone/components/forms/choose-single/component'], function (exports, _ember, _cornerstoneComponentsFormsChooseSingleComponent) {
  exports['default'] = _cornerstoneComponentsFormsChooseSingleComponent['default'].extend({

    multi: true,
    assignDefaultMulti: true,

    actions: {
      select: function select(choice) {
        var delimiter = this.getWithDefault('delimiter', ' ');

        var selected = this.getWithDefault('value', '').split(delimiter);
        var offValue = this.get('offValue');

        // Remove offValue

        if (!_ember['default'].isNone(offValue)) {
          var offValueIndex = selected.indexOf(offValue);
          if (-1 !== offValueIndex) {
            selected.splice(offValueIndex, 1);
          }
        }

        // Add/Remove choice
        var choiceIndex = selected.indexOf(choice);
        if (-1 === choiceIndex) {
          selected.push(choice);
        } else {
          selected.splice(choiceIndex, 1);
        }

        if (!_ember['default'].isNone(offValue) && selected.length < 1) {
          selected.push(offValue);
        }

        selected.sort();
        this.set('value', selected.join(delimiter));
      }
    }

  });
});
define("cornerstone/components/forms/choose-multi/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/choose-multi/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [2, 10], [2, 14]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 2], [2, 17]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/forms/choose-multi/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "this", ["loc", [null, [6, 13], [6, 17]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "choice.value", ["loc", [null, [7, 12], [7, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "icon", ["subexpr", "@mut", [["get", "choice.icon", ["loc", [null, [8, 11], [8, 22]]], 0, 0, 0, 0]], [], [], 0, 0], "label", ["subexpr", "@mut", [["get", "choice.label", ["loc", [null, [9, 12], [9, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "tooltip", ["subexpr", "@mut", [["get", "choice.tooltip", ["loc", [null, [10, 14], [10, 28]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [5, 4], [10, 30]]], 0, 0]],
          locals: ["choice"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/choose-multi/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "choices", ["loc", [null, [4, 10], [4, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 2], [11, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 7
          }
        },
        "moduleName": "cornerstone/components/forms/choose-multi/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [12, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/choose-single/component', ['exports', 'ember', 'cornerstone/mixins/forms/visibility-observation', 'cornerstone/mixins/forms/assign-default'], function (exports, _ember, _cornerstoneMixinsFormsVisibilityObservation, _cornerstoneMixinsFormsAssignDefault) {
  exports['default'] = _ember['default'].Component.extend(_cornerstoneMixinsFormsVisibilityObservation['default'], _cornerstoneMixinsFormsAssignDefault['default'], {

    tagName: 'ul',
    classNames: ['cs-choose'],
    classNameBindings: ['condensed:cs-choose-condensed', 'cols'],
    assignDefaultOptionsPath: 'choices',

    init: function init() {
      this._super.apply(this, arguments);
      if (_ember['default'].isPresent(this.get('offValue'))) {
        this.set('assignDefaultSourcePath', 'offValue');
      }
    },

    // delimiter: null, // If delimiter is null, treat as an array - otherwise make a string

    condensed: true,
    cols: _ember['default'].computed('choices', 'foundCols', function () {
      var number = !this.get('choices') ? this.get('foundCols') : this.get('choices.length');
      return 'cols-' + number;
    }),

    didRender: function didRender() {

      if (!this.get('choices')) {
        _ember['default'].run.scheduleOnce('afterRender', (function () {
          this.set('foundCols', this.$('li').length);
        }).bind(this));
      }
    },

    actions: {
      isVisible: function isVisible() {
        this.send('assignDefaultOption');
      },
      select: function select(choice) {

        var offValue = this.get('offValue');

        if (_ember['default'].isPresent(offValue) && choice === this.get('value')) {
          choice = offValue;
        }

        this.set('value', choice);
      }
    }

  });
});
define("cornerstone/components/forms/choose-single/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/choose-single/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [2, 10], [2, 14]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 2], [2, 17]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/forms/choose-single/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "forms/choose-choice", [], ["choose", ["subexpr", "@mut", [["get", "this", ["loc", [null, [5, 33], [5, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "choice.value", ["loc", [null, [5, 44], [5, 56]]], 0, 0, 0, 0]], [], [], 0, 0], "icon", ["subexpr", "@mut", [["get", "choice.icon", ["loc", [null, [5, 62], [5, 73]]], 0, 0, 0, 0]], [], [], 0, 0], "label", ["subexpr", "@mut", [["get", "choice.label", ["loc", [null, [5, 80], [5, 92]]], 0, 0, 0, 0]], [], [], 0, 0], "tooltip", ["subexpr", "@mut", [["get", "choice.tooltip", ["loc", [null, [5, 101], [5, 115]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [5, 4], [5, 117]]], 0, 0]],
          locals: ["choice"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/choose-single/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "choices", ["loc", [null, [4, 10], [4, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 2], [6, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/choose-single/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/color-input/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    colorService: _ember['default'].inject.service('templates/colors'),

    onInit: _ember['default'].on('init', function () {
      var _this = this;

      if (!this.get('usePalette')) {
        this.set('ready', true);
        return;
      }
      this.get('colorService.paletteItemsPromise').then(function (items) {
        _this.set('paletteItems', items);
        _this.set('ready', true);

        if (_this.get('selected')) {
          _this.get('updating', false);
          _this.set('value', _this.get('colorService').lookupColor(_this.get('selected')));
          if (_this.get('picker')) {
            _this.get('picker').send('stateChange');
          }
        }
      });
    }),

    classNames: ['cs-form-color-input'],

    valueObserver: _ember['default'].observer('value', function () {
      if (!this.get('updating')) {
        var value = this.get('value');
        this.$input.val(value);

        this.$('.huebert-picker-control-output-value').val(value);
        this.$input.trigger('change', { ember: true });
      }
      this.set('updating', false);
    }),

    selectedObserver: _ember['default'].observer('selected', function () {
      if (!this.get('updating')) {
        this.set('value', this.get('colorService').lookupColor(this.get('selected')));
      }
    }),

    colorValue: _ember['default'].computed('value', 'colorService.paletteItems.[]', function () {
      if (!this.get('usePalette')) {
        return this.get('value');
      }
      return this.get('colorService').lookupColor(this.get('value'));
    }),

    huebertValueObserver: _ember['default'].observer('huebertValue', function () {
      this.set('updating', true);
      this.set('selected', this.get('huebertValue'));
      this.set('value', this.get('huebertValue'));
    }),

    didInsertElement: function didInsertElement() {
      this.set('canRender', true);
      this.renderWhenReady();
    },

    observeReady: _ember['default'].observer('ready', function () {
      this.renderWhenReady();
    }),

    renderWhenReady: function renderWhenReady() {
      var _this2 = this;

      if (!this.get('canRender') || this.get('isRendered')) {
        return;
      }

      this.set('isRendered', true);

      this.$input = this.$('input[type=text]');
      this.$input.val(this.get('value'));

      this.$input.on('change', function (e, params) {
        if (params && params.ember) {
          return;
        }
        _this2.set('huebertValue', _this2.$input.val());
      });

      _ember['default'].run.scheduleOnce('afterRender', function () {
        var opts = {
          outputFormat: _this2.getWithDefault('options.output_format', null),
          label: _this2.getWithDefault('options.label', null),
          canToggle: !_this2.getWithDefault('inline', false),
          scrollEvent: 'ps-scroll-x ps-scroll-y'
        };
        _this2.$input.huebert(opts);

        _this2.$('.huebert-picker-control-slider-a').after(_this2.$('.cs-form-color-input-palette'));
      });
    },

    actions: {
      select: function select(item) {
        this.set('selected', 'global-color:' + _ember['default'].get(item, 'id'));
        this.set('value', _ember['default'].get(item, 'value'));
      }
    }
  });
});
define('cornerstone/components/forms/color-input/palette-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-form-color-input-palette-item'],
    classNameBindings: ['active:cs-active'],
    attributeBindings: ['style', 'title'],
    title: _ember['default'].computed.alias('item.label'),
    colorStyle: _ember['default'].computed('item.value', function () {
      return _ember['default'].String.htmlSafe('background-color: ' + this.getWithDefault('item.value', 'transparent') + ';');
    }),

    active: _ember['default'].computed('item.id', 'selected', function () {
      return 'global-color:' + this.get('item.id') === this.getWithDefault('selected', null);
    }),

    didInsertElement: function didInsertElement() {
      var _this = this;

      this.$().on('click', function () {
        return _this.sendAction('select');
      });
    }

  });
});
define("cornerstone/components/forms/color-input/palette-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/color-input/palette-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["attribute", "style", ["get", "colorStyle", ["loc", [null, [1, 13], [1, 23]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "yield", ["loc", [null, [2, 0], [2, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/components/forms/color-input/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 9,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/color-input/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/color-input/palette-item", [], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [5, 11], [5, 15]]], 0, 0, 0, 0]], [], [], 0, 0], "selected", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [6, 15], [6, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "select", ["subexpr", "action", ["select", ["get", "item", ["loc", [null, [7, 30], [7, 34]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 13], [7, 35]]], 0, 0]], ["loc", [null, [4, 4], [8, 6]]], 0, 0]],
        locals: ["item"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/forms/color-input/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("input");
        dom.setAttribute(el1, "type", "text");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(3);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["cs-form-color-input-palette ", ["subexpr", "unless", [["get", "paletteItems", ["loc", [null, [2, 49], [2, 61]]], 0, 0, 0, 0], "cs-hide"], [], ["loc", [null, [2, 40], [2, 73]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["block", "each", [["get", "paletteItems", ["loc", [null, [3, 10], [3, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 2], [9, 11]]]], ["content", "yield", ["loc", [null, [12, 0], [12, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/forms/color-picker/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    colorService: _ember['default'].inject.service('templates/colors'),

    classNames: ['cs-form-color-picker'],

    onInit: _ember['default'].on('init', function () {
      var _this = this;

      if (!this.get('usePalette')) {
        this.set('ready', true);
        return;
      }

      this.get('colorService.paletteItemsPromise').then(function (items) {
        _this.incrementProperty('swatchUpdate');
      });
    }),

    swatchColor: _ember['default'].computed('value', 'colorService.paletteItems.[]', function () {
      if (!this.get('usePalette')) {
        return this.get('value');
      }
      return this.get('colorService').lookupColor(this.get('value'));
    }),

    label: _ember['default'].computed('options.label', function () {
      return this.getWithDefault('options.label', 'Select Color');
    }),

    content: _ember['default'].computed('value', 'swatchUpdate', function () {
      return _ember['default'].String.htmlSafe('<div class="cs-picker-swatch-content" style="background-color: ' + this.get('swatchColor') + ';"></div>');
    }),

    swatchUpdate: 0,
    actions: {
      stateChange: function stateChange() {
        this.incrementProperty('swatchUpdate');
      }
    }

  });
});
define("cornerstone/components/forms/color-picker/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/color-picker/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/color-input", [], ["inline", true, "selected", ["subexpr", "@mut", [["get", "value", ["loc", [null, [6, 43], [6, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "usePalette", ["subexpr", "@mut", [["get", "usePalette", ["loc", [null, [6, 60], [6, 70]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 2], [6, 73]]], 0, 0]],
        locals: ["picker"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/color-picker/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "common/cs-picker", [], ["onStateChange", ["subexpr", "action", ["stateChange"], [], ["loc", [null, [2, 16], [2, 38]]], 0, 0], "label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [3, 8], [3, 13]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [4, 10], [4, 17]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [1, 0], [7, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/forms/cs-toggle/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'ul',
    classNames: ['cs-toggle'],
    classNameBindings: ['state:on:off'],

    state: _ember['default'].computed('value', function () {
      return this.normalize(this.get('value'));
    }),

    // Detect various forms of boolean storage and play along

    normalize: function normalize(value) {

      if ('1' === value || 'true' === value) {
        return true;
      }

      if ('' === value || 'false' === value) {
        return false;
      }

      return !!value;
    },

    invert: function invert(value) {

      if ('true' === value) {
        return 'false';
      }

      if ('false' === value) {
        return 'true';
      }

      if ('1' === value) {
        return '';
      }

      if ('' === value) {
        return '1';
      }

      return !value;
    },

    click: function click() {
      this.send('toggle');
    },

    actions: {
      toggle: function toggle() {
        var _this = this;

        var $el = this.$();
        var on = $el.hasClass('on');
        $el.toggleClass('on', !on).toggleClass('off', !!on);

        _ember['default'].run.next(function () {
          _this.set('value', _this.invert(_this.get('value')));
        });
      }
    }

  });
});
define("cornerstone/components/forms/cs-toggle/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 37
          }
        },
        "moduleName": "cornerstone/components/forms/cs-toggle/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "on");
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("On");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        dom.setAttribute(el1, "class", "off");
        var el2 = dom.createElement("span");
        var el3 = dom.createTextNode("Off");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/forms/expandable-text-editor/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-expandable-rich-text'],

    content: _ember['default'].computed('value', 'placeholder', function () {
      var content = this.getWithDefault('value', this.getWithDefault('placeholder', ''));
      return _ember['default'].String.htmlSafe('<input type="text" value="' + content + '" disabled>');
    })

  });
});
define("cornerstone/components/forms/expandable-text-editor/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/expandable-text-editor/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/text-editor", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [8, 10], [8, 15]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [9, 16], [9, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "picker", ["subexpr", "@mut", [["get", "picker", ["loc", [null, [10, 11], [10, 17]]], 0, 0, 0, 0]], [], [], 0, 0], "mode", ["subexpr", "@mut", [["get", "mode", ["loc", [null, [11, 9], [11, 13]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [7, 2], [12, 4]]], 0, 0]],
        locals: ["picker"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/expandable-text-editor/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "common/cs-picker", [], ["modalMode", "remove", "modalClass", "cs-picker-modal-expandable-text-editor", "label", ["subexpr", "fa-icon", ["pencil"], [], ["loc", [null, [4, 8], [4, 26]]], 0, 0], "content", ["subexpr", "@mut", [["get", "content", ["loc", [null, [5, 10], [5, 17]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [1, 0], [13, 21]]]], ["content", "yield", ["loc", [null, [14, 0], [14, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/forms/icon-picker/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-form-icon-picker'],

    label: _ember['default'].computed('options.label', function () {
      return this.getWithDefault('options.label', 'Select Icon');
    })

  });
});
define("cornerstone/components/forms/icon-picker/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/icon-picker/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/choose-icon", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [2, 28], [2, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollToSelectedOn", ["subexpr", "@mut", [["get", "picker.open", ["loc", [null, [2, 53], [2, 64]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 2], [2, 66]]], 0, 0]],
        locals: ["picker"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/icon-picker/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "common/cs-picker", [], ["label", ["subexpr", "@mut", [["get", "label", ["loc", [null, [1, 26], [1, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "fa-icon", [["get", "value", ["loc", [null, [1, 49], [1, 54]]], 0, 0, 0, 0]], [], ["loc", [null, [1, 40], [1, 55]]], 0, 0]], 0, null, ["loc", [null, [1, 0], [3, 21]]]], ["content", "yield", ["loc", [null, [4, 0], [4, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/forms/image-upload/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    wpMedia: _ember['default'].inject.service(),

    classNames: ['cs-image'],
    classNameBindings: ['pattern', 'empty', 'class'],
    attributeBindings: ['style'],

    pattern: _ember['default'].computed.alias('options.pattern'),

    empty: _ember['default'].computed('value', function () {
      return !this.get('value');
    }),

    style: _ember['default'].computed('value', function () {
      var value = this.get('value');
      return _ember['default'].String.htmlSafe(!value ? '' : 'background-image: url(' + value + ');');
    }),

    didInsertElement: function didInsertElement() {
      this.detectDimensions();
    },

    dimensionUpdate: _ember['default'].observer('value', function () {
      this.detectDimensions();
    }),

    detectDimensions: function detectDimensions() {
      var _this = this;

      var src = this.get('value');

      if (!src) {
        this.sendAction('onDimensionChange', { width: '', height: '' });
        return;
      }

      var $img = _ember['default'].$('<img src="' + this.get('value') + '" style="opacity:0;position:absolute;pointer-events:none;">');

      $img.on('load', function () {

        _this.sendAction('onDimensionChange', {
          width: $img[0].width,
          height: $img[0].height
        });

        _ember['default'].run.next(function () {
          $img.remove();
        });
      });

      this.$().append($img);
    },

    actions: {
      add: function add() {
        this.get('wpMedia').request(this, 'value');
      },
      remove: function remove() {
        this.set('value', '');
      }
    }

  });
});
define("cornerstone/components/forms/image-upload/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/image-upload/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "add");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "remove");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createElementMorph(element0);
        morphs[1] = dom.createMorphAt(element0, 0, 0);
        morphs[2] = dom.createElementMorph(element1);
        morphs[3] = dom.createMorphAt(element1, 0, 0);
        return morphs;
      },
      statements: [["element", "action", ["add"], [], ["loc", [null, [1, 6], [1, 22]]], 0, 0], ["inline", "fa-icon", ["plus-circle"], [], ["loc", [null, [1, 35], [1, 60]]], 0, 0], ["element", "action", ["remove"], [], ["loc", [null, [2, 6], [2, 25]]], 0, 0], ["inline", "fa-icon", ["times-circle"], [], ["loc", [null, [2, 41], [2, 67]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/forms/inline-edit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    tagName: 'span',

    classNames: ['cs-inline-edit'],
    classNameBindings: ['class', 'usingPlaceholder:cs-inline-edit-placeholder', 'invalid:cs-inline-edit-invalid', 'disabled:cs-inline-edit-disabled'],

    disabled: _ember['default'].computed.not('enabled'),
    enabled: true,

    label: _ember['default'].computed('value', function () {
      var label = this.get('value');
      if (!label) {
        label = this.getWithDefault('placeholder', 'Double click to edit.');
      }
      return label;
    }),

    usingPlaceholder: _ember['default'].computed('value', function () {
      return !this.get('value');
    }),

    inputClass: _ember['default'].computed('editing', function () {
      return this.get('editing') ? '' : 'cs-hide';
    }),

    click: function click() {
      if (this.get('blockClickThrough')) {
        return false;
      }
    },

    didRender: function didRender() {
      var _this = this;

      var aborted = false;

      var $input = this.$('input');
      $input.val(this.get('value'));

      $input.on('keydown', function (e) {

        if (13 === e.keyCode) {
          _this.send('doneEditing');
          e.preventDefault();
        }

        if (27 === e.keyCode) {
          aborted = true;
          _this.set('editing', false);
          e.preventDefault();
        }
      });

      $input.on('blur', function () {
        if (!aborted) {
          _this.send('doneEditing');
        }
      });
    },

    doubleClick: function doubleClick() {
      var _this2 = this;

      if (this.get('editing') || !this.get('enabled')) {
        return;
      }
      this.set('editing', true);
      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this2.$('input').focus();
      });
    },

    actions: {
      doneEditing: function doneEditing() {
        if (this.get('editing')) {
          this.set('value', this.$('input').val());
          this.sendAction();
        }
        this.set('editing', false);
      }
    }
  });
});
define("cornerstone/components/forms/inline-edit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/inline-edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("input");
          dom.setAttribute(el1, "type", "text");
          dom.setAttribute(el1, "name", "");
          dom.setAttribute(el1, "value", "");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/inline-edit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [4, 2], [4, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/inline-edit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "editing", ["loc", [null, [1, 6], [1, 13]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/radio-list/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("cornerstone/components/forms/radio-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/radio-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [2, 2], [2, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/forms/radio-list/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "forms/rc-choice", [], ["value", ["subexpr", "get", [["get", "proxy", ["loc", [null, [5, 33], [5, 38]]], 0, 0, 0, 0], ["get", "checkbox.key", ["loc", [null, [5, 39], [5, 51]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 28], [5, 52]]], 0, 0], "optVal", ["subexpr", "@mut", [["get", "checkbox.value", ["loc", [null, [5, 60], [5, 74]]], 0, 0, 0, 0]], [], [], 0, 0], "label", ["subexpr", "@mut", [["get", "checkbox.label", ["loc", [null, [5, 81], [5, 95]]], 0, 0, 0, 0]], [], [], 0, 0], "half", ["subexpr", "@mut", [["get", "checkbox.half", ["loc", [null, [5, 101], [5, 114]]], 0, 0, 0, 0]], [], [], 0, 0], "mode", "radio"], ["loc", [null, [5, 4], [5, 129]]], 0, 0]],
          locals: ["checkbox"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/forms/radio-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "checkboxes", ["loc", [null, [4, 10], [4, 20]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 2], [6, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/radio-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [7, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/ratio-input/component', ['exports', 'ember'], function (exports, _ember) {

  function normalizeRatioValue(value, index) {
    var parts = (value || '').split(':');
    return 'undefined' !== typeof index ? parts[index] : parts;
  }

  function computeRatioComponent(index) {
    return _ember['default'].computed('value', {
      get: function get() {
        return normalizeRatioValue(this.get('value'), index);
      },
      set: function set(key, value) {
        value = value.replace(/\:/g, '');
        var parts = normalizeRatioValue(this.get('value'));
        parts[index] = value;
        var update = parts.join(':');
        this.set('value', ':' === update ? '' : update);
        return value;
      }
    });
  }

  exports['default'] = _ember['default'].Component.extend({
    tagName: 'ul',
    classNames: ['cs-form-ratio-input'],

    valueA: computeRatioComponent(0),
    valueB: computeRatioComponent(1),

    placeholderA: _ember['default'].computed('placeholder', function () {
      return normalizeRatioValue(this.get('placeholder') || '', 0);
    }),

    placeholderB: _ember['default'].computed('placeholder', function () {
      return normalizeRatioValue(this.get('placeholder') || '', 1);
    })

  });
});
define("cornerstone/components/forms/ratio-input/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 56
          }
        },
        "moduleName": "cornerstone/components/forms/ratio-input/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("li");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        var el2 = dom.createTextNode(":");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("li");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "valueA", ["loc", [null, [1, 18], [1, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholderA", ["loc", [null, [1, 37], [1, 49]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 4], [1, 51]]], 0, 0], ["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "valueB", ["loc", [null, [3, 18], [3, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholderB", ["loc", [null, [3, 37], [3, 49]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 4], [3, 51]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/forms/rc-checkbox/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    half: false,
    tagName: 'label',
    classNames: ['cs-rc', 'cs-rc-checkbox'],
    classNameBindings: ['half:cs-rc-1-2']
  });
});
define("cornerstone/components/forms/rc-checkbox/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/rc-checkbox/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [5, 4], [5, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/rc-checkbox/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [7, 4], [7, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/rc-checkbox/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "cs-rc-indicator");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "cs-rc-label");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "value", ["loc", [null, [1, 32], [1, 37]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 39]]], 0, 0], ["block", "if", [["get", "hasBlock", ["loc", [null, [4, 8], [4, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 2], [8, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/rc-choice/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    half: false,
    tagName: 'label',
    classNames: ['cs-rc'],
    classNameBindings: ['modeClass', 'half:cs-rc-1-2'],
    mode: 'checkbox',

    modeClass: _ember['default'].computed('mode', function () {
      return 'radio' === this.get('mode') ? 'cs-rc-radio' : 'cs-rc-checkbox';
    }),

    castArrayVal: _ember['default'].computed('arrayVal', function () {
      var arrayVal = this.get('arrayVal');
      return _ember['default'].isArray(arrayVal) ? arrayVal : _ember['default'].A([arrayVal]);
    }),

    isChecked: _ember['default'].computed({
      get: function get() {
        var _this = this;

        var mode = this.get('mode');

        if ('radio' === mode) {
          return this.get('value') === this.get('optVal');
        }

        if ('array' === mode) {
          var _ret = (function () {

            var val = _this.get('value');
            return {
              v: _this.get('castArrayVal').every(function (arrayVal) {
                return val.includes(arrayVal);
              })
            };
          })();

          if (typeof _ret === 'object') return _ret.v;
        }

        return this.get('value');
      },

      set: function set(key, value) {
        var _this2 = this;

        var mode = this.get('mode');

        if ('radio' === mode) {
          this.set('value', this.get('optVal'));
          return value;
        }

        if ('array' === mode) {

          if (value) {
            this.get('castArrayVal').forEach(function (val) {
              _this2.get('value').addObject(val);
            });
          } else {
            this.get('castArrayVal').forEach(function (val) {
              _this2.get('value').removeObject(val);
            });
          }

          return value;
        }

        this.set('value', value);

        return value;
      }
    })

  });
});
define("cornerstone/components/forms/rc-choice/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/rc-choice/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [5, 4], [5, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 8,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/rc-choice/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [7, 4], [7, 13]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/rc-choice/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "cs-rc-indicator");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "cs-rc-label");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [4]), 1, 1);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "checkbox", "checked", ["subexpr", "@mut", [["get", "isChecked", ["loc", [null, [1, 32], [1, 41]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 43]]], 0, 0], ["block", "if", [["get", "hasBlock", ["loc", [null, [4, 8], [4, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [4, 2], [8, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/select-base/component', ['exports', 'ember', 'cornerstone/mixins/forms/visibility-observation', 'cornerstone/mixins/forms/assign-default'], function (exports, _ember, _cornerstoneMixinsFormsVisibilityObservation, _cornerstoneMixinsFormsAssignDefault) {
  exports['default'] = _ember['default'].Component.extend(_cornerstoneMixinsFormsVisibilityObservation['default'], _cornerstoneMixinsFormsAssignDefault['default'], {

    assignDefaultOptionsPath: 'computedOptions',

    store: _ember['default'].inject.service(),

    init: function init() {
      this._super.apply(this, arguments);
      this.processDynamicContent();
    },

    processDynamicContent: function processDynamicContent() {
      var _this = this;

      var options = this.get('options');

      if ('string' === typeof options) {
        this.set('loadingDynamic', true);
        this.get('store').findRecord('fragment', 'app-choices::' + options).then(function (record) {
          _this.setDynamicContent(_ember['default'].get(record, 'value'));
        });
      } else if (options.then) {
        this.set('loadingDynamic', true);
        options.then(function (response) {
          _this.setDynamicContent(response);
        });
      }
    },

    setDynamicContent: function setDynamicContent(value) {
      var _this2 = this;

      if (this.isDestroyed) {
        return;
      }
      this.set('dynamicContent', value);
      this.set('loadingDynamic', false);
      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this2.send('assignDefaultOption');
      });
    },

    observerDynamicOptions: _ember['default'].observer('options', function () {
      this.processDynamicContent();
    }),

    computedOptions: _ember['default'].computed('options.[]', 'dynamicContent.[]', function () {

      var options = this.get('dynamicContent');
      if (!options) {
        options = this.getWithDefault('options', _ember['default'].A());
      }

      if (!_ember['default'].isArray(options)) {
        return _ember['default'].A();
      }

      return options.map(function (choice) {

        if ('string' === typeof choice) {
          return { value: choice, label: choice };
        }

        if (!choice.value && 0 !== choice.value) {
          return null;
        }

        var option = { value: choice.value, label: choice.label ? choice.label : choice.value };

        if (_ember['default'].isPresent(choice.group)) {
          option.group = choice.group;
        }

        return choice;
      }).filter(_ember['default'].isPresent);
    }),

    computedOptionsChange: _ember['default'].observer('computedOptions.[]', function () {
      var _this3 = this;

      if (this.get('allowInvalidOption')) {
        return;
      }
      _ember['default'].run.next(this, function () {
        _this3.send('assignDefaultOption');
      });
    }),

    actions: {
      isVisible: function isVisible() {
        if (!this.get('loadingDynamic')) {
          this.send('assignDefaultOption');
        }
      }
    }
  });
});
define("cornerstone/components/forms/select-base/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/select-base/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/styled-select/styled-option", [], ["selected", true, "disabled", true, "label", ["subexpr", "@mut", [["get", "placeholderText", ["loc", [null, [6, 74], [6, 89]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 4], [6, 91]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/select-base/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [9, 12], [9, 16]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 4], [9, 18]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 13,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/forms/select-base/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "forms/styled-select/styled-option", [], ["select", ["subexpr", "@mut", [["get", "this", ["loc", [null, [12, 49], [12, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "option", ["subexpr", "@mut", [["get", "option", ["loc", [null, [12, 61], [12, 67]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [12, 6], [12, 70]]], 0, 0]],
          locals: ["option"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 14,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/select-base/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "each", [["get", "computedOptions", ["loc", [null, [11, 12], [11, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [11, 4], [13, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/forms/select-base/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("select");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createUnsafeMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'disabled');
        morphs[3] = dom.createElementMorph(element1);
        morphs[4] = dom.createMorphAt(element1, 1, 1);
        morphs[5] = dom.createMorphAt(element1, 2, 2);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["cs-styled-select-label ", ["subexpr", "if", [["get", "showPlaceholder", ["loc", [null, [1, 40], [1, 55]]], 0, 0, 0, 0], "cs-styled-select-placeholder"], [], ["loc", [null, [1, 35], [1, 88]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 8], [2, 19]]], 0, 0, 0, 0], ["attribute", "disabled", ["get", "disabled", ["loc", [null, [4, 19], [4, 27]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["change"], ["on", "change"], ["loc", [null, [4, 30], [4, 61]]], 0, 0], ["block", "if", [["get", "showPlaceholder", ["loc", [null, [5, 8], [5, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 2], [7, 9]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [8, 8], [8, 16]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [8, 2], [14, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/components/forms/select-multi/component', ['exports', 'ember', 'cornerstone/components/forms/select-base/component'], function (exports, _ember, _cornerstoneComponentsFormsSelectBaseComponent) {
  exports['default'] = _cornerstoneComponentsFormsSelectBaseComponent['default'].extend({
    classNames: ['cs-select', 'cs-select-multi'],
    selection: _ember['default'].computed('value', function () {
      return this.getWithDefault('value', _ember['default'].A()).map(function (value) {
        return { value: value };
      });
    }),
    actions: {
      add: function add(item) {
        this.get('value').addObject(item.value);
      },
      remove: function remove(item) {
        this.get('value').removeObject(item.value);
      }
    }
  });
});
define("cornerstone/components/forms/select-multi/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/select-multi/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ember-selectize", [], ["content", ["subexpr", "@mut", [["get", "computedOptions", ["loc", [null, [2, 10], [2, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "optionValuePath", "content.value", "optionLabelPath", "content.label", "selection", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [5, 12], [5, 21]]], 0, 0, 0, 0]], [], [], 0, 0], "multiple", true, "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [7, 14], [7, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "optionGroupPath", "group", "add-item", ["subexpr", "action", ["add"], [], ["loc", [null, [9, 11], [9, 25]]], 0, 0], "remove-item", ["subexpr", "action", ["remove"], [], ["loc", [null, [10, 14], [10, 31]]], 0, 0]], ["loc", [null, [1, 0], [11, 2]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/forms/select-single/component', ['exports', 'cornerstone/components/forms/select-base/component'], function (exports, _cornerstoneComponentsFormsSelectBaseComponent) {
  exports['default'] = _cornerstoneComponentsFormsSelectBaseComponent['default'].extend({
    classNames: ['cs-select', 'cs-select-single']
  });
});
// import Ember from 'ember';
define("cornerstone/components/forms/select-single/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/select-single/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "ember-selectize", [], ["content", ["subexpr", "@mut", [["get", "computedOptions", ["loc", [null, [2, 10], [2, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "optionValuePath", "content.value", "optionLabelPath", "content.label", "value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [5, 8], [5, 13]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [6, 14], [6, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "optionGroupPath", "group"], ["loc", [null, [1, 0], [8, 2]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/forms/styled-select/component', ['exports', 'ember', 'cornerstone/components/forms/select-base/component'], function (exports, _ember, _cornerstoneComponentsFormsSelectBaseComponent) {
  exports['default'] = _cornerstoneComponentsFormsSelectBaseComponent['default'].extend({

    classNames: ['cs-styled-select'],
    classNameBindings: ['focused:cs-active'],
    focused: false,
    hasRendered: false,

    didInsertElement: function didInsertElement() {
      var _this = this;

      this.$('select').on('focus', function () {
        _this.set('focused', true);
      }).on('blur', function () {
        _this.set('focused', false);
      });

      _ember['default'].run.next(function () {
        _this.set('hasRendered', true);
      });
    },

    placeholderText: _ember['default'].computed('placeholder', 'value', function () {
      var placeholder = this.get('placeholder');
      if (_ember['default'].isNone(placeholder)) {
        return this.get('value');
      }
      return placeholder;
    }),

    label: _ember['default'].computed('selectedOption', 'loadingDynamic', function () {

      if (this.get('loadingDynamic')) {
        return 'Loading&hellip;';
      }

      if (this.get('showPlaceholder') || !this.get('selectedOption')) {
        return this.get('placeholderText');
      }

      var selected = this.getWithDefault('selectedOption', {});
      return _ember['default'].getWithDefault(selected, 'label', _ember['default'].getWithDefault(selected, 'value', this.get('selectedOption')));
    }),

    selectedOption: _ember['default'].computed('value', 'computedOptions.[]', function () {

      var current = this.get('value');
      if (_ember['default'].isNone(current)) {
        this.send('assignDefaultOption');
        current = this.get('value');
      }

      return this.get('computedOptions').find(function (option) {
        // Try `option.value`, then `option`
        // Not checking strictly because it's ok to accept values that are "close enough" in this case
        return current == _ember['default'].getWithDefault(option, 'value', option); // eslint-disable-line eqeqeq
      });
    }),

    showPlaceholder: _ember['default'].computed.none('selectedOption'),

    actions: {
      change: function change() {

        var options = this.get('computedOptions');

        var index = this.$('select')[0].selectedIndex;

        if (this.get('showPlaceholder')) {
          index--;
        }

        // Try `option.value`, then `option`
        this.set('value', _ember['default'].getWithDefault(options[index], 'value', options[index]));
      }
    }
  });
});
define('cornerstone/components/forms/styled-select/styled-option/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'option',
    attributeBindings: ['value', 'selected', 'disabled'],

    // Return first available path in this order: option.value, option.label, option
    value: _ember['default'].computed('option', 'option.value', function () {
      var option = this.getWithDefault('option', {});
      return _ember['default'].getWithDefault(option, 'value', _ember['default'].getWithDefault(option, 'label', this.get('option')));
    }),

    // Return first available path in this order: option.label, option.value, option
    label: _ember['default'].computed('option', 'option.label', function () {
      var option = this.getWithDefault('option', {});
      return _ember['default'].getWithDefault(option, 'label', _ember['default'].getWithDefault(option, 'value', this.get('option')));
    }),

    selected: _ember['default'].computed('select.value', function () {
      // Not checking strictly because it's ok to accept values that are "close enough" in this case
      return this.get('select.value') == this.get('value'); // eslint-disable-line eqeqeq
    })
  });
});
define("cornerstone/components/forms/styled-select/styled-option/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 11
          }
        },
        "moduleName": "cornerstone/components/forms/styled-select/styled-option/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "label", ["loc", [null, [1, 0], [1, 11]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/components/forms/styled-select/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/styled-select/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "forms/styled-select/styled-option", [], ["selected", true, "disabled", true, "label", ["subexpr", "@mut", [["get", "placeholderText", ["loc", [null, [6, 74], [6, 89]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 4], [6, 91]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 10,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/styled-select/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [9, 12], [9, 16]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 4], [9, 18]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 12,
                  "column": 6
                },
                "end": {
                  "line": 14,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/forms/styled-select/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "forms/styled-select/styled-option", [], ["select", ["subexpr", "@mut", [["get", "this", ["loc", [null, [13, 51], [13, 55]]], 0, 0, 0, 0]], [], [], 0, 0], "option", ["subexpr", "@mut", [["get", "option", ["loc", [null, [13, 63], [13, 69]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [13, 8], [13, 72]]], 0, 0]],
            locals: ["option"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 4
              },
              "end": {
                "line": 15,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/forms/styled-select/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "computedOptions", ["loc", [null, [12, 14], [12, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 6], [14, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 2
            },
            "end": {
              "line": 16,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/styled-select/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "hasRendered", ["loc", [null, [11, 10], [11, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [11, 4], [15, 11]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/styled-select/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("select");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var element1 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createUnsafeMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[2] = dom.createAttrMorph(element1, 'disabled');
        morphs[3] = dom.createElementMorph(element1);
        morphs[4] = dom.createMorphAt(element1, 1, 1);
        morphs[5] = dom.createMorphAt(element1, 2, 2);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["cs-styled-select-label ", ["subexpr", "if", [["get", "showPlaceholder", ["loc", [null, [1, 40], [1, 55]]], 0, 0, 0, 0], "cs-styled-select-placeholder"], [], ["loc", [null, [1, 35], [1, 88]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["content", "label", ["loc", [null, [2, 8], [2, 19]]], 0, 0, 0, 0], ["attribute", "disabled", ["get", "disabled", ["loc", [null, [4, 19], [4, 27]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["change"], ["on", "change"], ["loc", [null, [4, 30], [4, 61]]], 0, 0], ["block", "if", [["get", "showPlaceholder", ["loc", [null, [5, 8], [5, 23]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 2], [7, 9]]]], ["block", "if", [["get", "hasBlock", ["loc", [null, [8, 8], [8, 16]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [8, 2], [16, 9]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/components/forms/text-editor/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-text-editor'],
    classNameBindings: ['modeClass'],

    allModes: ['html', 'text'],

    editorWrapID: _ember['default'].computed('editorID', function () {
      return 'wp-' + this.get('editorID') + '-wrap';
    }),

    editorContainerID: _ember['default'].computed('editorID', function () {
      return 'wp-' + this.get('editorID') + '-editor-container';
    }),

    init: function init() {

      this._super.apply(this, arguments);

      var editorID = 'cswpeditor-' + _ember['default'].guidFor(this);
      this.set('editorID', editorID);

      window.tinyMCEPreInit.mceInit[editorID] = _ember['default'].copy(window.tinyMCEPreInit.mceInit['cswpeditor']);
      window.tinyMCEPreInit.mceInit[editorID].id = editorID;
      window.tinyMCEPreInit.mceInit[editorID].selector = '#' + editorID;
      window.tinyMCEPreInit.mceInit[editorID].resize = false;
      window.tinyMCEPreInit.mceInit[editorID].valid_elements = "*[*]";
      window.tinyMCEPreInit.mceInit[editorID].extended_valid_elements = "*[*]";
    },

    setupTinyMCE: function setupTinyMCE() {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {

        if (_this.get('tinyMCERendered') || 'undefined' === typeof window.tinymce) {
          return reject();
        }

        var editorID = _this.get('editorID');

        window.tinyMCEPreInit.mceInit[editorID].setup = _this.get('setupTinyMCE');

        var setup = function setup(editor) {

          _this.set('editorInstance', editor);

          editor.on('init', function () {

            if (!window.wpActiveEditor) {
              window.wpActiveEditor = editorID;
            }

            _this.set('tinyMCERendered', true);

            resolve(editor);
          });

          editor.addButton('cs_media', {
            icon: 'image',
            onclick: function onclick() {
              if (!window.wp || !window.wp.media || !window.wp.media.editor) {
                return;
              }
              window.wp.media.editor.open(_this.get('editorID'), {
                frame: 'post',
                state: 'insert',
                title: window.wp.media.view.l10n.addMedia,
                multiple: true
              });
            }
          });

          var update = function update() {
            if ('text' === _this.get('activeMode')) {
              _this.set('isUpdatingText', true);
              _this.set('value', _this.get('editorInstance').getContent());
              _this.set('isUpdatingText', false);
            }
          };

          editor.on('keyup change NodeChange', function () {
            _ember['default'].run.debounce(update, 150);
          });
        };

        window.tinymce.init(_ember['default'].assign({}, window.tinyMCEPreInit.mceInit[editorID], { setup: setup }));
      });
    },

    availableModes: _ember['default'].computed(function () {
      var all = this.get('allModes');
      var mode = this.get('mode');
      return all.includes(mode) ? [mode] : all;
    }),

    modeClass: _ember['default'].computed('activeMode', function () {
      return 'cs-text-editor-mode-' + this.get('activeMode');
    }),

    pickerOpen: _ember['default'].observer('picker.open', function () {
      // if ( this.get('picker.open') ) {
      //   Ember.run.scheduleOnce('afterRender', () => {
      //     this.renderTinyMCE();
      //   });
      // }
    }),

    onInit: _ember['default'].on('init', function () {
      this.set('activeMode', this.get('availableModes.firstObject'));
    }),

    observeValue: _ember['default'].observer('value', function () {
      var editorInstance = this.get('editorInstance');
      if (!editorInstance || this.isDestroyed || this.get('isUpdatingText')) {
        return;
      }
      editorInstance.setContent(this.get('value'), { format: 'raw' });
      this.set('isUpdatingText', false);
    }),

    didInsertElement: function didInsertElement() {
      var _this2 = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        if (_this2.get('availableModes').includes('text')) {
          _this2.$('.cs-text-editor-text textarea').val(_this2.get('value'));
          _this2.setupTinyMCE().then(function () {
            _this2.send('focus');
          });
        } else {
          _this2.send('focus');
        }
      });
    },

    prepareEditorContent: function prepareEditorContent(html) {
      return html;
    },
    cleanEditorUpdate: function cleanEditorUpdate(html) {
      return html;
    },

    actions: {
      focus: function focus() {
        var _this3 = this;

        _ember['default'].run.later(function () {
          if ('text' === _this3.get('activeMode')) {
            _this3.send('focusTextEditor');
          } else {
            _this3.$('textarea').focus();
          }
        }, 10);
      },
      switchTo: function switchTo(mode) {
        this.set('activeMode', mode);
        this.send('focus');
      },
      focusTextEditor: function focusTextEditor() {
        var editorInstance = this.get('editorInstance');
        if (editorInstance) {
          editorInstance.focus();
          editorInstance.selection.select(editorInstance.getBody(), true);
          editorInstance.selection.collapse(false);
        }
      }
    }
  });
});
define("cornerstone/components/forms/text-editor/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 4,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/text-editor/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "activeMode", ["loc", [null, [3, 57], [3, 67]]], 0, 0, 0, 0], "html"], [], ["loc", [null, [3, 53], [3, 75]]], 0, 0], "cs-active"], [], ["loc", [null, [3, 48], [3, 89]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["switchTo", "html"], [], ["loc", [null, [3, 12], [3, 40]]], 0, 0], ["inline", "fa-icon", ["code"], [], ["loc", [null, [3, 91], [3, 109]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 2
            },
            "end": {
              "line": 7,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/text-editor/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element0, 'class');
          morphs[1] = dom.createElementMorph(element0);
          morphs[2] = dom.createMorphAt(element0, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "activeMode", ["loc", [null, [6, 57], [6, 67]]], 0, 0, 0, 0], "text"], [], ["loc", [null, [6, 53], [6, 75]]], 0, 0], "cs-active"], [], ["loc", [null, [6, 48], [6, 89]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["switchTo", "text"], [], ["loc", [null, [6, 12], [6, 40]]], 0, 0], ["inline", "cs-icon", ["interface/action-btn-fonts"], [], ["loc", [null, [6, 91], [6, 131]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 22,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/text-editor/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-text-editor-switcher");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-text-editor-text");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "wp-core-ui wp-editor-wrap tmce-active");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("div");
        dom.setAttribute(el3, "class", "wp-editor-container");
        var el4 = dom.createTextNode("\n      ");
        dom.appendChild(el3, el4);
        var el4 = dom.createElement("textarea");
        dom.setAttribute(el4, "class", "cs-wp-editor wp-editor-area");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("\n    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(fragment, [2, 1]);
        var element4 = dom.childAt(element3, [1]);
        var element5 = dom.childAt(element4, [1]);
        var morphs = new Array(7);
        morphs[0] = dom.createMorphAt(element2, 1, 1);
        morphs[1] = dom.createMorphAt(element2, 2, 2);
        morphs[2] = dom.createAttrMorph(element3, 'id');
        morphs[3] = dom.createAttrMorph(element4, 'id');
        morphs[4] = dom.createAttrMorph(element5, 'id');
        morphs[5] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[6] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        return morphs;
      },
      statements: [["block", "if", [["subexpr", "contains", ["html", ["get", "availableModes", ["loc", [null, [2, 25], [2, 39]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 8], [2, 40]]], 0, 0]], [], 0, null, ["loc", [null, [2, 2], [4, 9]]]], ["block", "if", [["subexpr", "contains", ["text", ["get", "availableModes", ["loc", [null, [5, 25], [5, 39]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 8], [5, 40]]], 0, 0]], [], 1, null, ["loc", [null, [5, 2], [7, 9]]]], ["attribute", "id", ["get", "editorWrapID", ["loc", [null, [13, 12], [13, 24]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "id", ["get", "editorContainerID", ["loc", [null, [14, 14], [14, 31]]], 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "id", ["get", "editorID", ["loc", [null, [15, 57], [15, 65]]], 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [20, 17], [20, 22]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "cs-text-editor-html"], ["loc", [null, [20, 0], [20, 52]]], 0, 0], ["content", "yield", ["loc", [null, [21, 0], [21, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/unit-input/component', ['exports', 'ember', 'cornerstone/util/string-like', 'cornerstone/util/split-on-whitespace'], function (exports, _ember, _cornerstoneUtilStringLike, _cornerstoneUtilSplitOnWhitespace) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-unit-input'],
    classNameBindings: ['invalidInput:cs-unit-input-invalid', 'choicesDisabled:cs-unit-input-hide-switcher'],
    open: false,
    isFocused: false,

    unitMode: _ember['default'].computed('options.unit_mode', function () {
      return this.getWithDefault('options.unit_mode', 'distance');
    }),

    distanceUnits: ['none', 'px', 'em', 'rem', 'vh', 'vw', '%'],
    angleUnits: ['deg', 'rad'],
    timeUnits: ['s', 'ms'],

    solitaryInput: _ember['default'].computed.lte('allowedUnits.length', 1),
    isUnitless: _ember['default'].computed.equal('unitMode', 'unitless'),

    choicesDisabled: _ember['default'].computed('solitaryInput', 'options.disabled', 'usingKeyword', 'isUnitless', function () {
      return this.get('options.disabled') || this.get('solitaryInput') || this.get('usingKeyword') || this.get('isUnitless');
    }),

    init: function init() {

      this._super.apply(this, arguments);

      var parent = this.get('parent');

      if (_ember['default'].isPresent(parent)) {
        parent.set('unitInput', this);
      }

      this.set('usingKeyword', this.isKeywordValid(this.get('value')));
    },

    focusChange: _ember['default'].observer('isFocused', function () {
      this.fallback();
    }),

    fallbackWhenInvalid: _ember['default'].computed('value', function () {
      this.fallback();
    }),

    fallback: function fallback() {
      if (!this.get('isFocused') && (this.get('invalidInput') || '' === this.get('value'))) {
        this.set('value', this.getWithDefault('options.fallback_value', '0' + this.get('allowedUnits')[0]));
        this.notifyPropertyChange('rawValue');
      }
    },

    valToString: function valToString() {
      var val = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];

      return String(val);
    },

    detectUnit: function detectUnit(source) {
      var selected = undefined;
      var current = this.valToString(source);
      var matches = current.match(/-?\d*(?:\.\d+)?/);
      var prev = this.get('previousUnit');

      if (matches) {
        selected = current.replace(matches[0], '');
      }

      if (prev && '' === current) {
        selected = prev;
      }

      var allowed = this.get('allowedUnits');

      return allowed.includes(selected) ? selected : allowed[0];
    },

    stripUnit: function stripUnit(value, fallback) {

      var matches = this.valToString(value).match(/-?\d*(?:\.\d+)?/);
      var parsed = fallback;

      if (matches) {
        parsed = parseFloat(matches[0]);
      }

      return isNaN(parsed) ? fallback : parsed;
    },

    unit: _ember['default'].computed('value', 'allowedUnits', {
      get: function get() {
        if (this.get('isUnitless')) {
          return '';
        }
        var value = this.get('value');
        return this.isKeywordValid(value) ? '' : this.detectUnit(value);
      },
      set: function set(key, value) {

        var raw = this.get('rawValue');
        if (this.isKeywordValid(raw)) {
          return '';
        }

        var number = this.stripUnit(raw, 0);

        this.set('value', 'none' === value ? number : '' + number + value);
        this.set('previousUnit', value);

        return value;
      }
    }),

    observeUsingKeyword: _ember['default'].observer('value', function () {
      this.set('usingKeyword', this.isKeywordValid(this.get('value')));
    }),

    rawValue: _ember['default'].computed('value', {
      get: function get() {
        var value = this.get('value');
        return this.isKeywordValid(value) ? value : this.stripUnit(value, undefined);
      },
      set: function set(key, value) {

        if (this.isKeywordValid(value)) {
          this.set('value', value);
          this.set('invalidInput', false);
          return value;
        }

        var matches = this.valToString(value).match(/^-?\d*(?:\.\d+)?$/);
        if (matches && !isNaN(parseFloat(value))) {
          var unit = this.get('usingKeyword') ? this.detectUnit(value) : this.get('unit');

          if ('none' === unit) {
            this.set('value', matches[0]);
          } else {
            this.set('value', '' + matches[0] + unit);
          }

          this.set('invalidInput', false);
        } else if ('' === value && '' === this.get('options.fallback_value')) {
          this.set('value', '');
          this.set('invalidInput', false);
        } else {
          this.set('invalidInput', true);
        }

        return value;
      }
    }),

    rawNumeric: _ember['default'].computed('value', function () {
      var value = this.get('value');
      return this.isKeywordValid(value) ? false : this.stripUnit(value, false);
    }),

    allowedUnits: _ember['default'].computed('options.available_units', 'unitMode', function () {

      if (this.get('isUnitless')) {
        return [''];
      }

      var baseUnits = this.get('angle' === this.get('unitMode') ? 'angleUnits' : 'time' === this.get('unitMode') ? 'timeUnits' : 'distanceUnits');
      var allowed = this.get('options.available_units');

      if (allowed) {
        baseUnits = baseUnits.filter(function (item) {
          return allowed.includes(item);
        });
      }

      return baseUnits;
    }),

    isKeywordValid: function isKeywordValid(word) {

      // Bail if we find any unqualified spaces
      if ((0, _cornerstoneUtilSplitOnWhitespace['default'])(word).length > 1) {
        return false;
      }

      return !!this.getWithDefault('options.valid_keywords', []).find(function (keyword) {
        if ('calc' === keyword) {
          keyword = 'calc%';
        }
        return (0, _cornerstoneUtilStringLike['default'])(word, keyword);
      });
    },

    actions: {

      focus: function focus() {
        this.set('isFocused', true);
      },

      blur: function blur() {
        this.set('isFocused', false);
      },

      selectUnit: function selectUnit(unit) {
        this.set('unit', unit);
        this.set('open', false);
      },

      toggle: function toggle() {

        if (this.get('open')) {
          this.set('open', false);
          return;
        }

        if (!this.get('solitaryInput')) {
          this.set('open', true);
        }
      },

      clickOutside: function clickOutside() {
        this.set('open', false);
      },

      detectUnitOnEnter: function detectUnitOnEnter() {

        var raw = this.get('rawValue');
        if (this.isKeywordValid(raw) || this.get('isUnitless')) {
          return;
        }

        var fallback = this.get('options.fallback_value');
        if ('' === raw && fallback) {
          this.set('rawValue', fallback);
        } else {
          var detected = this.detectUnit(raw);

          if (detected === this.get('unit')) {
            this.set('rawValue', this.stripUnit(raw, 0));
          } else {
            this.set('unit', detected);
          }
        }
      }
    }

  });
});
define("cornerstone/components/forms/unit-input/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 2
            },
            "end": {
              "line": 5,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/unit-input/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(3);
          morphs[0] = dom.createAttrMorph(element1, 'class');
          morphs[1] = dom.createElementMorph(element1);
          morphs[2] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["attribute", "class", ["concat", ["cs-unit-input-unit ", ["subexpr", "if", [["get", "open", ["loc", [null, [4, 43], [4, 47]]], 0, 0, 0, 0], "cs-active"], [], ["loc", [null, [4, 38], [4, 61]]], 0, 0], " ", ["subexpr", "if", [["get", "choicesDisabled", ["loc", [null, [4, 67], [4, 82]]], 0, 0, 0, 0], "cs-solitary"], [], ["loc", [null, [4, 62], [4, 98]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["toggle"], [], ["loc", [null, [4, 100], [4, 119]]], 0, 0], ["content", "unit", ["loc", [null, [4, 120], [4, 128]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 6
                },
                "end": {
                  "line": 10,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/forms/unit-input/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("        ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createAttrMorph(element0, 'class');
              morphs[1] = dom.createElementMorph(element0);
              morphs[2] = dom.createMorphAt(element0, 0, 0);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["cs-unit-input-choice ", ["subexpr", "if", [["subexpr", "eq", [["get", "selectedUnit", ["loc", [null, [9, 53], [9, 65]]], 0, 0, 0, 0], ["get", "unitChoice", ["loc", [null, [9, 66], [9, 76]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 49], [9, 77]]], 0, 0], "cs-active"], [], ["loc", [null, [9, 44], [9, 91]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["selectUnit", ["get", "unitChoice", ["loc", [null, [9, 115], [9, 125]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 93], [9, 127]]], 0, 0], ["content", "unitChoice", ["loc", [null, [9, 128], [9, 142]]], 0, 0, 0, 0]],
            locals: ["unitChoice"],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 4
              },
              "end": {
                "line": 11,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/forms/unit-input/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "allowedUnits", ["loc", [null, [8, 14], [8, 26]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 6], [10, 15]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 2
            },
            "end": {
              "line": 12,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/forms/unit-input/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "common/floating-container", [], ["outsideClick", "clickOutside", "open", ["subexpr", "@mut", [["get", "open", ["loc", [null, [7, 66], [7, 70]]], 0, 0, 0, 0]], [], [], 0, 0], "class", "cs-unit-input-choices"], 0, null, ["loc", [null, [7, 4], [11, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/unit-input/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-unit-input-selection");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element2, 1, 1);
        morphs[2] = dom.createMorphAt(element2, 2, 2);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "rawValue", ["loc", [null, [1, 14], [1, 22]]], 0, 0, 0, 0]], [], [], 0, 0], "enter", "detectUnitOnEnter", "placeholder", ["subexpr", "@mut", [["get", "placeholder", ["loc", [null, [1, 61], [1, 72]]], 0, 0, 0, 0]], [], [], 0, 0], "disabled", ["subexpr", "@mut", [["get", "options.disabled", ["loc", [null, [1, 82], [1, 98]]], 0, 0, 0, 0]], [], [], 0, 0], "focus-out", "blur", "focus-in", "focus"], ["loc", [null, [1, 0], [1, 134]]], 0, 0], ["block", "if", [["get", "unit", ["loc", [null, [3, 8], [3, 12]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 2], [5, 9]]]], ["block", "unless", [["get", "choicesDisabled", ["loc", [null, [6, 12], [6, 27]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [6, 2], [12, 13]]]], ["content", "yield", ["loc", [null, [14, 0], [14, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/forms/unit-slider/component', ['exports', 'ember', 'npm:nouislider', 'jquery'], function (exports, _ember, _npmNouislider, _jquery) {
  exports['default'] = _ember['default'].Component.extend({

    defaultsRanges: {

      // Distance
      none: { min: 0, max: 3, step: 0.001 },
      px: { min: 0, max: 1500, step: 1 },
      em: { min: -0.15, max: 0.5, step: 0.001 },
      rem: { min: -0.15, max: 0.5, step: 0.001 },
      vh: { min: 0, max: 100, step: 1 },
      vw: { min: 0, max: 100, step: 1 },
      '%': { min: 0, max: 100, step: 1 },

      // Angles
      deg: { min: 0, max: 360, step: 1 },
      rad: { min: 0, max: 6.2832, step: 0.0001 }

    },

    unitInputOptions: _ember['default'].computed('options', function () {
      var options = this.getWithDefault('options', {});
      return {
        disabled: options.disabled,
        available_units: options.available_units,
        valid_keywords: options.valid_keywords,
        unit_mode: options.unit_mode,
        fallback_value: options.fallback_value
      };
    }),

    rangeVal: _ember['default'].computed('unitInput.unit', function () {

      var range = { step: 0.1, min: 0, max: 100 };

      var step = undefined,
          min = undefined,
          max = undefined;

      if ('unitless' === this.get('options.unit_mode')) {
        step = parseFloat(this.get('options.step'));
        min = parseFloat(this.get('options.min'));
        max = parseFloat(this.get('options.max'));
      } else {
        var defaults = this.get('defaultsRanges');
        var mapped = this.get('options.ranges');
        var unit = this.get('unitInput.unit');

        if (defaults[unit]) {
          step = defaults[unit].step;
          min = defaults[unit].min;
          max = defaults[unit].max;
        }

        if (mapped && mapped[unit]) {
          step = parseFloat(mapped[unit].step);
          min = parseFloat(mapped[unit].min);
          max = parseFloat(mapped[unit].max);
        }
      }

      if (!isNaN(step)) {
        range.step = step;
      }

      if (!isNaN(min)) {
        range.min = min;
      }

      if (!isNaN(max)) {
        range.max = max;
      }

      return range;
    }),

    classNames: ['cs-unit-slider'],

    rangeUpdate: _ember['default'].observer('unitInput.unit', function () {
      var unit = this.get('unitInput.unit');

      if (unit === this.get('currentRangeUnit')) {
        return;
      }

      this.set('currentRangeUnit', unit);

      var range = this.get('rangeVal');
      var sliderEl = this.get('sliderEl');

      if (!range || !sliderEl || !sliderEl.noUiSlider) {
        return;
      }

      sliderEl.noUiSlider.updateOptions({
        step: range.step,
        range: {
          'min': range.min,
          'max': range.max
        }
      });
    }),

    didInsertElement: function didInsertElement() {
      var _this = this;

      this.set('sliderEl', this.$('.cs-unit-slider-target')[0]);

      _ember['default'].run.later(function () {

        var el = _this.get('sliderEl');

        if (!el || _this.isDestroyed) {
          return;
        }

        var range = _this.get('rangeVal');

        var num = _this.get('unitInput.rawNumeric');

        _npmNouislider['default'].create(_this.get('sliderEl'), {
          start: isNaN(num) ? 0 : num,
          step: range.step,
          connect: 'lower',
          range: {
            'min': range.min,
            'max': range.max
          }
        });

        el.noUiSlider.on('change', (function () {
          if (this.isDestroyed) {
            return;
          }
          this.set('isSliding', false);
          this.sliderChanged(el.noUiSlider.get(), 'change', el.noUiSlider);
        }).bind(_this));

        el.noUiSlider.on('slide', (function () {
          if (this.isDestroyed) {
            return;
          }
          this.set('isSliding', true);
          this.sliderChanged(el.noUiSlider.get(), 'slide', el.noUiSlider);
        }).bind(_this));

        _this.notifyPropertyChange('canSlide');
        _this.get('unitInput.previousUnit');

        (0, _jquery['default'])(el).removeClass('cs-unit-slider-target-waiting');
      }, 3);
    },

    sliderChanged: function sliderChanged(val) {
      this.set('unitInput.rawValue', String(parseFloat(val)));
    },

    canSlide: _ember['default'].computed('options.disabled', 'unitInput.rawNumeric', 'unitInput.usingKeyword', function () {
      return !(this.get('options.disabled') || isNaN(this.get('unitInput.rawNumeric')) || this.get('unitInput.usingKeyword'));
    }),

    observeCanSlide: _ember['default'].observer('canSlide', function () {

      var sliderEl = this.get('sliderEl');

      if (!sliderEl) {
        return;
      }

      if (!this.get('canSlide')) {
        sliderEl.noUiSlider.set(0);
      }
    }),

    updateSlider: _ember['default'].observer('unitInput.rawNumeric', function () {

      var sliderEl = this.get('sliderEl');

      if (!sliderEl || !this.get('canSlide') || this.get('isSliding')) {
        return;
      }

      sliderEl.noUiSlider.set(this.get('unitInput.rawNumeric'));
    })

  });
});
define("cornerstone/components/forms/unit-slider/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/forms/unit-slider/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-unit-slider-target-container");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cs-unit-slider-target cs-unit-slider-target-waiting");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        return morphs;
      },
      statements: [["inline", "forms/unit-input", [], ["value", ["subexpr", "@mut", [["get", "value", ["loc", [null, [4, 25], [4, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "parent", ["subexpr", "@mut", [["get", "this", ["loc", [null, [4, 38], [4, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "unitInputOptions", ["loc", [null, [4, 51], [4, 67]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 0], [4, 70]]], 0, 0], ["content", "yield", ["loc", [null, [5, 0], [5, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/bar-button/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: 'button',
    classNames: ['cs-bar-btn'],
    classNameBindings: ['class', 'active:cs-active'],

    active: false,

    click: function click() {
      this.sendAction();
    }

  });
});
define("cornerstone/components/global/bar-button/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/global/bar-button/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/bar-nav/component', ['exports', 'cornerstone/components/common/floating-container/component'], function (exports, _cornerstoneComponentsCommonFloatingContainerComponent) {
  exports['default'] = _cornerstoneComponentsCommonFloatingContainerComponent['default'].extend({
    open: false,
    tagName: 'nav',
    classNames: ['cs-bar-nav'],

    outsideClickHandler: function outsideClickHandler() {
      this.set('open', false);
    },

    click: function click() {
      this.toggleProperty('open');
    }

  });
});
// import Ember from 'ember';
define("cornerstone/components/global/bar-nav/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 6
            },
            "end": {
              "line": 6,
              "column": 89
            }
          },
          "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["inline", "t", ["app.home.title"], [], ["loc", [null, [6, 67], [6, 89]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 41
              },
              "end": {
                "line": 9,
                "column": 89
              }
            },
            "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["app.options.title"], [], ["loc", [null, [9, 64], [9, 89]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 10,
                "column": 9
              },
              "end": {
                "line": 10,
                "column": 61
              }
            },
            "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["app.templates.title"], [], ["loc", [null, [10, 34], [10, 61]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "cs-bar-nav-items-divider");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["options"], [], 0, null, ["loc", [null, [9, 41], [9, 101]]]], ["block", "link-to", ["templates"], [], 1, null, ["loc", [null, [10, 9], [10, 73]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 41
              },
              "end": {
                "line": 14,
                "column": 89
              }
            },
            "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["app.headers.title"], [], ["loc", [null, [14, 64], [14, 89]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 2
            },
            "end": {
              "line": 15,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          dom.setAttribute(el1, "class", "cs-bar-nav-items-divider");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["headers"], [], 0, null, ["loc", [null, [14, 41], [14, 101]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 8
              },
              "end": {
                "line": 18,
                "column": 56
              }
            },
            "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["app.builder.title"], [], ["loc", [null, [18, 31], [18, 56]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 19,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["content"], [], 0, null, ["loc", [null, [18, 8], [18, 68]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 8
              },
              "end": {
                "line": 22,
                "column": 56
              }
            },
            "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "t", ["app.footers.title"], [], ["loc", [null, [22, 31], [22, 56]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 21,
              "column": 2
            },
            "end": {
              "line": 23,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["footers"], [], 0, null, ["loc", [null, [22, 8], [22, 68]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/global/bar-nav/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("a");
        dom.setAttribute(el1, "class", "cs-bar-nav-toggle");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("ul");
        dom.setAttribute(el1, "class", "cs-bar-nav-items");
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("li");
        dom.setAttribute(el2, "class", "cs-bar-nav-items-divider");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
        morphs[1] = dom.createMorphAt(element0, 3, 3);
        morphs[2] = dom.createMorphAt(element0, 5, 5);
        morphs[3] = dom.createMorphAt(element0, 7, 7);
        morphs[4] = dom.createMorphAt(element0, 9, 9);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [11]), 1, 1);
        return morphs;
      },
      statements: [["block", "link-to", ["application"], ["class", "cs-bar-home-nav-item-home"], 0, null, ["loc", [null, [6, 6], [6, 101]]]], ["block", "if", [["get", "currentUser.canManageOptions", ["loc", [null, [8, 8], [8, 36]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [8, 2], [11, 9]]]], ["block", "if", [["get", "currentUser.canUseRegions", ["loc", [null, [13, 8], [13, 33]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [13, 2], [15, 9]]]], ["block", "if", [["get", "currentUser.canUseBuilder", ["loc", [null, [17, 8], [17, 33]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [17, 2], [19, 9]]]], ["block", "if", [["get", "currentUser.canUseRegions", ["loc", [null, [21, 8], [21, 33]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [21, 2], [23, 9]]]], ["inline", "common/link-out", [], ["class", "abc", "href", ["subexpr", "@mut", [["get", "ui.dashboardUrl", ["loc", [null, [26, 39], [26, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "content", ["subexpr", "t", ["app.exit-to-dashboard"], [], ["loc", [null, [26, 63], [26, 90]]], 0, 0]], ["loc", [null, [26, 4], [26, 92]]], 0, 0]],
      locals: [],
      templates: [child0, child1, child2, child3, child4]
    };
  })());
});
define('cornerstone/components/global/code-editor/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-global-code-editor'],
    classNameBindings: ['active:cs-active'],
    value: '',
    orientation: _ember['default'].computed.alias('ui.workspaceOrientation'),

    updateActive: _ember['default'].observer('active', function () {
      this.$('textarea').csCodeEditorToggle(this.get('active'));
    }),

    updateOrientation: _ember['default'].observer('orientation', function () {
      this.$('textarea').csCodeEditorOrient(this.get('orientation'));
    }),

    updateValue: _ember['default'].observer('value', function () {

      if (!this.set('updating')) {
        //console.log('updating', this.get('value'), this.get('editor').doc.getValue());
        // TODO: Push update into code editor
      }

      this.set('updating', false);
    }),

    didInsertElement: function didInsertElement() {
      var _this = this;

      this._super.apply(this, arguments);

      var $el = this.$('textarea');
      $el.val(this.get('value'));
      var runButton = !!this.get('run');

      $el.csCodeEditor({
        startOpen: this.get('active'),
        label: this.get('title'),
        orientation: this.get('orientation'),
        runButton: runButton,
        change: function change(cm) {

          var previous = _this.get('value');
          var current = cm.doc.getValue();

          if (previous !== current) {
            _this.set('value', current);
            _this.set('updating', true);
          }
        }
      });
      this.set('editor', $el.csCodeEditorInstance);

      $el.on('csCodeEditor.toggled', function (e, state) {
        if (state !== _this.get('active')) {
          _this.set('active', state);
        }
      });

      if (runButton) {
        $el.on('csCodeEditor.run', function () {
          _this.sendAction('run');
        });
      }
    },

    willDestroyElement: function willDestroyElement() {}
  });
});
define("cornerstone/components/global/code-editor/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 21
          }
        },
        "moduleName": "cornerstone/components/global/code-editor/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("textarea");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/cs-bar/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-bar']
  });
});
define("cornerstone/components/global/cs-bar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 4
              },
              "end": {
                "line": 10,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "cs-icon", ["interface/action-btn-responsive"], [], ["loc", [null, [9, 6], [9, 51]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 2
            },
            "end": {
              "line": 11,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "global/bar-button", [], ["class", "cs-action-toggle-preview-sizer", "active", ["subexpr", "@mut", [["get", "ui.showPreviewSizer", ["loc", [null, [8, 71], [8, 90]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "showPreviewSizer"], ["target", ["get", "ui", ["loc", [null, [8, 141], [8, 143]]], 0, 0, 0, 0]], ["loc", [null, [8, 98], [8, 144]]], 0, 0]], 0, null, ["loc", [null, [8, 4], [10, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 13,
              "column": 2
            },
            "end": {
              "line": 15,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("a");
          dom.setAttribute(el1, "class", "cs-bar-btn cs-action-toggle-view-site");
          dom.setAttribute(el1, "target", "_blank");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element1 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element1, 'href');
          morphs[1] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["attribute", "href", ["concat", [["get", "ui.viewSiteURL", ["loc", [null, [14, 15], [14, 29]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "cs-icon", ["interface/action-btn-view-site"], [], ["loc", [null, [14, 95], [14, 139]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 4
              },
              "end": {
                "line": 20,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "cs-icon", ["interface/action-btn-collapse"], [], ["loc", [null, [19, 6], [19, 49]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 2
            },
            "end": {
              "line": 21,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "global/bar-button", [], ["class", ["subexpr", "concat", ["cs-action-toggle-collapse cs-action-toggle-collapse-", ["get", "ui.windowOrientation", ["loc", [null, [18, 94], [18, 114]]], 0, 0, 0, 0]], [], ["loc", [null, [18, 31], [18, 115]]], 0, 0], "active", ["subexpr", "@mut", [["get", "ui.isCollapsed", ["loc", [null, [18, 123], [18, 137]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "isCollapsed"], ["target", ["get", "ui", ["loc", [null, [18, 183], [18, 185]]], 0, 0, 0, 0]], ["loc", [null, [18, 145], [18, 186]]], 0, 0]], 0, null, ["loc", [null, [18, 4], [20, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child3 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 24,
                "column": 4
              },
              "end": {
                "line": 26,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "cs-icon", ["interface/action-btn-cheatsheet"], [], ["loc", [null, [25, 6], [25, 51]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 23,
              "column": 2
            },
            "end": {
              "line": 27,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "global/bar-button", [], ["class", "cs-action-toggle-cheatsheet", "active", ["subexpr", "@mut", [["get", "ui.showCheatsheet", ["loc", [null, [24, 68], [24, 85]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "showCheatsheet"], ["target", ["get", "ui", ["loc", [null, [24, 134], [24, 136]]], 0, 0, 0, 0]], ["loc", [null, [24, 93], [24, 137]]], 0, 0]], 0, null, ["loc", [null, [24, 4], [26, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child4 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 4
              },
              "end": {
                "line": 32,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "fa-icon", ["bug"], [], ["loc", [null, [31, 6], [31, 23]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 2
            },
            "end": {
              "line": 33,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "global/bar-button", [], ["active", ["subexpr", "@mut", [["get", "ui.debug", ["loc", [null, [30, 32], [30, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "debug"], ["target", ["get", "ui", ["loc", [null, [30, 80], [30, 82]]], 0, 0, 0, 0]], ["loc", [null, [30, 48], [30, 83]]], 0, 0]], 0, null, ["loc", [null, [30, 4], [32, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child5 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 35,
              "column": 2
            },
            "end": {
              "line": 37,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("button");
          dom.setAttribute(el1, "class", "cs-bar-btn cs-action-save");
          var el2 = dom.createTextNode("SAVE");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var morphs = new Array(2);
          morphs[0] = dom.createAttrMorph(element0, 'disabled');
          morphs[1] = dom.createElementMorph(element0);
          return morphs;
        },
        statements: [["attribute", "disabled", ["get", "ui.saving", ["loc", [null, [36, 98], [36, 107]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["save"], ["target", ["get", "ui.primaryRoute", ["loc", [null, [36, 69], [36, 84]]], 0, 0, 0, 0]], ["loc", [null, [36, 46], [36, 86]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/global/cs-bar/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1, "class", "cs-bar-btns");
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(8);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(element2, 2, 2);
        morphs[2] = dom.createMorphAt(element2, 4, 4);
        morphs[3] = dom.createMorphAt(element2, 6, 6);
        morphs[4] = dom.createMorphAt(element2, 8, 8);
        morphs[5] = dom.createMorphAt(element2, 10, 10);
        morphs[6] = dom.createMorphAt(element2, 12, 12);
        morphs[7] = dom.createMorphAt(element2, 14, 14);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "global/bar-nav", ["loc", [null, [1, 0], [1, 18]]], 0, 0, 0, 0], ["content", "yield", ["loc", [null, [5, 2], [5, 11]]], 0, 0, 0, 0], ["block", "if", [["get", "ui.routeEnabledPreviewSizer", ["loc", [null, [7, 8], [7, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 2], [11, 9]]]], ["block", "if", [["get", "ui.canViewSite", ["loc", [null, [13, 8], [13, 22]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [13, 2], [15, 9]]]], ["block", "if", [["get", "ui.routeEnabledCollapse", ["loc", [null, [17, 8], [17, 31]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [17, 2], [21, 9]]]], ["block", "if", [["get", "ui.routeEnabledCheatsheet", ["loc", [null, [23, 8], [23, 33]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [23, 2], [27, 9]]]], ["block", "if", [["get", "ui.devTools", ["loc", [null, [29, 8], [29, 19]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [29, 2], [33, 9]]]], ["block", "if", [["get", "ui.routeEnabledSave", ["loc", [null, [35, 8], [35, 27]]], 0, 0, 0, 0]], [], 5, null, ["loc", [null, [35, 2], [37, 9]]]]],
      locals: [],
      templates: [child0, child1, child2, child3, child4, child5]
    };
  })());
});
define('cornerstone/components/global/cs-canvas/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-canvas']
  });
});
define("cornerstone/components/global/cs-canvas/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/global/cs-canvas/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/cs-window/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    orientation: _ember['default'].computed.alias('ui.windowOrientation'),
    collapse: _ember['default'].computed.alias('ui.isCollapsed'),
    classNames: ['cs-window'],
    classNameBindings: ['screenClass', 'orientation', 'collapse'],
    screenClass: _ember['default'].computed('screen', function () {
      var screen = this.get('screen');
      if (!screen) {
        return '';
      }
      return 'cs-window-' + _ember['default'].String.dasherize(this.get('screen'));
    })
  });
});
define("cornerstone/components/global/cs-window/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/global/cs-window/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/entry-preloader/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-entry-preloader'],
    showing: true,
    classNameBindings: ['showing:cs-active'],

    firstLoad: _ember['default'].observer('ui.transitioning', function () {

      if (!this.get('ui.transitioning ')) {
        this.set('showing', false);
        _ember['default'].run.cancel(this.scheduleRemoval);
      }
    }),

    didInsertElement: function didInsertElement() {

      this.scheduleRemoval = _ember['default'].run.later(this, (function () {
        this.set('showing', false);
      }).bind(this), this.get('ui.transitioning') ? 50000 : 500);
    }
  });
});
define("cornerstone/components/global/entry-preloader/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/global/entry-preloader/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "common/loading-indicator", [], ["style", "font-size: 150px;"], ["loc", [null, [1, 0], [1, 54]]], 0, 0], ["content", "yield", ["loc", [null, [2, 0], [2, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/launch-screen/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    isVisible: _ember['default'].computed.not('preview.isPreview'),
    preview: _ember['default'].inject.service()
  });
});
define("cornerstone/components/global/launch-screen/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 8,
                      "column": 14
                    },
                    "end": {
                      "line": 8,
                      "column": 117
                    }
                  },
                  "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element4 = dom.childAt(fragment, [0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element4, 0, 0);
                  morphs[1] = dom.createMorphAt(element4, 1, 1);
                  return morphs;
                },
                statements: [["inline", "cs-icon", ["interface/global-nav-options"], [], ["loc", [null, [8, 43], [8, 85]]], 0, 0], ["inline", "t", ["app.options.title"], [], ["loc", [null, [8, 85], [8, 110]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 9,
                      "column": 14
                    },
                    "end": {
                      "line": 9,
                      "column": 123
                    }
                  },
                  "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element3 = dom.childAt(fragment, [0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element3, 0, 0);
                  morphs[1] = dom.createMorphAt(element3, 1, 1);
                  return morphs;
                },
                statements: [["inline", "cs-icon", ["interface/global-nav-templates"], [], ["loc", [null, [9, 45], [9, 89]]], 0, 0], ["inline", "t", ["app.templates.title"], [], ["loc", [null, [9, 89], [9, 116]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 10,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(2);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
                return morphs;
              },
              statements: [["block", "link-to", ["options"], [], 0, null, ["loc", [null, [8, 14], [8, 129]]]], ["block", "link-to", ["templates"], [], 1, null, ["loc", [null, [9, 14], [9, 135]]]]],
              locals: [],
              templates: [child0, child1]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 13,
                      "column": 14
                    },
                    "end": {
                      "line": 13,
                      "column": 117
                    }
                  },
                  "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element2, 0, 0);
                  morphs[1] = dom.createMorphAt(element2, 1, 1);
                  return morphs;
                },
                statements: [["inline", "cs-icon", ["interface/global-nav-headers"], [], ["loc", [null, [13, 43], [13, 85]]], 0, 0], ["inline", "t", ["app.headers.title"], [], ["loc", [null, [13, 85], [13, 110]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 8
                  },
                  "end": {
                    "line": 14,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["block", "link-to", ["headers"], [], 0, null, ["loc", [null, [13, 14], [13, 129]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 17,
                      "column": 14
                    },
                    "end": {
                      "line": 17,
                      "column": 115
                    }
                  },
                  "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element1, 0, 0);
                  morphs[1] = dom.createMorphAt(element1, 1, 1);
                  return morphs;
                },
                statements: [["inline", "cs-icon", ["interface/global-nav-pages"], [], ["loc", [null, [17, 43], [17, 83]]], 0, 0], ["inline", "t", ["app.builder.title"], [], ["loc", [null, [17, 83], [17, 108]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 16,
                    "column": 8
                  },
                  "end": {
                    "line": 18,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["block", "link-to", ["content"], [], 0, null, ["loc", [null, [17, 14], [17, 127]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child3 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 21,
                      "column": 14
                    },
                    "end": {
                      "line": 21,
                      "column": 117
                    }
                  },
                  "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("span");
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [0]);
                  var morphs = new Array(2);
                  morphs[0] = dom.createMorphAt(element0, 0, 0);
                  morphs[1] = dom.createMorphAt(element0, 1, 1);
                  return morphs;
                },
                statements: [["inline", "cs-icon", ["interface/global-nav-footers"], [], ["loc", [null, [21, 43], [21, 85]]], 0, 0], ["inline", "t", ["app.footers.title"], [], ["loc", [null, [21, 85], [21, 110]]], 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 8
                  },
                  "end": {
                    "line": 22,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("li");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["block", "link-to", ["footers"], [], 0, null, ["loc", [null, [21, 14], [21, 129]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child4 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 14
                  },
                  "end": {
                    "line": 29,
                    "column": 14
                  }
                },
                "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("                ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("span");
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
                return morphs;
              },
              statements: [["inline", "t", ["app.exit-to-dashboard"], [], ["loc", [null, [28, 22], [28, 51]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("ul");
              dom.setAttribute(el1, "class", "cs-welcome-nav");
              var el2 = dom.createTextNode("\n\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("li");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createElement("li");
              var el5 = dom.createTextNode("\n");
              dom.appendChild(el4, el5);
              var el5 = dom.createComment("");
              dom.appendChild(el4, el5);
              var el5 = dom.createTextNode("            ");
              dom.appendChild(el4, el5);
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element5 = dom.childAt(fragment, [1]);
              var morphs = new Array(5);
              morphs[0] = dom.createMorphAt(element5, 1, 1);
              morphs[1] = dom.createMorphAt(element5, 3, 3);
              morphs[2] = dom.createMorphAt(element5, 5, 5);
              morphs[3] = dom.createMorphAt(element5, 7, 7);
              morphs[4] = dom.createMorphAt(dom.childAt(element5, [9, 1, 1]), 1, 1);
              return morphs;
            },
            statements: [["block", "if", [["get", "currentUser.canManageOptions", ["loc", [null, [7, 14], [7, 42]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [7, 8], [10, 15]]]], ["block", "if", [["get", "currentUser.canUseRegions", ["loc", [null, [12, 14], [12, 39]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [12, 8], [14, 15]]]], ["block", "if", [["get", "currentUser.canUseBuilder", ["loc", [null, [16, 14], [16, 39]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [16, 8], [18, 15]]]], ["block", "if", [["get", "currentUser.canUseRegions", ["loc", [null, [20, 14], [20, 39]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [20, 8], [22, 15]]]], ["block", "common/link-out", [], ["href", ["subexpr", "@mut", [["get", "ui.dashboardUrl", ["loc", [null, [27, 38], [27, 53]]], 0, 0, 0, 0]], [], [], 0, 0]], 4, null, ["loc", [null, [27, 14], [29, 34]]]]],
            locals: [],
            templates: [child0, child1, child2, child3, child4]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "common/welcome-message", [], ["title", ["subexpr", "t", ["app.welcome-app"], [], ["loc", [null, [4, 36], [4, 57]]], 0, 0]], 0, null, ["loc", [null, [4, 4], [35, 31]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "global/cs-canvas", [], [], 0, null, ["loc", [null, [3, 2], [36, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/global/launch-screen/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "index"], 0, null, ["loc", [null, [1, 0], [37, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/global/notification-item/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-notification-item'],
    classNameBindings: ['typeClass', 'active:cs-active', 'exiting:cs-fade'],

    active: false,
    title: _ember['default'].computed.readOnly('flash.title'),
    message: _ember['default'].computed.readOnly('flash.message'),
    exiting: _ember['default'].computed.readOnly('flash.exiting'),
    canClose: _ember['default'].computed.readOnly('flash.canClose'),

    typeClass: _ember['default'].computed('flash.type', function () {

      var flashType = _ember['default'].String.dasherize(this.getWithDefault('flash.type', 'notice'));

      return 'cs-notification-item-' + flashType;
    }),

    didInsertElement: function didInsertElement() {
      var self = this;
      this.set('readiness', _ember['default'].run.next(this, function () {
        self.set('active', true);
      }));
    },

    willDestroy: function willDestroy() {
      this._super();
      this.teardown();
      _ember['default'].run.cancel(this.get('readiness'));
    },

    teardown: function teardown() {
      var flash = this.getWithDefault('flash', false);

      if (flash) {
        flash.destroyMessage();
      }
    },

    actions: {
      close: function close() {
        this.teardown();
      }
    }

  });
});
define("cornerstone/components/global/notification-item/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/global/notification-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "yield", [["get", "this", ["loc", [null, [2, 10], [2, 14]]], 0, 0, 0, 0], ["get", "flash", ["loc", [null, [2, 15], [2, 20]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 2], [2, 22]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 4,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/global/notification-item/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cs-notification-item-close");
            var el2 = dom.createTextNode("×");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["close"], [], ["loc", [null, [5, 43], [5, 61]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/global/notification-item/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-notification-item-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-notification-item-message");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
          morphs[2] = dom.createMorphAt(dom.childAt(fragment, [4]), 0, 0);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "canClose", ["loc", [null, [4, 8], [4, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [4, 2], [6, 9]]]], ["content", "title", ["loc", [null, [7, 42], [7, 51]]], 0, 0, 0, 0], ["content", "flash.message", ["loc", [null, [8, 44], [8, 61]]], 0, 0, 0, 0]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 9,
            "column": 7
          }
        },
        "moduleName": "cornerstone/components/global/notification-item/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "hasBlock", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [9, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/global/notification-queue/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    flashMessages: _ember['default'].inject.service(),
    classNames: ['cs-notification-queue'],

    didRender: function didRender() {
      var scrollbarWidth = this.get('ui.scrollBarWidth');
      if (scrollbarWidth > 0) {
        this.$().css({ right: scrollbarWidth });
      }
    }
  });
});
define("cornerstone/components/global/notification-queue/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/global/notification-queue/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "global/notification-item", [], ["flash", ["subexpr", "@mut", [["get", "flash", ["loc", [null, [2, 35], [2, 40]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 2], [2, 42]]], 0, 0]],
        locals: ["flash"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/global/notification-queue/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "flashMessages.queue", ["loc", [null, [1, 8], [1, 27]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/global/progress-bar/component', ['exports', 'ember', 'npm:nprogress'], function (exports, _ember, _npmNprogress) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-progress-bar-container'],
    saving: false,
    classNameBindings: ['saving:cs-saving', 'transitioning:cs-transitioning'],
    transitioning: false,
    ready: false,

    uiUpdate: _ember['default'].observer('saving', 'transitioning', function () {

      var start = false;

      if (this.get('saving')) {
        start = true;
      }

      if (this.get('transitioning')) {
        start = true;
      }

      _ember['default'].run.scheduleOnce('afterRender', start ? _npmNprogress['default'].start : _npmNprogress['default'].done);
    }),

    didInsertElement: function didInsertElement() {
      _npmNprogress['default'].configure({
        showSpinner: false,
        speed: 850,
        minimum: 0.925,
        parent: '.cs-progress-bar-container',
        barSelector: '.cs-progress-bar',
        template: '<div class="cs-progress-bar"><div class="cs-progress-bar-peg"></div></div></div>'
      });
    }

  });
});
define("cornerstone/components/global/progress-bar/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/global/progress-bar/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/top-level/component', ['exports', 'ember', 'jquery'], function (exports, _ember, _jquery) {
  exports['default'] = _ember['default'].Component.extend({
    browser: _ember['default'].inject.service(),
    ui: _ember['default'].inject.service(),
    classNames: ['cs-app'],
    classNameBindings: ['routeNameClass', 'browser.browserClass', 'ui.transitioning:cs-transitioning'],

    routeNameClass: _ember['default'].computed('ui.currentRouteName', function () {
      var routeClass = this.getWithDefault('ui.currentRouteName', 'unknown').replace(new RegExp(/\./, 'g'), '-');
      return 'cs-route-' + routeClass;
    }),

    didInsertElement: function didInsertElement() {
      authCheck();
      this.set('ui.topLevelEl', this.get('element'));
    }
  });

  function authCheck() {

    var wrap, next;

    function show() {
      var parent = (0, _jquery['default'])('#wp-auth-check'),
          form = (0, _jquery['default'])('#wp-auth-check-form'),
          noframe = wrap.find('.wp-auth-fallback-expired'),
          frame,
          loaded = false;

      if (form.length) {
        // Add unload confirmation to counter (frame-busting) JS redirects
        (0, _jquery['default'])(window).on('beforeunload.wp-auth-check', function (e) {
          e.originalEvent.returnValue = 'Your session has expired. You can log in again from this page or go to the login page.';
        });

        frame = (0, _jquery['default'])('<iframe id="wp-auth-check-frame" frameborder="0">').attr('title', noframe.text());
        frame.on('load', function () {
          var height, body;

          loaded = true;
          // Remove the spinner to avoid unnecessary CPU/GPU usage.
          form.removeClass('loading');

          try {
            body = (0, _jquery['default'])(this).contents().find('body');
            height = body.height();
          } catch (e) {
            wrap.addClass('fallback');
            parent.css('max-height', '');
            form.remove();
            noframe.focus();
            return;
          }

          if (height) {
            if (body && body.hasClass('interim-login-success')) {
              hide();
            } else {
              parent.css('max-height', height + 40 + 'px');
            }
          } else if (!body || !body.length) {
            // Catch "silent" iframe origin exceptions in WebKit after another page is loaded in the iframe
            wrap.addClass('fallback');
            parent.css('max-height', '');
            form.remove();
            noframe.focus();
          }
        }).attr('src', form.data('src'));

        form.append(frame);
      }

      (0, _jquery['default'])('body').addClass('modal-open');
      wrap.removeClass('hidden');

      if (frame) {
        frame.focus();
        // WebKit doesn't throw an error if the iframe fails to load because of "X-Frame-Options: DENY" header.
        // Wait for 10 sec. and switch to the fallback text.
        setTimeout(function () {
          if (!loaded) {
            wrap.addClass('fallback');
            form.remove();
            noframe.focus();
          }
        }, 10000);
      } else {
        noframe.focus();
      }
    }

    function hide() {
      (0, _jquery['default'])(window).off('beforeunload.wp-auth-check');
      (0, _jquery['default'])(document).off('heartbeat-tick.wp-auth-check');
      window.wp.heartbeat.connectNow();

      wrap.fadeOut(200, function () {
        wrap.addClass('hidden').css('display', '');
        (0, _jquery['default'])('#wp-auth-check-frame').remove();
        (0, _jquery['default'])('body').removeClass('modal-open');
      });
    }

    function schedule() {
      var interval = 180; // Check auth every 3 minutes
      next = new Date().getTime() + interval * 1000;
    }

    (0, _jquery['default'])(document).on('heartbeat-tick.wp-auth-check', function (e, data) {
      if ('wp-auth-check' in data) {
        schedule();
        if (!data['wp-auth-check'] && wrap.hasClass('hidden')) {
          show();
        } else if (data['wp-auth-check'] && !wrap.hasClass('hidden')) {
          hide();
        }
      }
    }).on('heartbeat-send.wp-auth-check', function (e, data) {

      if (new Date().getTime() > next) {
        data['wp-auth-check'] = true;
      }
    }).ready(function () {
      schedule();
      wrap = (0, _jquery['default'])('#wp-auth-check-wrap');
      wrap.find('.wp-auth-check-close').on('click', function () {
        hide();
      });
    });
  }
});
define("cornerstone/components/global/top-level/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/global/top-level/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/global/unauthorized-screen/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
define("cornerstone/components/global/unauthorized-screen/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 9
          }
        },
        "moduleName": "cornerstone/components/global/unauthorized-screen/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        dom.setAttribute(el1, "class", "cs-unauthorized");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("iframe");
        dom.setAttribute(el1, "width", "420");
        dom.setAttribute(el1, "height", "315");
        dom.setAttribute(el1, "src", "https://www.youtube.com/v/06A5zpyJG9c?version=3&autoplay=1&loop=1&playlist=06A5zpyJG9c");
        dom.setAttribute(el1, "frameborder", "0");
        dom.setAttribute(el1, "loop", "1");
        dom.setAttribute(el1, "allowfullscreen", "");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "t", ["app.unauthorized"], [], ["loc", [null, [1, 28], [1, 52]]], 0, 0], ["content", "yield", ["loc", [null, [3, 0], [3, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/options/launch-footers/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    service: _ember['default'].inject.service('options'),
    radio: _ember['default'].inject.service('global/radio'),

    store: _ember['default'].inject.service(),
    classNames: ['cs-workspace-intro'],
    classicMode: _ember['default'].computed.alias('service.virtualValues.classicFooters'),

    actions: {
      switchBack: function switchBack() {
        var _this = this;

        this.get('ui').confirm({
          message: this.get('i18n').t('app.options.confirm-footer-switch-back'),
          accept: function accept() {

            var assignments = _this.get('store').peekRecord('option', 'cornerstone_footer_assignments');
            var value = assignments.get('value');
            delete value.global;

            var ui = _this.get('ui');
            ui.beginSaveProgress();
            assignments.set('value', value);
            assignments.save().then(function () {
              ui.notify('Footer Assignment removed!', 'success');
              ui.endSaveProgress();
              _this.set('classicMode', true);
              _this.get('radio').trigger('option.value.changed');
            });
          },
          acceptClass: 'sad',
          acceptBtn: this.get('i18n').t('app.confirm-yep'),
          declineBtn: this.get('i18n').t('app.confirm-nope')
        });
      }
    }
  });
});
define("cornerstone/components/options/launch-footers/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/options/launch-footers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            return morphs;
          },
          statements: [["inline", "fa-icon", ["external-link"], [], ["loc", [null, [4, 6], [4, 33]]], 0, 0], ["inline", "t", ["app.options.launch-footers"], [], ["loc", [null, [5, 12], [5, 46]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/launch-footers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("You are currently using ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Original Footers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("Assign a global header in the builder to use ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Pro Footers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/launch-footers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("You are currently using ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Pro Footers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("Switch back to ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Original Footers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["switchBack"], [], ["loc", [null, [13, 7], [13, 30]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/options/launch-footers/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-workspace-actions");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["footers"], [], 0, null, ["loc", [null, [3, 4], [6, 16]]]], ["block", "if", [["get", "classicMode", ["loc", [null, [8, 8], [8, 19]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [8, 2], [14, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/options/launch-footers/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "ui.isPro", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [15, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/options/launch-headers/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    service: _ember['default'].inject.service('options'),
    radio: _ember['default'].inject.service('global/radio'),

    store: _ember['default'].inject.service(),
    classNames: ['cs-workspace-intro'],
    classicMode: _ember['default'].computed.alias('service.virtualValues.classicHeaders'),

    actions: {
      switchBack: function switchBack() {
        var _this = this;

        this.get('ui').confirm({
          message: this.get('i18n').t('app.options.confirm-header-switch-back'),
          accept: function accept() {

            var assignments = _this.get('store').peekRecord('option', 'cornerstone_header_assignments');
            var value = assignments.get('value');
            delete value.global;

            var ui = _this.get('ui');
            ui.beginSaveProgress();
            assignments.set('value', value);
            assignments.save().then(function () {
              ui.notify('Header Assignment removed!', 'success');
              ui.endSaveProgress();
              _this.set('classicMode', true);
              _this.get('radio').trigger('option.value.changed');
            });
          },
          acceptClass: 'sad',
          acceptBtn: this.get('i18n').t('app.confirm-yep'),
          declineBtn: this.get('i18n').t('app.confirm-nope')
        });
      }
    }
  });
});
define("cornerstone/components/options/launch-headers/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 6,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/options/launch-headers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("span");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 0, 0);
            return morphs;
          },
          statements: [["inline", "fa-icon", ["external-link"], [], ["loc", [null, [4, 6], [4, 33]]], 0, 0], ["inline", "t", ["app.options.launch-headers"], [], ["loc", [null, [5, 12], [5, 46]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/launch-headers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("You are currently using ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Original Headers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("Assign a global header in the builder to use ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Pro Headers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 14,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/launch-headers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("p");
            var el2 = dom.createTextNode("You are currently using ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Pro Headers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("a");
            var el2 = dom.createTextNode("Switch back to ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("strong");
            var el3 = dom.createTextNode("Original Headers");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [3]);
            var morphs = new Array(1);
            morphs[0] = dom.createElementMorph(element0);
            return morphs;
          },
          statements: [["element", "action", ["switchBack"], [], ["loc", [null, [13, 7], [13, 30]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 15,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/options/launch-headers/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-workspace-actions");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", ["headers"], [], 0, null, ["loc", [null, [3, 4], [6, 16]]]], ["block", "if", [["get", "classicMode", ["loc", [null, [8, 8], [8, 19]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [8, 2], [14, 9]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 16,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/options/launch-headers/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "ui.isPro", ["loc", [null, [1, 6], [1, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [15, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/options/option-search-result/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    isVisible: _ember['default'].computed.alias('control.isVisible'),

    classNames: ['cs-workspace-sections-search-result'],

    nav: _ember['default'].computed('control.section', function () {

      var section = this.get('control.section');
      if (!section) {
        return false;
      }

      var parent = section.get('parent');
      var nav = {
        id: false,
        route: 'options.section',
        label: '&nbsp'
      };

      if (section.get('panel')) {
        nav.id = section.get('id');
        nav.label = section.get('title');
      } else {
        nav.id = parent.get('id');
        nav.sub = section.get('id');
        var labelItems = [parent.get('title'), section.get('title')];

        if (this.get('ui.isRTL')) {
          labelItems.reverse();
          nav.label = labelItems.join(' &larr; ');
        } else {
          nav.label = labelItems.join(' &rarr; ');
        }
      }

      if (!nav.id || 'root' === nav.id) {
        return false;
      }

      return nav;
    }),

    actions: {
      targetSubHeading: function targetSubHeading(subSection) {
        this.get('ui').oneTimeValue('options/search-goto-sub-heading', subSection);
      }
    }

  });
});
define("cornerstone/components/options/option-search-result/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 11
              },
              "end": {
                "line": 2,
                "column": 145
              }
            },
            "moduleName": "cornerstone/components/options/option-search-result/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "nav.label", ["loc", [null, [2, 130], [2, 145]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 2,
              "column": 157
            }
          },
          "moduleName": "cornerstone/components/options/option-search-result/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "nav.route", ["loc", [null, [2, 22], [2, 31]]], 0, 0, 0, 0], ["get", "nav.id", ["loc", [null, [2, 32], [2, 38]]], 0, 0, 0, 0]], ["class", "cs-workspace-section-sub-heading", "invokeAction", ["subexpr", "action", ["targetSubHeading", ["get", "nav.sub", ["loc", [null, [2, 120], [2, 127]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 93], [2, 128]]], 0, 0]], 0, null, ["loc", [null, [2, 11], [2, 157]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 157
            },
            "end": {
              "line": 2,
              "column": 171
            }
          },
          "moduleName": "cornerstone/components/options/option-search-result/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode(" ");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 115
          }
        },
        "moduleName": "cornerstone/components/options/option-search-result/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0], ["block", "if", [["get", "nav", ["loc", [null, [2, 6], [2, 9]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 0], [2, 178]]]], ["inline", "component", [["subexpr", "locate-component", [["subexpr", "concat", ["controls/control-", ["get", "control.type", ["loc", [null, [3, 58], [3, 70]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 30], [3, 72]]], 0, 0], "controls/control-base"], [], ["loc", [null, [3, 12], [3, 97]]], 0, 0]], ["control", ["subexpr", "@mut", [["get", "control", ["loc", [null, [3, 106], [3, 113]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 0], [3, 115]]], 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/options/option-section/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-workspace-sections'],
    classNameBindings: ['name'],
    isVisible: _ember['default'].computed.alias('section.isVisible'),

    name: _ember['default'].computed.alias('section.id'),
    title: _ember['default'].computed.alias('section.title'),
    descriptionComponentPath: _ember['default'].computed('description', function () {
      var description = this.getWithDefault('description', '');
      if (0 === description.indexOf('component:')) {
        var parts = description.split(':');
        return parts[1];
      }
      return false;
    }),

    description: _ember['default'].computed.alias('section.description'),

    didInsertElement: function didInsertElement() {
      var openTo = this.get('openTo');
      if (openTo) {
        _ember['default'].run.scheduleOnce('afterRender', (function () {
          this.set('scrollTo', {
            selector: '.cs-workspace-sections.' + openTo,
            offset: 1
          });
        }).bind(this));
      }
    },

    isRoot: _ember['default'].computed('name', function () {
      return 'root' === this.get('name');
    }),

    breadcrumbs: _ember['default'].computed('section.parent', function () {

      var breadcrumbs = [];
      var parent = this.get('section.parent');

      while (parent && 'root' !== parent.get('id')) {

        breadcrumbs.push({
          route: 'options.section',
          id: parent.get('id'),
          label: parent.get('title')
        });

        parent = parent.get('parent');
      }

      breadcrumbs.reverse();
      breadcrumbs.unshift({
        route: 'options',
        label: this.get('i18n').t('app.options.title')
      });
      // breadcrumbs.push({ label: this.get('title') });

      return breadcrumbs;
    }),

    backUp: _ember['default'].computed('breadcrumbs', function () {
      var breadcrumbs = this.get('breadcrumbs');
      return breadcrumbs.objectAt(breadcrumbs.length - 1); // Set to -2 to restore THIS as a breadcrumb
    })

  });
});
define("cornerstone/components/options/option-section/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 6,
                      "column": 10
                    },
                    "end": {
                      "line": 6,
                      "column": 91
                    }
                  },
                  "moduleName": "cornerstone/components/options/option-section/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("◀");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 5,
                    "column": 8
                  },
                  "end": {
                    "line": 7,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/options/option-section/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "backUp.route", ["loc", [null, [6, 21], [6, 33]]], 0, 0, 0, 0], ["get", "backUp.id", ["loc", [null, [6, 34], [6, 43]]], 0, 0, 0, 0]], ["class", "cs-workspace-section-nav-back"], 0, null, ["loc", [null, [6, 10], [6, 103]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 8,
                      "column": 10
                    },
                    "end": {
                      "line": 8,
                      "column": 81
                    }
                  },
                  "moduleName": "cornerstone/components/options/option-section/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("◀");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 7,
                    "column": 8
                  },
                  "end": {
                    "line": 9,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/options/option-section/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", [["get", "backUp.route", ["loc", [null, [8, 21], [8, 33]]], 0, 0, 0, 0]], ["class", "cs-workspace-section-nav-back"], 0, null, ["loc", [null, [8, 10], [8, 93]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child2 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.8.0",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 12,
                          "column": 98
                        },
                        "end": {
                          "line": 12,
                          "column": 162
                        }
                      },
                      "moduleName": "cornerstone/components/options/option-section/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["content", "breadcrumb.label", ["loc", [null, [12, 142], [12, 162]]], 0, 0, 0, 0]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 12,
                        "column": 73
                      },
                      "end": {
                        "line": 12,
                        "column": 179
                      }
                    },
                    "moduleName": "cornerstone/components/options/option-section/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("li");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["block", "link-to", [["get", "breadcrumb.route", ["loc", [null, [12, 109], [12, 125]]], 0, 0, 0, 0], ["get", "breadcrumb.id", ["loc", [null, [12, 126], [12, 139]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 98], [12, 174]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              var child1 = (function () {
                var child0 = (function () {
                  return {
                    meta: {
                      "revision": "Ember@2.8.0",
                      "loc": {
                        "source": null,
                        "start": {
                          "line": 12,
                          "column": 191
                        },
                        "end": {
                          "line": 12,
                          "column": 241
                        }
                      },
                      "moduleName": "cornerstone/components/options/option-section/template.hbs"
                    },
                    isEmpty: false,
                    arity: 0,
                    cachedFragment: null,
                    hasRendered: false,
                    buildFragment: function buildFragment(dom) {
                      var el0 = dom.createDocumentFragment();
                      var el1 = dom.createComment("");
                      dom.appendChild(el0, el1);
                      return el0;
                    },
                    buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                      var morphs = new Array(1);
                      morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                      dom.insertBoundary(fragment, 0);
                      dom.insertBoundary(fragment, null);
                      return morphs;
                    },
                    statements: [["content", "breadcrumb.label", ["loc", [null, [12, 221], [12, 241]]], 0, 0, 0, 0]],
                    locals: [],
                    templates: []
                  };
                })();
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 12,
                        "column": 179
                      },
                      "end": {
                        "line": 12,
                        "column": 258
                      }
                    },
                    "moduleName": "cornerstone/components/options/option-section/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("li");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["block", "link-to", [["get", "breadcrumb.route", ["loc", [null, [12, 202], [12, 218]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 191], [12, 253]]]]],
                  locals: [],
                  templates: [child0]
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 49
                    },
                    "end": {
                      "line": 12,
                      "column": 265
                    }
                  },
                  "moduleName": "cornerstone/components/options/option-section/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                  dom.insertBoundary(fragment, 0);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["block", "if", [["get", "breadcrumb.id", ["loc", [null, [12, 79], [12, 92]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [12, 73], [12, 265]]]]],
                locals: [],
                templates: [child0, child1]
              };
            })();
            var child1 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 265
                    },
                    "end": {
                      "line": 12,
                      "column": 315
                    }
                  },
                  "moduleName": "cornerstone/components/options/option-section/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createElement("li");
                  var el2 = dom.createElement("span");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]), 0, 0);
                  return morphs;
                },
                statements: [["content", "breadcrumb.label", ["loc", [null, [12, 283], [12, 303]]], 0, 0, 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 12
                  },
                  "end": {
                    "line": 12,
                    "column": 322
                  }
                },
                "moduleName": "cornerstone/components/options/option-section/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "breadcrumb.route", ["loc", [null, [12, 55], [12, 71]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [12, 49], [12, 322]]]]],
              locals: ["breadcrumb"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 17,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/options/option-section/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-workspace-section-nav");
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("div");
              dom.setAttribute(el2, "class", "cs-workspace-section-nav-info");
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("ul");
              dom.setAttribute(el3, "class", "cs-workspace-section-nav-info-breadcrumbs");
              var el4 = dom.createTextNode("\n            ");
              dom.appendChild(el3, el4);
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              var el4 = dom.createTextNode("\n          ");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n          ");
              dom.appendChild(el2, el3);
              var el3 = dom.createElement("h3");
              dom.setAttribute(el3, "class", "cs-workspace-section-nav-info-title");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              var el3 = dom.createTextNode("\n        ");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var element1 = dom.childAt(element0, [3]);
              var morphs = new Array(3);
              morphs[0] = dom.createMorphAt(element0, 1, 1);
              morphs[1] = dom.createMorphAt(dom.childAt(element1, [1]), 1, 1);
              morphs[2] = dom.createUnsafeMorphAt(dom.childAt(element1, [3]), 0, 0);
              return morphs;
            },
            statements: [["block", "if", [["get", "backUp.id", ["loc", [null, [5, 14], [5, 23]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [5, 8], [9, 15]]]], ["block", "each", [["get", "breadcrumbs", ["loc", [null, [12, 20], [12, 31]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [12, 12], [12, 331]]]], ["content", "title", ["loc", [null, [14, 58], [14, 69]]], 0, 0, 0, 0]],
            locals: [],
            templates: [child0, child1, child2]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 18,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/option-section/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "workspace/workspace-header", [], [], 0, null, ["loc", [null, [3, 4], [17, 35]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 19,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/options/option-section/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "section.panel", ["loc", [null, [2, 8], [2, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 2], [18, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 24,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/option-section/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h4");
            dom.setAttribute(el1, "class", "cs-workspace-section-sub-heading");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "title", ["loc", [null, [23, 49], [23, 60]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 26,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/option-section/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["get", "descriptionComponentPath", ["loc", [null, [27, 16], [27, 40]]], 0, 0, 0, 0]], [], ["loc", [null, [27, 4], [27, 42]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child2 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 29,
                  "column": 4
                },
                "end": {
                  "line": 31,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/options/option-section/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              dom.setAttribute(el1, "class", "cs-workspace-section-description");
              var el2 = dom.createElement("span");
              var el3 = dom.createTextNode("Info:");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["content", "description", ["loc", [null, [30, 68], [30, 85]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 28,
                "column": 2
              },
              "end": {
                "line": 32,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/option-section/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "if", [["get", "description", ["loc", [null, [29, 10], [29, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [29, 4], [31, 11]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child3 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 34,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/option-section/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "common/control-list", [], ["controls", ["subexpr", "@mut", [["get", "section.controls", ["loc", [null, [35, 35], [35, 51]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [35, 4], [35, 53]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child4 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 42,
                      "column": 8
                    },
                    "end": {
                      "line": 44,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/options/option-section/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("          ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  return morphs;
                },
                statements: [["content", "child.title", ["loc", [null, [43, 10], [43, 25]]], 0, 0, 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 41,
                    "column": 6
                  },
                  "end": {
                    "line": 45,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/options/option-section/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "link-to", ["options.section", ["get", "child.id", ["loc", [null, [42, 37], [42, 45]]], 0, 0, 0, 0]], ["class", "cs-workspace-section-goto"], 0, null, ["loc", [null, [42, 8], [44, 20]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 45,
                    "column": 6
                  },
                  "end": {
                    "line": 47,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/options/option-section/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "options/option-section", [], ["section", ["subexpr", "@mut", [["get", "child", ["loc", [null, [46, 41], [46, 46]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [46, 8], [46, 48]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 40,
                  "column": 4
                },
                "end": {
                  "line": 48,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/options/option-section/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["get", "child.panel", ["loc", [null, [41, 12], [41, 23]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [41, 6], [47, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 39,
                "column": 2
              },
              "end": {
                "line": 49,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/options/option-section/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "child.isHidden", ["loc", [null, [40, 14], [40, 28]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [40, 4], [48, 15]]]]],
          locals: ["child"],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 0
            },
            "end": {
              "line": 51,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/options/option-section/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
          morphs[3] = dom.createMorphAt(fragment, 7, 7, contextualElement);
          return morphs;
        },
        statements: [["block", "unless", [["get", "section.panel", ["loc", [null, [22, 12], [22, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [22, 2], [24, 13]]]], ["block", "if", [["get", "descriptionComponentPath", ["loc", [null, [26, 8], [26, 32]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [26, 2], [32, 9]]]], ["block", "if", [["get", "section.controls", ["loc", [null, [34, 8], [34, 24]]], 0, 0, 0, 0]], [], 3, null, ["loc", [null, [34, 2], [36, 9]]]], ["block", "each", [["get", "section.children", ["loc", [null, [39, 10], [39, 26]]], 0, 0, 0, 0]], [], 4, null, ["loc", [null, [39, 2], [49, 11]]]]],
        locals: [],
        templates: [child0, child1, child2, child3, child4]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 52,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/options/option-section/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "unless", [["get", "isRoot", ["loc", [null, [1, 10], [1, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [19, 11]]]], ["block", "component", [["subexpr", "if", [["get", "section.panel", ["loc", [null, [20, 17], [20, 30]]], 0, 0, 0, 0], "workspace/workspace-content", "common/scroll-box"], [], ["loc", [null, [20, 13], [20, 81]]], 0, 0]], ["enabled", ["subexpr", "@mut", [["get", "section.panel", ["loc", [null, [20, 90], [20, 103]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollTo", ["subexpr", "@mut", [["get", "scrollTo", ["loc", [null, [20, 113], [20, 121]]], 0, 0, 0, 0]], [], [], 0, 0]], 1, null, ["loc", [null, [20, 0], [51, 14]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/preview/bar-module/component', ['exports', 'ember', 'npm:in-view'], function (exports, _ember, _npmInView) {
  exports['default'] = _ember['default'].Component.extend({

    preview: _ember['default'].inject.service('preview'),
    radio: _ember['default'].inject.service('global/radio'),

    observer: _ember['default'].computed('model.title', function () {
      return JSON.stringify({
        title: this.get('model.title'),
        mode: 'inspect',
        action: { type: 'inspect', id: this.get('model.id') }
      });
    }),

    onInit: _ember['default'].on('init', function () {
      this.set('remoteQuery', this.get('remoteQuery').bind(this));
      this.get('radio').on('element:remote:query', this.get('remoteQuery'));
    }),

    remoteQuery: function remoteQuery(data) {
      if (this.get('model.id') !== data.element) {
        return;
      }

      if (data.type.includes('observer:')) {
        this.get('radio').trigger('preview:' + data.type, this.get('element'));
      }
    },

    renderService: _ember['default'].inject.service('preview/bar-modules'),

    didInsertElement: function didInsertElement() {

      if (this.get('model.id') === this.get('preview.scrollToNewElement')) {

        if (!_npmInView['default'].is(this.get('element'))) {
          this.get('preview').scrollToElement(this.get('element'));
        }

        this.set('preview.scrollToNewElement', null);
      }

      if (_ember['default'].$('style#bar-module-' + this.get('model.id')).length <= 0) {
        this.updateStyle();
      }

      _ember['default'].$(document.body).trigger('cs-preview', {
        type: this.get('model.atts._type'),
        id: this.get('model.id')
      });
    },

    didRender: function didRender() {
      var _this = this;

      this.$('[data-x-toggle]').on('click', function () {
        _this.$().trigger('click');
      });

      this.$('a[href]').on('click', function (e) {
        e.preventDefault();
      });
    },

    observeMarkupUpdate: _ember['default'].observer('model.updateMarkup', 'model.updateAll', function () {
      _ember['default'].run.debounce(this, this.updateMarkup, 115);
    }),

    observeStyleUpdate: _ember['default'].observer('model.updateStyle', 'model.updateAll', function () {
      _ember['default'].run.debounce(this, this.updateStyle, 15);
    }),

    updateMarkup: function updateMarkup() {
      this.get('renderService').updateMarkup(this.get('model'));
    },

    updateStyle: function updateStyle() {
      var _this2 = this;

      var templateFunction = this.get('model.definition.styleTemplate');
      if (!templateFunction) {
        return;
      }

      _ember['default'].run.scheduleOnce('afterRender', function () {

        _ember['default'].$('style#bar-module-' + _this2.get('model.id')).remove();
        var data = _this2.get('model').getCleanAtts();
        var classPrefix = 'footer' === data._region ? 'fm' : 'hm';
        var css = templateFunction(data, classPrefix);
        var $style = _ember['default'].$('<style id="bar-module-' + _this2.get('model.id') + '">' + css + '</style>');

        // TODO: This selector should be passed through a config somehow
        _ember['default'].$('style#x-generated-css').after($style);
      });
    },

    willDestroyElement: function willDestroyElement() {
      this.get('radio').off('element:remote:query', this.get('remoteQuery'));
      _ember['default'].$('style#bar-module-' + this.get('model.id')).remove();
    }

  });
});
define("cornerstone/components/preview/bar-module/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 59
          }
        },
        "moduleName": "cornerstone/components/preview/bar-module/template.hbs"
      },
      isEmpty: true,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        return el0;
      },
      buildRenderNodes: function buildRenderNodes() {
        return [];
      },
      statements: [],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/preview/bar-region/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: '',
    renderService: _ember['default'].inject.service('preview/bar-modules')
  });
});
define("cornerstone/components/preview/bar-region/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/preview/bar-region/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "component", [["subexpr", "dynamic-bar-module", [["subexpr", "bar-module-markup", [["subexpr", "get", [["get", "renderService.cache", ["loc", [null, [5, 30], [5, 49]]], 0, 0, 0, 0], ["subexpr", "concat", ["markup-", ["get", "bar.id", ["loc", [null, [5, 68], [5, 74]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 50], [5, 75]]], 0, 0]], [], ["loc", [null, [5, 25], [5, 77]]], 0, 0], ["get", "bar", ["loc", [null, [5, 78], [5, 81]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 6], [5, 83]]], 0, 0]], ["model", ["get", "bar", ["loc", [null, [6, 12], [6, 15]]], 0, 0, 0, 0]], ["loc", [null, [4, 4], [7, 5]]], 0, 0]], [], ["loc", [null, [3, 2], [8, 4]]], 0, 0]],
        locals: ["bar"],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/bar-region/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0], ["block", "each", [["subexpr", "sort-by", ["order", ["get", "model.children", ["loc", [null, [2, 25], [2, 39]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 8], [2, 40]]], 0, 0]], [], 0, null, ["loc", [null, [2, 0], [9, 9]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/preview/cs-observer/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    radio: _ember['default'].inject.service('global/radio'),
    preview: _ember['default'].inject.service(),
    classNames: ['cs-observer'],
    classNameBindings: ['mode', 'edge'],

    tooltip: _ember['default'].computed('targetData', function () {
      return this.getWithDefault('targetData.title', '');
    }),

    mode: _ember['default'].computed('targetData', function () {
      return this.getWithDefault('targetData.mode', '');
    }),

    edge: _ember['default'].computed('visibleEdges', function () {
      var edges = this.getWithDefault('visibleEdges', 'top left');
      var v = edges.includes('top') ? 'top' : 'bottom';
      if (v === 'bottom' && !edges.includes('bottom ')) {
        v = 'top-inside';
      }
      var h = edges.includes('left') ? 'left' : 'right';
      return v + ' ' + h;
    }),

    updatePosition: function updatePosition() {

      var target = this.get('targetElement');

      if (!target) {
        return;
      }

      // Get our target elements box
      var bounds = target.getBoundingClientRect();

      // Update our visible edges so the tooltip can be repositioned if needed
      var visibleEdges = [];
      var tooltipHeight = 22; //this.$('.cs-observer-tooltip').height();

      if (bounds.top - tooltipHeight >= 0) {
        visibleEdges.push('top');
      }
      if (bounds.right > window.innerWidth) {
        visibleEdges.push('right');
      }
      if (bounds.bottom + tooltipHeight < window.innerHeight) {
        visibleEdges.push('bottom');
      }
      if (bounds.left >= 0) {
        visibleEdges.push('left');
      }
      this.set('visibleEdges', visibleEdges.join(' '));

      // Update our position to overlay the target element
      this.$().css({
        position: 'fixed',
        display: 'block',
        top: bounds.top,
        left: bounds.left,
        width: bounds.width,
        height: bounds.height
      });
    },

    onMouseMove: function onMouseMove(e) {
      e.stopPropagation();
      this.set('nextTarget', e.currentTarget);
      _ember['default'].run.cancel(this.leaving);
      _ember['default'].run.throttle(this, this.newTarget, 115);
    },

    newTarget: function newTarget() {
      var _this = this;

      this.set('targetData', JSON.parse(this.get('nextTarget').getAttribute('data-cs-observeable')));
      this.set('targetElement', this.get('nextTarget'));
      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this.updatePosition();
      });
    },

    onClick: function onClick(e) {
      e.stopPropagation();
      var action = this.get('targetData.action');
      if (action) {
        this.get('preview').message('observer', action);
      }
    },

    onMouseLeave: function onMouseLeave() {
      _ember['default'].run.cancel(this.leaving);
      this.leaving = _ember['default'].run.later(this, function () {
        this.completeLeave();
      }, 100);
    },

    completeLeave: function completeLeave() {
      this.$().css({ display: 'none' });
      this.set('targetData', {});
      this.set('targetElement', null);
    },

    onScroll: function onScroll() {
      this.updatePosition();
    },

    remoteStart: function remoteStart(item) {
      _ember['default'].run.cancel(this.leaving);
      this.set('nextTarget', item);
      this.newTarget();
    },

    remoteEnd: function remoteEnd() /* item */{
      this.completeLeave();
    },

    init: function init() {
      this._super.apply(this, arguments);
      this.set('onScroll', this.get('onScroll').bind(this));
      this.set('onClick', this.get('onClick').bind(this));
      this.set('onMouseMove', this.get('onMouseMove').bind(this));
      this.set('onMouseLeave', this.get('onMouseLeave').bind(this));

      this.set('remoteStart', this.get('remoteStart').bind(this));
      this.set('remoteEnd', this.get('remoteEnd').bind(this));
      this.get('radio').on('preview:observer:start', this.get('remoteStart'));
      this.get('radio').on('preview:observer:end', this.get('remoteEnd'));
    },

    didInsertElement: function didInsertElement() {
      _ember['default'].$(window).on('scroll', this.get('onScroll'));
      _ember['default'].$('body').on('mouseover mouseenter mousemove', '[data-cs-observeable]', this.get('onMouseMove')).on('mouseleave', '[data-cs-observeable]', this.get('onMouseLeave')).on('click', '[data-cs-observeable]', this.get('onClick'));
    },

    willDestroyElement: function willDestroyElement() {
      _ember['default'].$(window).off('scroll', this.get('onScroll'));
      _ember['default'].$('body').off('mouseover mouseenter mousemove', '[data-cs-observeable]', this.get('onMouseMove')).off('mouseleave', '[data-cs-observeable]', this.get('onMouseLeave')).off('click', '[data-cs-observeable]', this.get('onClick'));

      this.get('radio').off('preview:observer:start', this.get('remoteStart'));
      this.get('radio').off('preview:observer:end', this.get('remoteEnd'));
    }
  });
});
define("cornerstone/components/preview/cs-observer/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/cs-observer/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-observer-tooltip");
        var el2 = dom.createElement("span");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]), 0, 0);
        return morphs;
      },
      statements: [["content", "tooltip", ["loc", [null, [1, 39], [1, 50]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/preview/link-targeting/component', ['exports', 'ember', 'npm:url-parse'], function (exports, _ember, _npmUrlParse) {
  var everinit = window.csGlobal.everinit;
  exports['default'] = _ember['default'].Component.extend({

    allowInternal: false,

    didInsertElement: function didInsertElement() {
      var _this = this;

      everinit('a[href]', function (el) {
        var href = el.getAttribute('href');

        if (href && '#' !== href && (!_this.get('allowInternal') || !_this.isInternal(href))) {
          el.setAttribute('target', '_blank');
        }
      });
    },

    host: _ember['default'].computed('ui.defaultPreviewUrl', function () {
      return (0, _npmUrlParse['default'])(this.get('ui.defaultPreviewUrl'), true).host;
    }),

    isInternal: function isInternal(href) {
      return (0, _npmUrlParse['default'])(href, true).host === this.get('host');
    }
  });
});
define("cornerstone/components/preview/link-targeting/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/link-targeting/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/preview/options/options-preview/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    preview: _ember['default'].inject.service(),

    didInsertElement: function didInsertElement() {
      var _this = this;

      this.setupCustomCSS();
      var navigate = function navigate(url) {
        return _this.get('preview').message('navigate', { url: url });
      };

      // TODO: Proper teardown. Current execution wouldn't allow this route to load
      // more than once, but in case we allow navigation later it should cleanup after itself
      this.navigateHandler = function (e) {
        var $this = _ember['default'].$(this);

        if (!event.shiftKey && '#' !== $this.attr('href').substr(0, 1) && '_blank' !== $this.attr('target')) {
          navigate($this.prop('href'));
          e.preventDefault();
        }
      };
      _ember['default'].$('body').on('click', 'a', this.navigateHandler);
    },

    customCSS: _ember['default'].computed.alias('preview.previewPackage.customCSS'),
    customCSSObserver: _ember['default'].observer('customCSS', function () {
      this.updateCustomCSS();
    }),

    setupCustomCSS: function setupCustomCSS() {

      // Find a style tag or create one
      var $style = _ember['default'].$(this.get('config.customCSSSelector'));

      if (0 === $style.length) {
        $style = _ember['default'].$('<style id="cs-generated-custom-css"></style>');
        _ember['default'].$('head').append($style);
      }

      this.set('customCSSEl', $style[0]);

      this.updateCustomCSS();
    },

    updateCustomCSS: function updateCustomCSS() {
      var _this2 = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _ember['default'].$(_this2.get('customCSSEl')).html(_this2.get('customCSS'));
      });
    },

    willDestroyElement: function willDestroyElement() {
      _ember['default'].$('body').off('click', 'a', this.navigateHandler);
      _ember['default'].$('style#x-custom-css').remove();
    }
  });
});
define("cornerstone/components/preview/options/options-preview/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/options/options-preview/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0], ["inline", "preview/link-targeting", [], ["allowInternal", true], ["loc", [null, [2, 0], [2, 45]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/preview/preview-loader/component', ['exports', 'ember'], function (exports, _ember) {
  var $ = _ember['default'].$;
  var assert = _ember['default'].assert;
  var Component = _ember['default'].Component;
  var getOwner = _ember['default'].getOwner;
  exports['default'] = _ember['default'].Component.extend({
    tagName: '',
    zones: {},
    baseAttr: 'cs-preview',
    zoneAttr: 'cs-zone',
    zoneComponent: 'preview/zone-output',
    preview: _ember['default'].inject.service(),
    zonesLoaded: false,

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);

      this.componentsToRender = locateCandidates(this.get('zoneAttr'), this.get('baseAttr'), this.get('zoneComponent')).map(function (item) {
        if (!item.componentName) {
          item.componentName = item.name;
        }
        item.attrs.previewLoader = _this;
        return item;
      });

      this.get('preview').set('loader', this);

      this.renderedComponents = [];
    },

    createComponent: function createComponent(name, attrs) {
      var factory = lookupComponent(getOwner(this), name);
      assert('Preview loader could not find a component named "' + name + '" in your Ember appliction.', factory);
      return factory.create(attrs);
    },

    renderComponent: function renderComponent(_ref) {
      var componentName = _ref.componentName;
      var /* name, */attrs = _ref.attrs;
      var element = _ref.element;

      $(element).empty();

      var componentInstance = this.createComponent(componentName, attrs);
      componentInstance.appendTo(element);
      _ember['default'].run.scheduleOnce('afterRender', function () {
        $(element).contents().unwrap();
      });

      var zoneName = componentInstance.get('zoneName');

      if (zoneName) {
        this.set('zones.' + zoneName, componentInstance);
      }

      return componentInstance;
    },

    didInsertElement: function didInsertElement() {
      var _this2 = this;

      this.renderedComponents = this.componentsToRender.map(this.renderComponent.bind(this));
      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this2.set('zonesLoaded', true);
      });
    },

    didDestroyElement: function didDestroyElement() {
      this.set('zonesLoaded', false);
      this.renderedComponents.forEach(function (renderedComponent) {
        renderedComponent.destroy();
      });
    }
  });

  function locateCandidates(zoneAttr, baseAttr, zoneComponent) {

    var components = [];

    $('[data-' + baseAttr + ']').each(function () {
      var name = this.getAttribute('data-' + baseAttr);

      var attrs = {};

      try {
        if (this.innerHTML) {
          attrs = JSON.parse(this.innerHTML);
        }
      } catch (e) {
        console.warn('Could not load attributes for preview component: ' + name + ' innerHTML was not valid JSON', this.innerHTML);
      }

      components.push({ attrs: attrs, name: name, element: this });
    });

    $('[data-' + zoneAttr + ']').each(function () {

      var name = this.getAttribute('data-' + zoneAttr);
      var attrsJSON = this.getAttribute('data-' + zoneAttr + '-attrs');
      var attrs = attrsJSON ? JSON.parse(attrsJSON) : {};

      attrs.zoneName = _ember['default'].isNone(name) ? 'undefined' : name;
      attrs.innerContent = this.innerHTML;
      var componentName = zoneComponent;
      components.push({ componentName: componentName, attrs: attrs, name: name, element: this });
    });

    return components;
  }

  function lookupComponent(owner, name) {
    var componentLookupKey = 'component:' + name;
    var layoutLookupKey = 'template:components/' + name;
    var layout = owner.lookup(layoutLookupKey);

    if (layout) {
      owner.inject(componentLookupKey, 'layout', layoutLookupKey);
    }

    var component = owner._lookupFactory(componentLookupKey);

    if (layout && !component) {
      owner.register(componentLookupKey, Component);
      component = owner._lookupFactory(componentLookupKey);
    }

    return component;
  }
});
// Based on Ember Islands https://github.com/mitchlloyd/ember-islands/issues/7#issuecomment-241179736
define("cornerstone/components/preview/preview-loader/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/preview-loader/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/preview/region-manager/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    preview: _ember['default'].inject.service(),

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);
      this.get('model.children').forEach(function (region) {

        var regionName = region.get('atts._region');
        var zone = getZone(regionName);
        var residents = _this.get('preview.loader.zones.' + zone + '.residents');
        if (residents) {
          residents.pushObject({
            componentName: 'preview/bar-region',
            model: region
          });
        } else {
          _this.get('preview').notateMissingZone(zone);
          console.log('Could not render region ' + regionName + ' into ' + zone);
        }
      });

      // This will need to be refactored to pull a value off the region
      // model instead of assuming one here. That way region hooks can be
      // configured by the theme.
      function getZone(region) {
        if ('footer' === region) {
          return 'x_colophon';
        }
        return 'x_masthead';
      }
    },

    didInsertElement: function didInsertElement() {
      this.updateCustomCSS();
    },

    customCSS: _ember['default'].computed.alias('preview.previewPackage.customCSS'),
    customCSSObserver: _ember['default'].observer('customCSS', function () {
      this.updateCustomCSS();
    }),

    updateCustomCSS: function updateCustomCSS() {
      var _this2 = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _ember['default'].$('style#bar-custom-css').remove();
        var $style = _ember['default'].$('<style id="bar-custom-css">' + _this2.get('customCSS') + '</style>');
        // TODO: This selector should be passed through a config somehow
        _ember['default'].$('style#x-generated-css').after($style);
      });
    },

    willDestroyElement: function willDestroyElement() {
      _ember['default'].$('style#bar-custom-css').remove();
    }
  });
});
define("cornerstone/components/preview/region-manager/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/region-manager/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/preview/zone-output/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    tagName: '',

    init: function init() {
      this._super.apply(this, arguments);
      this.set('residents', _ember['default'].A());
    },

    actions: {
      residentDidRender: function residentDidRender() {
        // console.log( 'residentDidRender');
      }
    }

  });
});
define("cornerstone/components/preview/zone-output/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/preview/zone-output/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["subexpr", "dynamic-component", [["get", "resident.markup", ["loc", [null, [4, 35], [4, 50]]], 0, 0, 0, 0]], ["tagName", "", "model", ["get", "resident.model", ["loc", [null, [6, 12], [6, 26]]], 0, 0, 0, 0], "didRender", ["subexpr", "action", ["residentDidRender", ["get", "resident", ["loc", [null, [7, 44], [7, 52]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 16], [7, 53]]], 0, 0]], ["loc", [null, [4, 16], [8, 5]]], 0, 0]], [], ["loc", [null, [4, 4], [8, 7]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 11,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/preview/zone-output/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "component", [["get", "resident.componentName", ["loc", [null, [10, 16], [10, 38]]], 0, 0, 0, 0]], ["model", ["subexpr", "@mut", [["get", "resident.model", ["loc", [null, [10, 45], [10, 59]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 4], [10, 61]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/preview/zone-output/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "resident.markup", ["loc", [null, [3, 8], [3, 23]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 2], [11, 9]]]]],
        locals: ["resident"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/zone-output/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "each", [["get", "residents", ["loc", [null, [2, 8], [2, 17]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [12, 9]]]], ["content", "yield", ["loc", [null, [13, 0], [13, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/preview/zone-pipe/component', ['exports', 'ember', 'cornerstone/util/base64'], function (exports, _ember, _cornerstoneUtilBase64) {
  exports['default'] = _ember['default'].Component.extend({
    isVisible: false,
    preview: _ember['default'].inject.service(),
    didInsertElement: function didInsertElement() {

      var markup = '';
      var content = this.$().html();

      try {
        markup = _cornerstoneUtilBase64['default'].decode(JSON.parse(content).markup);
      } catch (e) {
        console.warn('Unable to render zone pipe', content, this);
      }

      this.set('zoneResident', { markup: markup, model: this.get('model') });

      this.get('preview.loader.zones.' + this.get('zone') + '.residents').pushObject(this.get('zoneResident'));
      this.$().detach();
    },

    willDestroyElement: function willDestroyElement() {
      this.get('preview.loader.zones.' + this.get('zone') + '.residents').removeObject(this.get('zoneResident'));
      this.set('zoneResident', null);
    }

  });
});
define("cornerstone/components/preview/zone-pipe/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/preview/zone-pipe/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/regions/hf-assign/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-hf-index-assign'],

    selected: _ember['default'].computed('selectedEntry', 'assignments.value', function () {

      var id = this.get('selectedEntry.id');
      var selectedKeys = [];
      var selected = [];
      var assignments = this.get('assignments.value');
      var assignContexts = this.get('assignContexts');

      for (var key in assignments) {
        if (assignments.hasOwnProperty(key) && id === assignments[key]) {
          selectedKeys.push(key);
        }
      }

      for (var value in assignContexts) {
        if (assignContexts.hasOwnProperty(value) && selectedKeys.includes(value)) {
          assignContexts[value].value = value;
          selected.push(assignContexts[value]);
        }
      }

      if (selectedKeys.includes('global')) {
        selected.push({
          value: 'global'
        });
      }

      return selected;
    }),

    resetSearchScroll: 0,

    init: function init() {
      this._super.apply(this, arguments);

      var search = this.get('ui.search').getTarget('header-assign');

      this.set('searchData', search);

      search.setOptions({
        id: 'id',
        threshold: 0.15,
        distance: 100,
        tokenize: true,
        keys: [{ name: 'title', weight: 0.1 }, { name: 'tag', weight: 0.8 }]
      });

      this.updateSearchIndex();
    },

    updateSearchIndex: function updateSearchIndex() {
      this.get('searchData').updateIndex(this.get('searchable').map(function (item) {
        return { id: item.value, title: item.title, tag: item.tag };
      }));
    },

    searchObserver: _ember['default'].observer('searchable', function () {
      this.updateSearchIndex();
    }),

    isGlobal: _ember['default'].computed('selected', function () {
      return this.get('selected').map(function (item) {
        return item.value;
      }).includes('global');
    }),

    available: _ember['default'].computed('searchable.[]', 'isSearching', 'searchResults.[]', function () {
      return this.get(this.get('isSearching') ? 'searchResults' : 'searchable');
    }),

    searchable: _ember['default'].computed('assignContexts.[]', 'selected.[]', function () {
      var searchable = [];
      var items = this.get('assignContexts');

      var selected = this.get('selected').reduce(function (memo, item) {
        memo.push(item.value);
        return memo;
      }, []);

      for (var value in items) {
        if (selected.includes(items[value].group)) {
          continue;
        }
        items[value].value = value;
        _ember['default'].set(items[value], 'selected', selected.includes(value) || selected.includes(items[value].group));
        searchable.push(items[value]);
      }

      return searchable;
    }),

    isSearching: _ember['default'].computed.alias('searchData.isSearching'),

    searchResults: _ember['default'].computed('searchable', 'searchData.results', function () {

      var results = this.get('searchData.results');

      return this.get('searchable').filter(function (item) {
        return results.includes(item.value);
      });
    }),

    actions: {

      close: function close() {
        this.get('onClose')();
      },

      searchUpdated: function searchUpdated() {
        this.incrementProperty('resetSearchScroll');
      },

      setGlobal: function setGlobal() {
        var _this = this;

        if (this.get('isGlobal')) {
          return;
        }

        var assignments = this.get('assignments');
        var value = assignments.get('value');
        var id = this.get('selectedEntry.id');

        var mode = this.get('context');
        if (value.global) {
          this.get('ui').confirm({
            message: this.get('i18n').t(mode + '.assign-collision-global'),
            accept: function accept() {
              update.call(_this);
            },
            acceptClass: 'sad',
            acceptBtn: this.get('i18n').t(mode + '.assign-collision-global-yep'),
            declineBtn: this.get('i18n').t(mode + '.assign-collision-global-nope')
          });
        } else {
          update.call(this);
        }

        function update() {
          var _this2 = this;

          for (var key in value) {
            if (id === value[key]) {
              delete value[key];
            }
          }

          value.global = id;

          assignments.set('value', value);
          assignments.save().then(function () {
            _this2.get('ui').notify('Assignments saved!', 'success');
          });
        }
      },

      unsetGlobal: function unsetGlobal() {
        this.send('remove', { value: 'global' });
      },

      add: function add(item) {
        var _this3 = this;

        var assignments = this.get('assignments');
        var value = assignments.get('value');
        var id = this.get('selectedEntry.id');
        var localChildren = this.get('selected').filter(function (selected) {
          return selected.group && selected.group === item.value;
        }).map(function (item) {
          return item.value;
        });

        if (value[item.value]) {
          this.get('ui').confirm({
            screen: 'headers',
            message: this.get('i18n').t('headers.assign-collision'),
            accept: function accept() {
              update.call(_this3);
            }
          });
        } else {
          update.call(this);
        }

        function update() {
          var _this4 = this;

          if (value.global === id) {
            delete value.global;
          }

          localChildren.forEach(function (key) {
            delete value[key];
          });

          value[item.value] = id;
          assignments.set('value', value);
          assignments.save().then(function () {
            _this4.get('ui').notify('Assignments saved!', 'success');
          });
        }
      },

      remove: function remove(item) {
        var _this5 = this;

        var assignments = this.get('assignments');
        var value = assignments.get('value');

        delete value[item.value];
        assignments.set('value', value);
        assignments.save().then(function () {
          _this5.get('ui').notify('Assignments saved!', 'success');
        });
      }
    }
  });
});
define("cornerstone/components/regions/hf-assign/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 9,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cs-hf-index-assign-message-global");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("span");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("button");
            var el3 = dom.createTextNode("Remove");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element4 = dom.childAt(fragment, [1]);
            var element5 = dom.childAt(element4, [5]);
            var morphs = new Array(3);
            morphs[0] = dom.createMorphAt(element4, 1, 1);
            morphs[1] = dom.createMorphAt(dom.childAt(element4, [3]), 0, 0);
            morphs[2] = dom.createElementMorph(element5);
            return morphs;
          },
          statements: [["inline", "fa-icon", ["globe"], [], ["loc", [null, [5, 6], [5, 25]]], 0, 0], ["content", "labels.globalMessage", ["loc", [null, [6, 12], [6, 36]]], 0, 0, 0, 0], ["element", "action", ["unsetGlobal"], [], ["loc", [null, [7, 14], [7, 38]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 23,
                        "column": 10
                      },
                      "end": {
                        "line": 23,
                        "column": 87
                      }
                    },
                    "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "cs-hf-index-assignment-meta");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.tag", ["loc", [null, [23, 68], [23, 80]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 20,
                      "column": 8
                    },
                    "end": {
                      "line": 25,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  dom.setAttribute(el1, "class", "cs-hf-index-assignment");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "cs-hf-index-assignment-title");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element2 = dom.childAt(fragment, [1]);
                  var morphs = new Array(3);
                  morphs[0] = dom.createElementMorph(element2);
                  morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 0, 0);
                  morphs[2] = dom.createMorphAt(element2, 3, 3);
                  return morphs;
                },
                statements: [["element", "action", ["remove", ["get", "item", ["loc", [null, [21, 31], [21, 35]]], 0, 0, 0, 0]], [], ["loc", [null, [21, 13], [21, 37]]], 0, 0], ["content", "item.title", ["loc", [null, [22, 53], [22, 67]]], 0, 0, 0, 0], ["block", "if", [["get", "item.tag", ["loc", [null, [23, 16], [23, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [23, 10], [23, 94]]]]],
                locals: ["item"],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 18,
                    "column": 6
                  },
                  "end": {
                    "line": 27,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("      ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "cs-hf-index-assigned");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("      ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["block", "each", [["get", "selected", ["loc", [null, [20, 16], [20, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [20, 8], [25, 17]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 35,
                        "column": 10
                      },
                      "end": {
                        "line": 35,
                        "column": 87
                      }
                    },
                    "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "cs-hf-index-assignment-meta");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.tag", ["loc", [null, [35, 68], [35, 80]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 32,
                      "column": 8
                    },
                    "end": {
                      "line": 37,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "cs-hf-index-assignment-title");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element1 = dom.childAt(fragment, [1]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element1, 'class');
                  morphs[1] = dom.createElementMorph(element1);
                  morphs[2] = dom.createMorphAt(dom.childAt(element1, [1]), 0, 0);
                  morphs[3] = dom.createMorphAt(element1, 3, 3);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["cs-hf-index-assignment cs-hf-index-assignment-assigned ", ["subexpr", "if", [["get", "item.divider", ["loc", [null, [33, 104], [33, 116]]], 0, 0, 0, 0], "cs-hf-index-assignment-first-of-type"], [], ["loc", [null, [33, 99], [33, 157]]], 0, 0], " ", ["subexpr", "if", [["get", "item.highlight", ["loc", [null, [33, 163], [33, 177]]], 0, 0, 0, 0], "cs-hf-index-assignment-highlight"], [], ["loc", [null, [33, 158], [33, 214]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["remove", ["get", "item", ["loc", [null, [33, 31], [33, 35]]], 0, 0, 0, 0]], [], ["loc", [null, [33, 13], [33, 37]]], 0, 0], ["content", "item.title", ["loc", [null, [34, 53], [34, 67]]], 0, 0, 0, 0], ["block", "if", [["get", "item.tag", ["loc", [null, [35, 16], [35, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [35, 10], [35, 94]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            var child1 = (function () {
              var child0 = (function () {
                return {
                  meta: {
                    "revision": "Ember@2.8.0",
                    "loc": {
                      "source": null,
                      "start": {
                        "line": 40,
                        "column": 10
                      },
                      "end": {
                        "line": 40,
                        "column": 87
                      }
                    },
                    "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
                  },
                  isEmpty: false,
                  arity: 0,
                  cachedFragment: null,
                  hasRendered: false,
                  buildFragment: function buildFragment(dom) {
                    var el0 = dom.createDocumentFragment();
                    var el1 = dom.createElement("span");
                    dom.setAttribute(el1, "class", "cs-hf-index-assignment-meta");
                    var el2 = dom.createComment("");
                    dom.appendChild(el1, el2);
                    dom.appendChild(el0, el1);
                    return el0;
                  },
                  buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                    var morphs = new Array(1);
                    morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
                    return morphs;
                  },
                  statements: [["content", "item.tag", ["loc", [null, [40, 68], [40, 80]]], 0, 0, 0, 0]],
                  locals: [],
                  templates: []
                };
              })();
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 37,
                      "column": 8
                    },
                    "end": {
                      "line": 42,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("        ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("div");
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("span");
                  dom.setAttribute(el2, "class", "cs-hf-index-assignment-title");
                  var el3 = dom.createComment("");
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n          ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createComment("");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n        ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element0, 'class');
                  morphs[1] = dom.createElementMorph(element0);
                  morphs[2] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
                  morphs[3] = dom.createMorphAt(element0, 3, 3);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["cs-hf-index-assignment ", ["subexpr", "if", [["get", "item.divider", ["loc", [null, [38, 69], [38, 81]]], 0, 0, 0, 0], "cs-hf-index-assignment-first-of-type"], [], ["loc", [null, [38, 64], [38, 122]]], 0, 0], " ", ["subexpr", "if", [["get", "item.highlight", ["loc", [null, [38, 128], [38, 142]]], 0, 0, 0, 0], "cs-hf-index-assignment-highlight"], [], ["loc", [null, [38, 123], [38, 179]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["add", ["get", "item", ["loc", [null, [38, 28], [38, 32]]], 0, 0, 0, 0]], [], ["loc", [null, [38, 13], [38, 34]]], 0, 0], ["content", "item.title", ["loc", [null, [39, 53], [39, 67]]], 0, 0, 0, 0], ["block", "if", [["get", "item.tag", ["loc", [null, [40, 16], [40, 24]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [40, 10], [40, 94]]]]],
                locals: [],
                templates: [child0]
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 31,
                    "column": 6
                  },
                  "end": {
                    "line": 43,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "if", [["get", "item.selected", ["loc", [null, [32, 14], [32, 27]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [32, 8], [42, 15]]]]],
              locals: ["item"],
              templates: [child0, child1]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 46,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-hf-index-assignment cs-hf-index-assignment-global");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("span");
              var el3 = dom.createTextNode("Make Global");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element3 = dom.childAt(fragment, [1]);
              var morphs = new Array(3);
              morphs[0] = dom.createElementMorph(element3);
              morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
              morphs[2] = dom.createMorphAt(fragment, 5, 5, contextualElement);
              return morphs;
            },
            statements: [["element", "action", ["setGlobal"], [], ["loc", [null, [13, 11], [13, 33]]], 0, 0], ["block", "if", [["get", "selected", ["loc", [null, [18, 12], [18, 20]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [18, 6], [27, 13]]]], ["block", "each", [["get", "available", ["loc", [null, [31, 14], [31, 23]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [31, 6], [43, 15]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 47,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "common/search-bar", [], ["noFocus", true, "target", "header-assign", "placeholder", "Search", "onSearch", ["subexpr", "action", ["searchUpdated"], [], ["loc", [null, [10, 90], [10, 114]]], 0, 0]], ["loc", [null, [10, 4], [10, 116]]], 0, 0], ["block", "common/scroll-box", [], ["linkedSearch", "header-assign"], 0, null, ["loc", [null, [11, 4], [46, 26]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 48,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "isGlobal", ["loc", [null, [3, 8], [3, 16]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 2], [47, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 48,
              "column": 0
            },
            "end": {
              "line": 52,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-hf-index-assign-message-blank");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "labels.blankMessage", ["loc", [null, [50, 10], [50, 33]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 53,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/regions/hf-assign/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "selectedEntry", ["loc", [null, [2, 6], [2, 19]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 0], [52, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/regions/hf-create/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    classNames: ['cs-hf-index-create'],
    templates: [],
    selection: 'none',
    newTitle: '',

    selectionChange: _ember['default'].observer('selection', function () {
      var _this = this;

      if ('none' === this.get('selection')) {
        this.set('newTitle', '');
        return;
      }

      _ember['default'].run.scheduleOnce('afterRender', function () {
        _this.$().find('input[type=text]').focus();
      });
    }),

    actions: {
      create: function create() {
        this.sendAction('onCreate', this.get('selection'), this.get('newTitle'));
      }
    }
  });
});
define("cornerstone/components/regions/hf-create/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 6,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/regions/hf-create/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-hf-index-create-step");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [5]);
          var morphs = new Array(4);
          morphs[0] = dom.createUnsafeMorphAt(dom.childAt(element0, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(element0, 3, 3);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["content", "createMessage", ["loc", [null, [8, 10], [8, 29]]], 0, 0, 0, 0], ["inline", "input", [], ["type", "text", "class", "cs-no-input-focus", "enter", "create", "value", ["subexpr", "@mut", [["get", "newTitle", ["loc", [null, [9, 71], [9, 79]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "titlePlaceholder", ["loc", [null, [9, 92], [9, 108]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [9, 4], [9, 110]]], 0, 0], ["element", "action", ["create"], [], ["loc", [null, [10, 12], [10, 31]]], 0, 0], ["content", "createLabel", ["loc", [null, [10, 32], [10, 47]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/regions/hf-create/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h1");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-hf-index-create-step");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("span");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [2]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 0, 0);
        morphs[1] = dom.createUnsafeMorphAt(dom.childAt(element2, [1]), 0, 0);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["content", "heading", ["loc", [null, [1, 4], [1, 15]]], 0, 0, 0, 0], ["content", "previewMessage", ["loc", [null, [3, 8], [3, 28]]], 0, 0, 0, 0], ["inline", "forms/styled-select", [], ["placeholder", ["subexpr", "@mut", [["get", "templatePlaceholder", ["loc", [null, [4, 36], [4, 55]]], 0, 0, 0, 0]], [], [], 0, 0], "options", ["subexpr", "@mut", [["get", "templateOptions", ["loc", [null, [4, 64], [4, 79]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "selection", ["loc", [null, [4, 86], [4, 95]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [4, 2], [4, 97]]], 0, 0], ["block", "unless", [["subexpr", "eq", [["get", "selection", ["loc", [null, [6, 14], [6, 23]]], 0, 0, 0, 0], "none"], [], ["loc", [null, [6, 10], [6, 31]]], 0, 0]], [], 0, null, ["loc", [null, [6, 0], [12, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/regions/hf-index/component', ['exports', 'ember'], function (exports, _ember) {
  var _slice = Array.prototype.slice;
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-hf-index'],

    sortedEntriesAZ: _ember['default'].computed.sort('entries', function (a, b) {
      return _ember['default'].compare(a.get('title'), b.get('title'));
    }),

    sortedEntries: _ember['default'].computed.sort('sortedEntriesAZ', function (a, b) {
      return _ember['default'].compare(b.get('isNew'), a.get('isNew'));
    }),

    observeSelectedTemplate: _ember['default'].observer('selectedTemplate', function () {
      if ('none' !== this.get('selectedTemplate')) {
        this.set('selected', null);
        this.set('defaultSelected', false);
      }
    }),

    actions: {
      selectEntry: function selectEntry(entry) {
        this.set('defaultSelected', false);
        this.set('selectedTemplate', 'none');
        this.set('selected', this.get('selected.id') === _ember['default'].get(entry, 'id') ? null : entry);
      },
      selectDefault: function selectDefault() {
        this.set('selectedTemplate', 'none');
        this.set('selected', null);

        this.set('defaultSelected', !this.get('defaultSelected'));
      },
      titleUpdate: function titleUpdate() {
        this.sendAction.apply(this, ['onTitleUpdate'].concat(_slice.call(arguments)));
      }
    }
  });
});
define("cornerstone/components/regions/hf-index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/regions/hf-index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        morphs[3] = dom.createMorphAt(fragment, 6, 6, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0], ["inline", "regions/hf-create", [], ["context", ["subexpr", "@mut", [["get", "context", ["loc", [null, [4, 10], [4, 17]]], 0, 0, 0, 0]], [], [], 0, 0], "templateOptions", ["subexpr", "@mut", [["get", "templateOptions", ["loc", [null, [5, 18], [5, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "selection", ["subexpr", "@mut", [["get", "selectedTemplate", ["loc", [null, [6, 12], [6, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "heading", ["subexpr", "@mut", [["get", "createLabels.heading", ["loc", [null, [7, 10], [7, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "previewMessage", ["subexpr", "@mut", [["get", "createLabels.previewMessage", ["loc", [null, [8, 17], [8, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "createMessage", ["subexpr", "@mut", [["get", "createLabels.createMessage", ["loc", [null, [9, 16], [9, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "templatePlaceholder", ["subexpr", "@mut", [["get", "createLabels.templatePlaceholder", ["loc", [null, [10, 22], [10, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "titlePlaceholder", ["subexpr", "@mut", [["get", "createLabels.titlePlaceholder", ["loc", [null, [11, 19], [11, 48]]], 0, 0, 0, 0]], [], [], 0, 0], "createLabel", ["subexpr", "@mut", [["get", "createLabels.createLabel", ["loc", [null, [12, 14], [12, 38]]], 0, 0, 0, 0]], [], [], 0, 0], "onCreate", ["subexpr", "@mut", [["get", "onCreate", ["loc", [null, [13, 11], [13, 19]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 0], [14, 2]]], 0, 0], ["inline", "regions/hf-manage", [], ["context", ["subexpr", "@mut", [["get", "context", ["loc", [null, [17, 10], [17, 17]]], 0, 0, 0, 0]], [], [], 0, 0], "assignContexts", ["subexpr", "@mut", [["get", "assignContexts", ["loc", [null, [18, 17], [18, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "assignments", ["subexpr", "@mut", [["get", "assignments", ["loc", [null, [19, 14], [19, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "sortedEntries", ["subexpr", "@mut", [["get", "sortedEntries", ["loc", [null, [20, 16], [20, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "onAction", ["subexpr", "@mut", [["get", "onAction", ["loc", [null, [21, 11], [21, 19]]], 0, 0, 0, 0]], [], [], 0, 0], "editRoute", ["subexpr", "@mut", [["get", "editRoute", ["loc", [null, [22, 12], [22, 21]]], 0, 0, 0, 0]], [], [], 0, 0], "onSelect", ["subexpr", "action", ["selectEntry"], [], ["loc", [null, [23, 11], [23, 33]]], 0, 0], "onSelectDefault", ["subexpr", "action", ["selectDefault"], [], ["loc", [null, [24, 18], [24, 42]]], 0, 0], "onTitleUpdate", ["subexpr", "action", ["titleUpdate"], [], ["loc", [null, [25, 16], [25, 38]]], 0, 0], "defaultSelected", ["subexpr", "@mut", [["get", "defaultSelected", ["loc", [null, [26, 18], [26, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "selected", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [27, 11], [27, 19]]], 0, 0, 0, 0]], [], [], 0, 0], "defaultItemLabel", ["subexpr", "@mut", [["get", "manageLabels.defaultItem", ["loc", [null, [28, 19], [28, 43]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [16, 0], [29, 2]]], 0, 0], ["inline", "regions/hf-assign", [], ["context", ["subexpr", "@mut", [["get", "context", ["loc", [null, [32, 10], [32, 17]]], 0, 0, 0, 0]], [], [], 0, 0], "assignments", ["subexpr", "@mut", [["get", "assignments", ["loc", [null, [33, 14], [33, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "selectedEntry", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [34, 16], [34, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "assignContexts", ["subexpr", "@mut", [["get", "assignContexts", ["loc", [null, [35, 17], [35, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "labels", ["subexpr", "@mut", [["get", "assignLabels", ["loc", [null, [36, 9], [36, 21]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [31, 0], [37, 2]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/regions/hf-manage/component', ['exports', 'ember'], function (exports, _ember) {
  var _slice = Array.prototype.slice;
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-hf-index-manage'],

    assignmentArray: _ember['default'].computed('assignments.value', function () {
      var assignments = this.get('assignments.value');
      var assignmentArray = [];
      for (var context in assignments) {
        if (assignments.hasOwnProperty(context)) {
          assignmentArray.push({ context: context, id: assignments[context] });
        }
      }
      return assignmentArray;
    }),

    newEntry: 0,
    scrollTo: 0,
    observeNewEntry: _ember['default'].observer('sortedEntries.@each.isNew', function () {
      var _this = this;

      _ember['default'].run.next(function () {
        var entries = _this.get('sortedEntries').filter(function (entry) {
          return entry.get('isNew');
        });
        if (entries && _ember['default'].get(entries, 'length') > 0) {

          _ember['default'].run.next('afterRender', function () {
            _this.set('scrollTo', {
              start: true,
              duration: 250,
              reset: true
            });
          });
        }
      });
    }),

    entries: _ember['default'].computed('assignmentArray.[]', 'sortedEntries.[]', function () {
      var _this2 = this;

      var assignments = this.get('assignmentArray');
      var assignContexts = this.get('assignContexts');

      return this.get('sortedEntries').map(function (entry) {

        var assignmentLabel = _this2.get('i18n').t('app.assignments.unassigned').string;
        var assigned = assignments.filter(function (assignment) {
          return assignment.id === '' + entry.get('id');
        });

        if (1 === assigned.length) {

          if ('global' === assigned[0].context) {
            assignmentLabel = _this2.get('i18n').t('app.assignments.global').string;
          } else if (assignContexts[assigned[0].context]) {

            var context = assignContexts[assigned[0].context];

            if (context.tag) {
              assignmentLabel = _this2.get('i18n').t('app.assignments.tagged', { tag: context.tag, title: context.title }).string;
            } else {
              assignmentLabel = context.title;
            }
          }
        } else if (1 < assigned.length) {
          assignmentLabel = _this2.get('i18n').t('app.assignments.multiple-assignments').string;
        }

        return { model: entry, meta: assignmentLabel };
      });
    }),

    actions: {
      button: function button() {
        this.sendAction.apply(this, ['onAction'].concat(_slice.call(arguments)));
      },
      select: function select() {
        this.sendAction.apply(this, ['onSelect'].concat(_slice.call(arguments)));
      },
      titleUpdate: function titleUpdate() {
        this.sendAction.apply(this, ['onTitleUpdate'].concat(_slice.call(arguments)));
      },
      selectDefault: function selectDefault() {
        this.sendAction('onSelectDefault');
      }
    }
  });
});
define("cornerstone/components/regions/hf-manage/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 6
                  },
                  "end": {
                    "line": 12,
                    "column": 48
                  }
                },
                "moduleName": "cornerstone/components/regions/hf-manage/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("Edit");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 4,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/regions/hf-manage/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createTextNode("Copy");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createTextNode("Delete");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element1 = dom.childAt(fragment, [3]);
              var element2 = dom.childAt(fragment, [5]);
              var morphs = new Array(4);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              morphs[1] = dom.createElementMorph(element1);
              morphs[2] = dom.createAttrMorph(element2, 'class');
              morphs[3] = dom.createElementMorph(element2);
              return morphs;
            },
            statements: [["block", "link-to", [["get", "editRoute", ["loc", [null, [12, 17], [12, 26]]], 0, 0, 0, 0], ["get", "entry.model.id", ["loc", [null, [12, 27], [12, 41]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 6], [12, 60]]]], ["element", "action", ["button", "entryDuplicate", ["get", "entry.model", ["loc", [null, [13, 49], [13, 60]]], 0, 0, 0, 0]], ["bubbles", false], ["loc", [null, [13, 14], [13, 77]]], 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["get", "ui.deleteConfirm", ["loc", [null, [14, 108], [14, 124]]], 0, 0, 0, 0], "cs-danger"], [], ["loc", [null, [14, 102], [14, 138]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["button", "entryDelete", ["get", "entry.model", ["loc", [null, [14, 46], [14, 57]]], 0, 0, 0, 0]], ["allowedKeys", "shift", "bubbles", false], ["loc", [null, [14, 14], [14, 94]]], 0, 0]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/regions/hf-manage/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "common/index-entry", [], ["title", ["subexpr", "@mut", [["get", "entry.model.title", ["loc", [null, [5, 12], [5, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "meta", ["subexpr", "@mut", [["get", "entry.meta", ["loc", [null, [6, 11], [6, 21]]], 0, 0, 0, 0]], [], [], 0, 0], "selected", ["subexpr", "eq", [["get", "entry.model.id", ["loc", [null, [7, 19], [7, 33]]], 0, 0, 0, 0], ["get", "selected.id", ["loc", [null, [7, 34], [7, 45]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 15], [7, 46]]], 0, 0], "isNew", ["subexpr", "@mut", [["get", "entry.model.isNew", ["loc", [null, [8, 12], [8, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["select", ["get", "entry.model", ["loc", [null, [9, 30], [9, 41]]], 0, 0, 0, 0]], [], ["loc", [null, [9, 13], [9, 42]]], 0, 0], "titleUpdate", ["subexpr", "action", ["titleUpdate", ["get", "entry.model", ["loc", [null, [10, 40], [10, 51]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 18], [10, 53]]], 0, 0]], 0, null, ["loc", [null, [4, 4], [15, 27]]]]],
          locals: ["entry"],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 4
                },
                "end": {
                  "line": 24,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/regions/hf-manage/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("button");
              var el2 = dom.createTextNode("Edit");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element0 = dom.childAt(fragment, [1]);
              var morphs = new Array(1);
              morphs[0] = dom.createElementMorph(element0);
              return morphs;
            },
            statements: [["element", "action", ["button", "createDefault"], [], ["loc", [null, [23, 14], [23, 50]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 25,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/regions/hf-manage/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "common/index-entry", [], ["title", ["subexpr", "@mut", [["get", "defaultItemLabel", ["loc", [null, [18, 12], [18, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "meta", "Default", "action", ["subexpr", "action", ["selectDefault"], [], ["loc", [null, [20, 13], [20, 37]]], 0, 0], "selected", ["subexpr", "@mut", [["get", "defaultSelected", ["loc", [null, [21, 15], [21, 30]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [17, 4], [24, 27]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 27,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/regions/hf-manage/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "each", [["get", "entries", ["loc", [null, [3, 10], [3, 17]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [3, 2], [25, 11]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 28,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/regions/hf-manage/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "common/scroll-box", [], ["resetScrollOn", ["subexpr", "@mut", [["get", "newEntry", ["loc", [null, [1, 35], [1, 43]]], 0, 0, 0, 0]], [], [], 0, 0], "scrollTo", ["subexpr", "@mut", [["get", "scrollTo", ["loc", [null, [1, 53], [1, 61]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [1, 0], [27, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/templates/colors/color-list/component', ['exports', 'ember'], function (exports, _ember) {
  // import uuid from 'npm:uuid';

  exports['default'] = _ember['default'].Component.extend({

    tagName: '',

    store: _ember['default'].inject.service(),
    colorService: _ember['default'].inject.service('templates/colors'),
    activeColorItems: _ember['default'].computed.filterBy('colorItems', 'isDeleted', false),
    orderedColorItems: _ember['default'].computed.sort('activeColorItems', 'orderSort'),

    orderSort: ['order'],

    invalidItemsMessage: _ember['default'].observer('invalidItems.[]', function () {
      if (this.get('invalidItems.length') > 0) {
        return this.get('ui').notify('Two colors selections can not share the same name.', 'error');
      }
    }),

    invalidItems: _ember['default'].computed('orderedColorItems.@each._id', function () {

      var ids = this.get('orderedColorItems').map(function (item) {
        return item.get('_id');
      });

      var invalid = [];

      while (ids.length > 0) {
        var id = ids.pop();
        if (ids.includes(id)) {
          invalid.push(id);
        }
      }

      return invalid;
    }),

    nameInUse: function nameInUse(name) {
      return this.get('colorItems').any(function (item) {
        return name === item.get('title');
      });
    },

    actions: {
      selectColor: function selectColor(item) {
        this.set('selectedItem', item);
      },
      addNew: function addNew() {

        var order = this.get('colorItems.length') + 1;

        var newColor = { value: this.get('colorService').makeRandomColor() };

        newColor.order = order;

        newColor.title = this.get('i18n').t('app.colors.new-title', { index: order }).string;

        while (this.nameInUse(newColor.title)) {
          newColor.title = this.get('i18n').t('app.colors.new-title', { index: order++ }).string;
        }

        this.get('store').createRecord('templates/colors/selection', newColor);
      },
      moveColor: function moveColor(item, order) {

        var start = item.get('order');

        if (start < order) {
          // Moving down
          this.get('orderedColorItems').forEach(function (item, index) {
            if (index > start && index <= order) {
              item.set('order', index - 1);
            }
          });
        } else {
          // Moving up
          this.get('orderedColorItems').forEach(function (item, index) {
            if (index < start && index >= order) {
              item.set('order', index + 1);
            }
          });
        }

        item.set('order', order);
      },
      duplicateItem: function duplicateItem(item) {

        // Duplicate the existing item
        var duplicate = item.serialize();
        var index = item.get('order') + 1;

        duplicate.title = this.get('i18n').t('app.copy-of', { title: item.get('title') }).string;
        duplicate.order = this.get('orderedColorItems.length');
        delete duplicate._id;

        // Ensure the title is unique
        var copyIndex = 1;
        var copiedTitle = duplicate.title;
        while (this.nameInUse(duplicate.title)) {
          // something of the same title exists
          duplicate.title = this.get('i18n').t('app.copy-of-numeric', {
            title: copiedTitle,
            index: copyIndex++
          }).string;
        }

        // Create the record and move into position
        var newColor = this.get('store').createRecord('templates/colors/selection', duplicate);

        this.send('moveColor', newColor, index);
      },
      deleteItem: function deleteItem(item) {
        var _this = this;

        this.get('ui').confirm({
          screen: 'global',
          message: 'Are you sure you would like to delete this color selection?', // this.get('i18n').t('headers.entry-delete-confirm'),
          acceptClass: 'sad',
          accept: function accept() {
            item.deleteRecord();
            _this.get('ui').notify('Color selection deleted');
            _this.get('orderedColorItems').forEach(function (item, index) {
              item.set('order', index);
            });
          }
        });
      }
    }
  });
});
define("cornerstone/components/templates/colors/color-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 3,
                "column": 75
              }
            },
            "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("◀");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 12
              },
              "end": {
                "line": 6,
                "column": 45
              }
            },
            "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Templates");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-workspace-section-nav");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "cs-workspace-section-nav-info");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3, "class", "cs-workspace-section-nav-info-breadcrumbs");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "cs-workspace-section-nav-info-title");
          var el4 = dom.createTextNode("Colors");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-workspace-actions");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("Add New");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1, 1]), 0, 0);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["templates"], ["class", "cs-workspace-section-nav-back"], 0, null, ["loc", [null, [3, 4], [3, 87]]]], ["block", "link-to", ["templates"], [], 1, null, ["loc", [null, [6, 12], [6, 57]]]], ["element", "action", ["addNew"], [], ["loc", [null, [12, 12], [12, 31]]], 0, 0], ["inline", "fa-icon", ["plus-square"], [], ["loc", [null, [12, 32], [12, 57]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 8
                  },
                  "end": {
                    "line": 32,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "common/sortable-item", [], ["active", ["subexpr", "eq", [["get", "colorItem.id", ["loc", [null, [22, 23], [22, 35]]], 0, 0, 0, 0], ["get", "selectedItem.id", ["loc", [null, [22, 36], [22, 51]]], 0, 0, 0, 0]], [], ["loc", [null, [22, 19], [22, 52]]], 0, 0], "item", ["subexpr", "@mut", [["get", "colorItem", ["loc", [null, [23, 17], [23, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "label", ["subexpr", "@mut", [["get", "colorItem.title", ["loc", [null, [24, 18], [24, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "labelInvalid", ["subexpr", "contains", [["get", "colorItem._id", ["loc", [null, [25, 35], [25, 48]]], 0, 0, 0, 0], ["get", "invalidItems", ["loc", [null, [25, 49], [25, 61]]], 0, 0, 0, 0]], [], ["loc", [null, [25, 25], [25, 62]]], 0, 0], "labelPlaceholder", "Double click to name...", "onDrop", ["subexpr", "action", ["moveColor"], [], ["loc", [null, [27, 19], [27, 40]]], 0, 0], "onSelect", ["subexpr", "action", ["selectColor", ["get", "colorItem", ["loc", [null, [28, 43], [28, 52]]], 0, 0, 0, 0]], [], ["loc", [null, [28, 21], [28, 53]]], 0, 0], "onDuplicate", ["subexpr", "action", ["duplicateItem", ["get", "colorItem", ["loc", [null, [29, 48], [29, 57]]], 0, 0, 0, 0]], [], ["loc", [null, [29, 24], [29, 59]]], 0, 0], "onDelete", ["subexpr", "action", ["deleteItem", ["get", "colorItem", ["loc", [null, [30, 42], [30, 51]]], 0, 0, 0, 0]], [], ["loc", [null, [30, 21], [30, 53]]], 0, 0]], ["loc", [null, [21, 10], [31, 12]]], 0, 0]],
              locals: ["colorItem"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "orderedColorItems", ["loc", [null, [20, 16], [20, 33]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [20, 8], [32, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "cs-controls");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "cs-control cs-control-sortable");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "common/sortable-container", [], [], 0, null, ["loc", [null, [19, 6], [33, 36]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/workspace-content", [], ["name", "colors", "resetScrollOn", ["subexpr", "@mut", [["get", "orderedColorItems", ["loc", [null, [16, 61], [16, 78]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [16, 2], [36, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [38, 2], [38, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/colors/color-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "workspace/workspace-header", [], [], 0, null, ["loc", [null, [1, 0], [14, 31]]]], ["block", "if", [["get", "colorItems", ["loc", [null, [15, 6], [15, 16]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [15, 0], [39, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/components/templates/colors/color-manager/color-choice/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: 'cs-color-choice',
    inlineStyle: _ember['default'].computed('item.value', function () {
      return _ember['default'].String.htmlSafe('background-color: ' + this.get('item.value') + ';');
    })
  });
});
define("cornerstone/components/templates/colors/color-manager/color-choice/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/colors/color-manager/color-choice/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "cs-color-choice-color");
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("span");
        dom.setAttribute(el1, "class", "cs-color-choice-label");
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'style');
        morphs[1] = dom.createMorphAt(dom.childAt(fragment, [2]), 0, 0);
        return morphs;
      },
      statements: [["attribute", "style", ["get", "inlineStyle", ["loc", [null, [1, 44], [1, 55]]], 0, 0, 0, 0], 0, 0, 0, 0], ["content", "item.title", ["loc", [null, [2, 36], [2, 50]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/templates/colors/color-manager/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-colors'],

    activeColorItems: _ember['default'].computed.filterBy('colorItems', 'isDeleted', false),
    orderedColorItems: _ember['default'].computed.sort('activeColorItems', 'orderSort'),

    orderSort: ['order'],
    actions: {
      stateChange: function stateChange(item, state) {
        if (state) {
          this.set('selectedItem', item);
        } else {
          if (item.get('id') === this.get('selectedItem.id')) {
            this.set('selectedItem', null);
          }
        }
      }
    }
  });
});
define("cornerstone/components/templates/colors/color-manager/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/templates/colors/color-manager/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "forms/color-input", [], ["inline", true, "value", ["subexpr", "@mut", [["get", "item.value", ["loc", [null, [11, 40], [11, 50]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [11, 2], [11, 52]]], 0, 0]],
          locals: ["picker"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/colors/color-manager/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "common/cs-picker", [], ["externalOpen", ["subexpr", "eq", [["get", "item.id", ["loc", [null, [4, 21], [4, 28]]], 0, 0, 0, 0], ["get", "selectedItem.id", ["loc", [null, [4, 29], [4, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 17], [4, 45]]], 0, 0], "onStateChange", ["subexpr", "action", ["stateChange", ["get", "item", ["loc", [null, [5, 40], [5, 44]]], 0, 0, 0, 0]], [], ["loc", [null, [5, 18], [5, 45]]], 0, 0], "contentComponent", ["subexpr", "component", ["templates/colors/color-manager/color-choice"], ["item", ["subexpr", "@mut", [["get", "item", ["loc", [null, [8, 11], [8, 15]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 21], [9, 5]]], 0, 0]], 0, null, ["loc", [null, [3, 2], [12, 23]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 14,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/colors/color-manager/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "common/welcome-message", [], ["title", ["subexpr", "t", ["app.colors.empty-message"], [], ["loc", [null, [15, 33], [15, 63]]], 0, 0]], ["loc", [null, [15, 2], [15, 66]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/colors/color-manager/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "orderedColorItems", ["loc", [null, [1, 8], [1, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [1, 0], [16, 9]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/templates/fonts/config-modal/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    fontConfig: _ember['default'].computed.alias('config.value'),

    actions: {
      save: function save() {
        var _this = this;

        this.get('config').save().then(function (response) {
          _ember['default'].Logger.info('Saved font configuration', response);
          _this.get('ui').notify('Font configuration saved!', 'success');
        }, function (error) {
          _ember['default'].Logger.warn('Unable to save font configuration', error);
          _this.get('ui').notify('Unable to save font configuration.', 'error');
        });
      }
    }
  });
});
define('cornerstone/components/templates/fonts/config-modal/tab-custom/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    detectFonts: _ember['default'].observer('customFontFaceCSS', function () {
      _ember['default'].run.debounce(this, this.dofontDetection, 50);
    }),

    dofontDetection: function dofontDetection() {}

  });
});
define("cornerstone/components/templates/fonts/config-modal/tab-custom/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 20,
              "column": 4
            },
            "end": {
              "line": 26,
              "column": 4
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-custom/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("table");
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          var el3 = dom.createElement("th");
          var el4 = dom.createTextNode("Fonts");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("th");
          var el4 = dom.createTextNode("Weights");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          var el3 = dom.createElement("td");
          var el4 = dom.createTextNode("Nexa");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("td");
          var el4 = dom.createTextNode("300, 700");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("tr");
          var el3 = dom.createElement("td");
          var el4 = dom.createTextNode("Raleway");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("td");
          var el4 = dom.createTextNode("100");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 26,
              "column": 4
            },
            "end": {
              "line": 28,
              "column": 4
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-custom/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          dom.setAttribute(el1, "style", "width: 100%;");
          var el2 = dom.createTextNode("No custom font faces could be detected from your input.");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-custom/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("@font-face");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("Include custom fonts via ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("@font-face");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" here. To do so, upload your fonts to your server, and set your ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("@font-face");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("src: url()");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" line items to the location of your uploaded font files. Ensure that you also specify a ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("font-family");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(", ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("font-weight");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(", and ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("code");
        var el3 = dom.createTextNode("font-style");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" as well. We will take your input and add your fonts as options in the Fonts Manager. Our ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("a");
        dom.setAttribute(el2, "href", "#");
        var el3 = dom.createTextNode("Knowledge Base");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" has an in-depth tutorial on filling in this content if you have any questions.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("dl");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("Family");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("URL");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("Weight");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("Style");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("@font-face Declarations");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("Available Fonts");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createTextNode("\n");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [4]);
        var morphs = new Array(6);
        morphs[0] = dom.createMorphAt(dom.childAt(element0, [3]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element0, [7]), 0, 0);
        morphs[2] = dom.createMorphAt(dom.childAt(element0, [11]), 0, 0);
        morphs[3] = dom.createMorphAt(dom.childAt(element0, [15]), 0, 0);
        morphs[4] = dom.createMorphAt(dom.childAt(element0, [19]), 0, 0);
        morphs[5] = dom.createMorphAt(dom.childAt(element0, [23]), 1, 1);
        return morphs;
      },
      statements: [["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "new.family", ["loc", [null, [5, 32], [5, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "'My Font',sans-serif"], ["loc", [null, [5, 6], [5, 79]]], 0, 0], ["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "new.url", ["loc", [null, [8, 32], [8, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "http://www.myadomain.com/myfont.ttf"], ["loc", [null, [8, 6], [8, 91]]], 0, 0], ["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "new.weight", ["loc", [null, [11, 32], [11, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "400"], ["loc", [null, [11, 6], [11, 62]]], 0, 0], ["inline", "input", [], ["type", "text", "value", ["subexpr", "@mut", [["get", "new.weight", ["loc", [null, [14, 32], [14, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", "400"], ["loc", [null, [14, 6], [14, 62]]], 0, 0], ["inline", "textarea", [], ["value", ["subexpr", "@mut", [["get", "config.customFontFaceCSS", ["loc", [null, [17, 23], [17, 47]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ""], ["loc", [null, [17, 6], [17, 64]]], 0, 0], ["block", "if", [["get", "detectedFonts", ["loc", [null, [20, 10], [20, 23]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [20, 4], [28, 11]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/templates/fonts/config-modal/tab-google/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    additionalSubsets: [{ value: 'arabic', label: 'Arabic' }, { value: 'bengali', label: 'Bengali' }, { value: 'cyrillic', label: 'Cyrillic' }, { value: 'cyrillic-ext', label: 'Cyrillic Extended' }, { value: 'devanagari', label: 'Devanagari' }, { value: 'greek', label: 'Greek' }, { value: 'greek-ext', label: 'Greek Extended' }, { value: 'gujarati', label: 'Gujarati' }, { value: 'gurmukhi', label: 'Gurmkhi' }, { value: 'hebrew', label: 'Hebrew' }, { value: 'kannada', label: 'Kannada' }, { value: 'khmer', label: 'Khmer' }, { value: 'malayalam', label: 'Malayalam' }, { value: 'myanmar', label: 'Myanmar' }, { value: 'oriya', label: 'Oriya' }, { value: 'sinhala', label: 'Sinhala' }, { value: 'tamil', label: 'Tamil' },
    // { value: 'telegu',       label: 'Telegu' }, // Prevents Google Fonts from loading when active
    { value: 'thai', label: 'Thai' }, { value: 'vietnamese', label: 'Vietnamese' }]
  });
});
define("cornerstone/components/templates/fonts/config-modal/tab-google/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 13,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-google/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Character Subsets");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("Specify which Google Fonts character subsets you would like to enable below. All subsets included extended support. Latin is always loaded by default.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("dl");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("Enable Font Subsets");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [4, 3]), 1, 1);
        return morphs;
      },
      statements: [["inline", "forms/select-multi", [], ["placeholder", "Additional Subsets", "options", ["subexpr", "@mut", [["get", "additionalSubsets", ["loc", [null, [8, 14], [8, 31]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "fontConfig.googleSubsets", ["loc", [null, [9, 12], [9, 36]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [6, 4], [10, 6]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/templates/fonts/config-modal/tab-typekit/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    errorMessage: null,
    typekitItems: _ember['default'].computed('fontConfig.typekitItems.[]', function () {
      return this.getWithDefault('fontConfig.typekitItems', _ember['default'].A()).map(function (item) {
        return {
          family: item.family,
          weights: item.weights.filter(function (weight) {
            return !weight.includes('i');
          }).join(', ')
        };
      });
    }),

    refreshDisabled: _ember['default'].computed('refreshing', function () {
      return this.get('refreshing') ? true : null;
    }),

    updateTypeKit: function updateTypeKit() {
      var _this = this;

      if (_ember['default'].isArray(this.get('fontConfig.typekitItems'))) {
        this.get('fontConfig.typekitItems').clear();
      } else {
        this.set('fontConfig.typekitItems', _ember['default'].A());
      }

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        var url = 'https://typekit.com/api/v1/json/kits/' + _this.get('fontConfig.typekitKitID') + '/published?callback=?';

        _ember['default'].$.getJSON(url).then(function (data) {

          if (data.errors) {
            return reject(data.errors);
          }

          data.kit.families.map(function (family) {
            return {
              family: family.name,
              stack: family.css_stack.replace(';', ''),
              weights: family.variations.map(function (variant) {
                var isItalic = 'i' === variant.substr(0, 1) ? 'i' : '';
                return variant.substr(1, 1) + '00' + isItalic;
              })
            };
          }).forEach(function (kitItem) {
            _this.get('fontConfig.typekitItems').addObject(kitItem);
          });

          resolve();
        });
      });
    },

    actions: {
      refresh: function refresh() {
        var _this2 = this;

        this.set('error', false);
        this.set('refreshing', true);
        this.updateTypeKit().then(function () {
          _this2.set('refreshing', false);
        }, function (error) {
          _this2.set('refreshing', false);
          _this2.set('error', true);
          console.warn('Typekit error', error);
        });
      }
    }
  });
});
define("cornerstone/components/templates/fonts/config-modal/tab-typekit/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 12,
                "column": 8
              },
              "end": {
                "line": 14,
                "column": 8
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createElement("th");
            var el3 = dom.createTextNode("Fonts");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("th");
            var el3 = dom.createTextNode("Weights");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 15,
                  "column": 10
                },
                "end": {
                  "line": 17,
                  "column": 10
                }
              },
              "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "colspan", "2");
              var el3 = dom.createTextNode("Please enter your kit ID above and click refresh.");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 17,
                  "column": 10
                },
                "end": {
                  "line": 19,
                  "column": 10
                }
              },
              "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("            ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("tr");
              var el2 = dom.createElement("td");
              dom.setAttribute(el2, "colspan", "2");
              var el3 = dom.createTextNode("Your kit was not found. Please check to make sure the kit ID is correct and try again.");
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 8
              },
              "end": {
                "line": 20,
                "column": 8
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "error", ["loc", [null, [15, 20], [15, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [15, 10], [19, 21]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child2 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 21,
                "column": 8
              },
              "end": {
                "line": 23,
                "column": 8
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
          },
          isEmpty: false,
          arity: 1,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("        ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("tr");
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("td");
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var element0 = dom.childAt(fragment, [1]);
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(element0, [0]), 0, 0);
            morphs[1] = dom.createMorphAt(dom.childAt(element0, [1]), 0, 0);
            return morphs;
          },
          statements: [["content", "item.family", ["loc", [null, [22, 16], [22, 31]]], 0, 0, 0, 0], ["content", "item.weights", ["loc", [null, [22, 40], [22, 56]]], 0, 0, 0, 0]],
          locals: ["item"],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 11,
              "column": 6
            },
            "end": {
              "line": 24,
              "column": 6
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "typekitItems", ["loc", [null, [12, 14], [12, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [12, 8], [20, 15]]]], ["block", "each", [["get", "typekitItems", ["loc", [null, [21, 16], [21, 28]]], 0, 0, 0, 0]], [], 2, null, ["loc", [null, [21, 8], [23, 17]]]]],
        locals: [],
        templates: [child0, child1, child2]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 6
            },
            "end": {
              "line": 26,
              "column": 6
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("        ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("tr");
          var el2 = dom.createElement("td");
          dom.setAttribute(el2, "colspan", "2");
          var el3 = dom.createTextNode("Refreshing…");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 31,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/fonts/config-modal/tab-typekit/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("h3");
        var el2 = dom.createTextNode("Kit Integration");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("p");
        var el2 = dom.createTextNode("To integrate your Typekit font kits on this website, enter your Typekit kit ID into the input below. You can find your kit ID by logging into Typekit, clicking on ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("Kits");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" and then looking for the ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("strong");
        var el3 = dom.createTextNode("Kit ID");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode(" text next to your kit name.");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("dl");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("Typekit Kit ID");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dt");
        var el3 = dom.createTextNode("Available Fonts");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("dd");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("table");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("button");
        dom.setAttribute(el3, "class", "cs-btn cs-btn-sm");
        var el4 = dom.createTextNode("Refresh");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element1 = dom.childAt(fragment, [4]);
        var element2 = dom.childAt(element1, [8]);
        var element3 = dom.childAt(element2, [3]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(dom.childAt(element1, [4]), 0, 0);
        morphs[1] = dom.createMorphAt(dom.childAt(element2, [1]), 1, 1);
        morphs[2] = dom.createAttrMorph(element3, 'disabled');
        morphs[3] = dom.createElementMorph(element3);
        return morphs;
      },
      statements: [["inline", "input", [], ["value", ["subexpr", "@mut", [["get", "fontConfig.typekitKitID", ["loc", [null, [7, 20], [7, 43]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [7, 6], [7, 45]]], 0, 0], ["block", "unless", [["get", "refreshing", ["loc", [null, [11, 16], [11, 26]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [11, 6], [26, 17]]]], ["attribute", "disabled", ["get", "refreshDisabled", ["loc", [null, [28, 23], [28, 38]]], 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["refresh"], [], ["loc", [null, [28, 66], [28, 86]]], 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("cornerstone/components/templates/fonts/config-modal/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 14,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/config-modal/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "templates/fonts/config-modal/tab-google", [], ["fontConfig", ["subexpr", "@mut", [["get", "fontConfig", ["loc", [null, [15, 57], [15, 67]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [15, 4], [15, 69]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/config-modal/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "templates/fonts/config-modal/tab-typekit", [], ["fontConfig", ["subexpr", "@mut", [["get", "fontConfig", ["loc", [null, [19, 58], [19, 68]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [19, 4], [19, 70]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 26,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/config-modal/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["block", "if", [["subexpr", "eq", [["get", "modal.activeTab", ["loc", [null, [14, 12], [14, 27]]], 0, 0, 0, 0], "google-fonts"], [], ["loc", [null, [14, 8], [14, 43]]], 0, 0]], [], 0, null, ["loc", [null, [14, 2], [16, 9]]]], ["block", "if", [["subexpr", "eq", [["get", "modal.activeTab", ["loc", [null, [18, 12], [18, 27]]], 0, 0, 0, 0], "typekit"], [], ["loc", [null, [18, 8], [18, 38]]], 0, 0]], [], 1, null, ["loc", [null, [18, 2], [20, 9]]]]],
        locals: ["modal"],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 27,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/fonts/config-modal/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "common/tab-modal", [], ["active", ["subexpr", "@mut", [["get", "ui.showFontConfig", ["loc", [null, [2, 9], [2, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "onSave", ["subexpr", "action", ["save"], [], ["loc", [null, [3, 9], [3, 24]]], 0, 0], "panels", ["subexpr", "array", [["subexpr", "hash", [], ["name", "google-fonts", "label", "Google Fonts"], ["loc", [null, [5, 4], [5, 51]]], 0, 0], ["subexpr", "hash", [], ["name", "typekit", "label", "Typekit"], ["loc", [null, [6, 4], [6, 41]]], 0, 0]], [], ["loc", [null, [4, 9], [7, 3]]], 0, 0]], 0, null, ["loc", [null, [1, 0], [26, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/templates/fonts/font-list/component', ['exports', 'ember'], function (exports, _ember) {
  // import uuid from 'npm:uuid';

  exports['default'] = _ember['default'].Component.extend({

    tagName: '',

    store: _ember['default'].inject.service(),
    fontService: _ember['default'].inject.service('templates/fonts'),
    activeFontItems: _ember['default'].computed.filterBy('fontItems', 'isDeleted', false),
    orderedFontItems: _ember['default'].computed.sort('activeFontItems', 'orderSort'),

    orderSort: ['order'],

    invalidItemsMessage: _ember['default'].observer('invalidItems.[]', function () {
      if (this.get('invalidItems.length') > 0) {
        return this.get('ui').notify('Two fonts selections can not share the same name.', 'error');
      }
    }),

    invalidItems: _ember['default'].computed('orderedFontItems.@each._id', function () {

      var ids = this.get('orderedFontItems').map(function (item) {
        return item.get('_id');
      });

      var invalid = [];

      while (ids.length > 0) {
        var id = ids.pop();
        if (ids.includes(id)) {
          invalid.push(id);
        }
      }

      return invalid;
    }),

    nameInUse: function nameInUse(name) {
      return this.get('fontItems').any(function (item) {
        return name === item.get('title');
      });
    },

    actions: {
      selectFont: function selectFont(item) {
        this.set('selectedItem', item);
      },
      addNew: function addNew() {

        var order = this.get('fontItems.length') + 1;
        var newFont = _ember['default'].copy(this.getWithDefault('fontService.fallbackFont', {}));
        newFont.order = order;

        newFont.title = this.get('i18n').t('app.fonts.new-title', { index: order }).string;

        while (this.nameInUse(newFont.title)) {
          newFont.title = this.get('i18n').t('app.fonts.new-title', { index: order++ }).string;
        }

        this.get('store').createRecord('templates/fonts/selection', newFont);
      },
      moveFont: function moveFont(item, order) {

        var start = item.get('order');

        if (start < order) {
          // Moving down
          this.get('orderedFontItems').forEach(function (item, index) {
            if (index > start && index <= order) {
              item.set('order', index - 1);
            }
          });
        } else {
          // Moving up
          this.get('orderedFontItems').forEach(function (item, index) {
            if (index < start && index >= order) {
              item.set('order', index + 1);
            }
          });
        }

        item.set('order', order);
      },
      duplicateItem: function duplicateItem(item) {

        // Duplicate the existing item
        var duplicate = item.serialize();
        var index = item.get('order') + 1;

        duplicate.title = this.get('i18n').t('app.copy-of', { title: item.get('title') }).string;
        duplicate.order = this.get('orderedFontItems.length');
        delete duplicate._id;

        // Ensure the title is unique
        var copyIndex = 1;
        var copiedTitle = duplicate.title;
        while (this.nameInUse(duplicate.title)) {
          // something of the same title exists
          duplicate.title = this.get('i18n').t('app.copy-of-numeric', {
            title: copiedTitle,
            index: copyIndex++
          }).string;
        }

        // Create the record and move into position
        var newFont = this.get('store').createRecord('templates/fonts/selection', duplicate);

        this.send('moveFont', newFont, index);
      },
      deleteItem: function deleteItem(item) {
        var _this = this;

        if (this.get('orderedFontItems.length') <= 1) {

          this.get('ui').confirm({
            noSkip: true,
            back: true,
            screen: 'global',
            message: 'You need at least one font. Create another before deleting this one.' });

          // this.get('i18n').t('headers.entry-delete-confirm'),
          return;
        }

        this.get('ui').confirm({
          screen: 'global',
          message: 'Are you sure you would like to delete this font selection?', // this.get('i18n').t('headers.entry-delete-confirm'),
          acceptClass: 'sad',
          accept: function accept() {
            item.deleteRecord();
            _this.get('ui').notify('Font selection deleted');
            _this.get('orderedFontItems').forEach(function (item, index) {
              item.set('order', index);
            });
          }
        });
      }
    }
  });
});
define("cornerstone/components/templates/fonts/font-list/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 3,
                "column": 75
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("◀");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 6,
                "column": 12
              },
              "end": {
                "line": 6,
                "column": 45
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("Templates");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-workspace-section-nav");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("div");
          dom.setAttribute(el2, "class", "cs-workspace-section-nav-info");
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("ul");
          dom.setAttribute(el3, "class", "cs-workspace-section-nav-info-breadcrumbs");
          var el4 = dom.createTextNode("\n        ");
          dom.appendChild(el3, el4);
          var el4 = dom.createElement("li");
          var el5 = dom.createComment("");
          dom.appendChild(el4, el5);
          dom.appendChild(el3, el4);
          var el4 = dom.createTextNode("\n      ");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n      ");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("h3");
          dom.setAttribute(el3, "class", "cs-workspace-section-nav-info-title");
          var el4 = dom.createTextNode("Fonts");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          var el3 = dom.createTextNode("\n    ");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-workspace-actions");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("Add New");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(fragment, [3, 1]);
          var morphs = new Array(4);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createMorphAt(dom.childAt(element0, [3, 1, 1]), 0, 0);
          morphs[2] = dom.createElementMorph(element1);
          morphs[3] = dom.createMorphAt(element1, 0, 0);
          return morphs;
        },
        statements: [["block", "link-to", ["templates"], ["class", "cs-workspace-section-nav-back"], 0, null, ["loc", [null, [3, 4], [3, 87]]]], ["block", "link-to", ["templates"], [], 1, null, ["loc", [null, [6, 12], [6, 57]]]], ["element", "action", ["addNew"], [], ["loc", [null, [12, 12], [12, 31]]], 0, 0], ["inline", "fa-icon", ["plus-square"], [], ["loc", [null, [12, 32], [12, 57]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 20,
                    "column": 8
                  },
                  "end": {
                    "line": 32,
                    "column": 8
                  }
                },
                "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
              },
              isEmpty: false,
              arity: 1,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("          ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "common/sortable-item", [], ["active", ["subexpr", "eq", [["get", "fontItem.id", ["loc", [null, [22, 23], [22, 34]]], 0, 0, 0, 0], ["get", "selectedItem.id", ["loc", [null, [22, 35], [22, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [22, 19], [22, 51]]], 0, 0], "item", ["subexpr", "@mut", [["get", "fontItem", ["loc", [null, [23, 17], [23, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "label", ["subexpr", "@mut", [["get", "fontItem.title", ["loc", [null, [24, 18], [24, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "labelInvalid", ["subexpr", "contains", [["get", "fontItem._id", ["loc", [null, [25, 35], [25, 47]]], 0, 0, 0, 0], ["get", "invalidItems", ["loc", [null, [25, 48], [25, 60]]], 0, 0, 0, 0]], [], ["loc", [null, [25, 25], [25, 61]]], 0, 0], "labelPlaceholder", "Double click to name...", "onDrop", ["subexpr", "action", ["moveFont"], [], ["loc", [null, [27, 19], [27, 39]]], 0, 0], "onSelect", ["subexpr", "action", ["selectFont", ["get", "fontItem", ["loc", [null, [28, 42], [28, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [28, 21], [28, 51]]], 0, 0], "onDuplicate", ["subexpr", "action", ["duplicateItem", ["get", "fontItem", ["loc", [null, [29, 48], [29, 56]]], 0, 0, 0, 0]], [], ["loc", [null, [29, 24], [29, 58]]], 0, 0], "onDelete", ["subexpr", "action", ["deleteItem", ["get", "fontItem", ["loc", [null, [30, 42], [30, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [30, 21], [30, 52]]], 0, 0]], ["loc", [null, [21, 10], [31, 12]]], 0, 0]],
              locals: ["fontItem"],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 19,
                  "column": 6
                },
                "end": {
                  "line": 33,
                  "column": 6
                }
              },
              "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "each", [["get", "orderedFontItems", ["loc", [null, [20, 16], [20, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [20, 8], [32, 17]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 36,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "cs-controls");
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("li");
            dom.setAttribute(el2, "class", "cs-control cs-control-sortable");
            var el3 = dom.createTextNode("\n");
            dom.appendChild(el2, el3);
            var el3 = dom.createComment("");
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode("    ");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n  ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1, 1]), 1, 1);
            return morphs;
          },
          statements: [["block", "common/sortable-container", [], [], 0, null, ["loc", [null, [19, 6], [33, 36]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 37,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/workspace-content", [], ["name", "fonts", "resetScrollOn", ["subexpr", "@mut", [["get", "orderedFontItems", ["loc", [null, [16, 60], [16, 76]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [16, 2], [36, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 37,
              "column": 0
            },
            "end": {
              "line": 39,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "yield", ["loc", [null, [38, 2], [38, 11]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/fonts/font-list/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "workspace/workspace-header", [], [], 0, null, ["loc", [null, [1, 0], [14, 31]]]], ["block", "if", [["get", "fontItems", ["loc", [null, [15, 6], [15, 15]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [15, 0], [39, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/components/templates/fonts/font-manager/component', ['exports', 'ember', 'cornerstone/data/googlefonts', 'cornerstone/data/systemfonts'], function (exports, _ember, _cornerstoneDataGooglefonts, _cornerstoneDataSystemfonts) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-fonts'],

    fontService: _ember['default'].inject.service('templates/fonts'),
    config: _ember['default'].inject.service('config'),

    didInsertElement: function didInsertElement() {
      // this.updatePreviewWeight();
    },

    fontDefinition: _ember['default'].computed('selectedItem.family', function () {

      var fontList = [];
      var definition = { source: this.get('selectedItem.source') };

      if ('custom' === definition.source) {
        fontList = this.getWithDefault('fontConfig.customItems', []);
      }

      if ('typekit' === definition.source) {
        fontList = this.getWithDefault('fontConfig.typekitItems', []);
      }

      if ('system' === definition.source) {
        fontList = _cornerstoneDataSystemfonts['default'];
      }

      if ('google' === definition.source) {
        fontList = _cornerstoneDataGooglefonts['default'];
      }

      var family = this.get('selectedItem.family');

      var lookup = fontList.find(function (item) {
        return item.family === family;
      });

      return _ember['default'].isNone(lookup) ? this.get('fontService.fallbackFont') : _ember['default'].assign(definition, lookup);
    }),

    availableWeights: _ember['default'].computed('fontDefinition', function () {
      var _this = this;

      var weightHash = this.get('fontDefinition.weights').reduce(function (memo, weight) {

        var key = weight.includes('i') ? weight.replace('i', '') : weight;
        if (!memo[key]) {
          memo[key] = {
            value: key,
            label: key,
            textLabel: _this.get('i18n').t('app.font-weight.' + key)
          };
        } else {
          if (_ember['default'].isArray(memo[key].value)) {
            memo[key].value.push(weight);
          } else {
            memo[key].value = [memo[key].value, weight];
          }
        }

        return memo;
      }, {});

      var weights = [];
      for (var key in weightHash) {
        weights.push(weightHash[key]);
      }

      return weights;
    }),

    availableWeightsChanged: _ember['default'].observer('fontDefinition.weights.[]', function () {
      var _this2 = this;

      _ember['default'].run.scheduleOnce('afterRender', function () {

        var availableWeights = _this2.get('fontDefinition.weights');

        // Remove invalid weights
        _this2.set('selectedItem.weights', _this2.get('selectedItem.weights').filter(function (weight) {
          return availableWeights.includes(weight);
        }));

        _this2.updatePreviewWeight();
      });
    }),

    updatePreviewWeight: function updatePreviewWeight() {
      var availableWeights = this.get('fontDefinition.weights');
      if (!availableWeights.includes(this.get('previewWeight'))) {
        this.set('previewWeight', availableWeights.includes('400') ? '400' : availableWeights[0]);
      }
    },

    selectedFamily: _ember['default'].computed('selectedItem.source', 'selectedItem.family', {
      get: function get() {
        return this.get('selectedItem.source') + ':' + this.get('selectedItem.family');
      },
      set: function set(key, value) {

        if ('string' !== typeof value) {
          return value;
        }

        var selected = this.get('selectChoices').find(function (choice) {
          return choice.value === value;
        });

        this.set('selectedItem.source', value.split(':').shift());
        this.set('selectedItem.family', selected.label);
        this.set('selectedItem.stack', selected.stack);
        return value;
      }
    }),

    selectChoices: _ember['default'].computed('fontConfig.typekitItems.[]', 'fontConfig.customItems.[]', function () {

      var choices = [];

      this.getWithDefault('fontConfig.customItems', []).forEach(function (item) {
        choices.push({ value: 'custom:' + item.family, label: item.family, stack: item.stack, group: 'Custom Fonts' });
      });

      this.getWithDefault('fontConfig.typekitItems', []).forEach(function (item) {
        choices.push({ value: 'typekit:' + item.family, label: item.family, stack: item.stack, group: 'Typekit' });
      });

      _cornerstoneDataSystemfonts['default'].forEach(function (item) {
        choices.push({ value: 'system:' + item.family, label: item.family, stack: item.stack, group: 'System Fonts' });
      });

      _cornerstoneDataGooglefonts['default'].forEach(function (item) {
        choices.push({ value: 'google:' + item.family, label: item.family, stack: item.stack, group: 'Google Fonts' });
      });

      return choices;
    }),

    actions: {
      preview: function preview(weight) {
        this.set('previewWeight', _ember['default'].isArray(weight) ? weight[0].replace('i', '') : weight);
      }
    }

  });
});
define("cornerstone/components/templates/fonts/font-manager/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 7,
                "column": 8
              },
              "end": {
                "line": 9,
                "column": 8
              }
            },
            "moduleName": "cornerstone/components/templates/fonts/font-manager/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("          ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("strong");
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode(" | ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["content", "weight.label", ["loc", [null, [8, 18], [8, 34]]], 0, 0, 0, 0], ["content", "weight.textLabel", ["loc", [null, [8, 46], [8, 66]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 5,
              "column": 6
            },
            "end": {
              "line": 12,
              "column": 6
            }
          },
          "moduleName": "cornerstone/components/templates/fonts/font-manager/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("      ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("li");
          var el2 = dom.createTextNode("\n");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("        ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("button");
          var el3 = dom.createElement("span");
          var el4 = dom.createTextNode("Preview");
          dom.appendChild(el3, el4);
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n      ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var element0 = dom.childAt(fragment, [1]);
          var element1 = dom.childAt(element0, [3]);
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(element0, 1, 1);
          morphs[1] = dom.createAttrMorph(element1, 'class');
          morphs[2] = dom.createAttrMorph(element1, 'onClick');
          return morphs;
        },
        statements: [["block", "forms/rc-choice", [], ["value", ["subexpr", "@mut", [["get", "selectedItem.weights", ["loc", [null, [7, 33], [7, 53]]], 0, 0, 0, 0]], [], [], 0, 0], "arrayVal", ["subexpr", "@mut", [["get", "weight.value", ["loc", [null, [7, 63], [7, 75]]], 0, 0, 0, 0]], [], [], 0, 0], "wide", true, "mode", "array"], 0, null, ["loc", [null, [7, 8], [9, 28]]]], ["attribute", "class", ["concat", ["cs-fonts-weight-preview ", ["subexpr", "if", [["subexpr", "eq", [["get", "previewWeight", ["loc", [null, [10, 56], [10, 69]]], 0, 0, 0, 0], ["get", "weight.label", ["loc", [null, [10, 70], [10, 82]]], 0, 0, 0, 0]], [], ["loc", [null, [10, 52], [10, 83]]], 0, 0], "cs-active"], [], ["loc", [null, [10, 47], [10, 97]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "onClick", ["subexpr", "action", ["preview", ["get", "weight.value", ["loc", [null, [10, 126], [10, 138]]], 0, 0, 0, 0]], [], ["loc", [null, [null, null], [10, 140]]], 0, 0], 0, 0, 0, 0]],
        locals: ["weight"],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/fonts/font-manager/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-fonts-manager");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createElement("div");
        dom.setAttribute(el2, "class", "cs-fonts-settings");
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createComment("");
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n    ");
        dom.appendChild(el2, el3);
        var el3 = dom.createElement("ul");
        dom.setAttribute(el3, "class", "cs-fonts-weights");
        var el4 = dom.createTextNode("\n");
        dom.appendChild(el3, el4);
        var el4 = dom.createComment("");
        dom.appendChild(el3, el4);
        var el4 = dom.createTextNode("    ");
        dom.appendChild(el3, el4);
        dom.appendChild(el2, el3);
        var el3 = dom.createTextNode("\n  ");
        dom.appendChild(el2, el3);
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element2 = dom.childAt(fragment, [0]);
        var element3 = dom.childAt(element2, [1]);
        var morphs = new Array(4);
        morphs[0] = dom.createMorphAt(element3, 1, 1);
        morphs[1] = dom.createMorphAt(dom.childAt(element3, [3]), 1, 1);
        morphs[2] = dom.createMorphAt(element2, 3, 3);
        morphs[3] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        return morphs;
      },
      statements: [["inline", "forms/select-single", [], ["placeholder", "Select a Font Family", "options", ["subexpr", "@mut", [["get", "selectChoices", ["loc", [null, [3, 69], [3, 82]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "selectedFamily", ["loc", [null, [3, 89], [3, 103]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 4], [3, 105]]], 0, 0], ["block", "each", [["get", "availableWeights", ["loc", [null, [5, 14], [5, 30]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 6], [12, 15]]]], ["inline", "templates/fonts/preview-area", [], ["fontConfig", ["subexpr", "@mut", [["get", "fontConfig", ["loc", [null, [15, 44], [15, 54]]], 0, 0, 0, 0]], [], [], 0, 0], "fontDefinition", ["subexpr", "@mut", [["get", "fontDefinition", ["loc", [null, [15, 70], [15, 84]]], 0, 0, 0, 0]], [], [], 0, 0], "selectedWeight", ["subexpr", "@mut", [["get", "previewWeight", ["loc", [null, [15, 100], [15, 113]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [15, 2], [15, 115]]], 0, 0], ["content", "yield", ["loc", [null, [17, 0], [17, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/components/templates/fonts/preview-area/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-fonts-preview'],

    fonts: _ember['default'].inject.service('templates/fonts'),

    didInsertElement: function didInsertElement() {
      this.loadFont();
    },
    styleUpdated: 0,

    loadFont: function loadFont() {
      var _this = this;

      this.get('fonts').loadFont(this.get('fontDefinition')).then(function () {
        _this.incrementProperty('styleUpdated');
      }, function (errors) {
        console.warn('The font manager was unable to load the requested fonts', errors);
      });
    },

    loadFontOnChange: _ember['default'].observer('fontDefinition.family', 'fontConfig.googleSubsets.[]', function () {
      this.loadFont();
    }),

    style: _ember['default'].computed('styleUpdated', 'selectedWeight', function () {
      return _ember['default'].String.htmlSafe('font-family:' + this.get('fontDefinition.stack') + ';font-weight:' + this.get('selectedWeight') + ';');
    })
  });
});
define("cornerstone/components/templates/fonts/preview-area/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/templates/fonts/preview-area/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "contenteditable", "true");
        var el2 = dom.createTextNode("Click here to type and preview your font selection...");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [2]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createAttrMorph(element0, 'style');
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0], ["attribute", "style", ["get", "style", ["loc", [null, [2, 36], [2, 41]]], 0, 0, 0, 0], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/workspace/cs-workspace/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-workspace'],
    classNameBindings: ['name']
  });
});
define("cornerstone/components/workspace/cs-workspace/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/workspace/cs-workspace/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/workspace/workspace-content/component', ['exports', 'cornerstone/components/common/scroll-box/component'], function (exports, _cornerstoneComponentsCommonScrollBoxComponent) {
  exports['default'] = _cornerstoneComponentsCommonScrollBoxComponent['default'].extend({
    classNames: ['cs-workspace-content']
  });
});
// import Ember from 'ember';
define("cornerstone/components/workspace/workspace-content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/workspace/workspace-content/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/workspace/workspace-controls/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({

    orientation: 'horizontal',
    isHorizontal: _ember['default'].computed('orientation', function () {
      return 'horizontal' === this.get('orientation');
    }),

    classNames: ['cs-workspace-controls'],
    classNameBindings: ['isSearching:cs-searching'],

    didReceiveAttrs: function didReceiveAttrs() {
      this.set('searchData', this.get('ui.search').getTarget(this.get('searchTarget')));
      this.set('activeGroup', this.get('visibleGroups.firstObject.name'));
      this.set('activeSubGroup', this.get('visibleSubGroups.firstObject.name'));
      this.notifyPropertyChange('activeGroup');
      this.notifyPropertyChange('activeSubGroup');

      this.get('searchData').setOptions({
        id: 'id',
        threshold: 0.15,
        distance: 50,
        tokenize: true,
        keys: [{ name: 'title', weight: 0.1 }]
      });

      this.updateSearchIndex();
    },

    isSearching: _ember['default'].computed.alias('searchData.isSearching'),

    reindexSearch: _ember['default'].observer('controls.@each.indexLabel', function () {
      this.updateSearchIndex();
    }),

    updateSearchIndex: function updateSearchIndex() {
      this.get('searchData').updateIndex(this.getWithDefault('controls', []).map(function (entry) {
        return { id: _ember['default'].get(entry, 'id'), title: _ember['default'].get(entry, 'indexLabel') };
      }));
    },

    actions: {

      selectGroup: function selectGroup(name) {

        var tiers = name.split(':');
        var topLevel = tiers.shift();
        this.set('searchData.query', '');
        this.set('activeGroup', topLevel);

        if (topLevel === name) {
          this.set('activeSubGroup', this.get('visibleSubGroups.firstObject.name'));
        } else {
          this.set('activeSubGroup', name);
        }

        _ember['default'].run.scheduleOnce('afterRender', (function () {
          this.set('scrollTo', {
            selector: '[data-cs-control-group-name="' + name + '"].cs-control:not(.cs-hide)',
            offset: 0,
            horizontal: this.get('isHorizontal')
          });
        }).bind(this));
      },

      searchNavigate: function searchNavigate(control) {

        this.set('searchData.query', '');

        if (this.get('groups')) {
          var tiers = control.group.split(':');
          var topLevel = tiers.shift();
          this.set('activeGroup', topLevel);
        }

        _ember['default'].run.later(this, (function () {
          this.set('scrollTo', {
            selector: '[data-cs-control-id="' + _ember['default'].get(control, 'id') + '"].cs-control',
            offset: 0,
            horizontal: this.get('isHorizontal')
          });
        }).bind(this), 200);
      },

      onScroll: function onScroll(scrollBoxComponent, scrollBoxEl) {
        var _this = this;

        if (this.isDestroyed) {
          return;
        }
        var groups = this.get('visibleSubGroups');

        if (this.get('isSearching') || scrollBoxComponent.get('isScrollingTo') || !groups) {
          return;
        }

        var group = groups.map(function (item) {

          var $group = window.jQuery('[data-cs-control-group-name="' + item.name + '"].cs-control:not(.cs-hide)');
          var $last = $group.last();
          var $first = $group.first();

          if ($group.length <= 0 || !scrollBoxEl) {
            return false;
          }

          return {
            top: $first.position().top + scrollBoxEl.scrollTop,
            left: $first.position().left + scrollBoxEl.scrollLeft,
            bottom: $last.position().top + $last.outerHeight() + scrollBoxEl.scrollTop,
            right: $last.position().left + $last.outerWidth() + scrollBoxEl.scrollLeft,
            name: item.name
          };
        }).find(function (item) {

          if (!item) {
            return false;
          }

          if (_this.get('isHorizontal')) {
            return scrollBoxEl.scrollLeft + 1 >= item.left && scrollBoxEl.scrollLeft + 1 < item.right;
          } else {
            return scrollBoxEl.scrollTop + 1 >= item.top && scrollBoxEl.scrollTop + 1 < item.bottom;
          }
        });

        if (group && group.name) {

          this.set('activeSubGroup', group.name);
        }
      }
    },

    deselectGroup: _ember['default'].observer('searchData.isSearching', function () {
      if (this.get('searchData.isSearching')) {
        this.set('activeGroup', '');
      } else {
        this.set('activeGroup', this.get('visibleGroups.firstObject.name'));
      }
    }),

    showNoResultsMessage: _ember['default'].computed('noResults', 'isSearching', function () {
      return this.get('noResults') && this.get('isSearching');
    }),

    hiddenControlObserver: _ember['default'].observer('hiddenControls', function () {
      var _this2 = this;

      _ember['default'].run.next(function () {
        _ember['default'].run.scheduleOnce('afterRender', function () {
          if (_this2.get('searchData.isSearching')) {
            _this2.set('noResults', 0 === _this2.$('.cs-control:not(.cs-hide)').length);
          }
          _this2.incrementProperty('scrollResetInc');
        });
      });
    }),

    hiddenControls: _ember['default'].computed('activeGroup', 'searchData.isSearching', 'searchData.results', function () {
      var _this3 = this;

      if (!this.get('searchData.isSearching')) {
        var _ret = (function () {

          var activeGroup = _this3.get('activeGroup');

          return {
            v: _this3.getWithDefault('controls', _ember['default'].A()).filter(function (control) {
              var group = _ember['default'].get(control, 'group');
              if (group && activeGroup) {
                var tiers = group.split(':');
                var topLevel = tiers.shift();
                if (activeGroup !== topLevel) {
                  return true;
                }
              }
              return false;
            }).map(function (control) {
              return _ember['default'].get(control, 'id');
            })
          };
        })();

        if (typeof _ret === 'object') return _ret.v;
      }

      var results = this.get('searchData.results');

      return this.getWithDefault('controls', _ember['default'].A()).filter(function (control) {
        return !results.includes(_ember['default'].get(control, 'id'));
      }).map(function (control) {
        return _ember['default'].get(control, 'id');
      });
    }),

    visibleSubGroups: _ember['default'].computed('activeGroup', 'visibleGroups.[]', function () {

      var activeGroup = this.get('activeGroup');

      var active = this.get('visibleGroups').find(function (group) {
        return activeGroup === group.name;
      });

      if (_ember['default'].isNone(active)) {
        return null;
      }

      return _ember['default'].getWithDefault(active, 'children', []);
    }),

    visibleGroups: _ember['default'].computed('tieredGroups.[]', 'controls.@each.excluded', function () {
      if (!this.get('controls')) {
        debugger;
      }

      var visible = this.get('controls').filter(function (control) {
        return !control.get('excluded');
      }).map(function (control) {
        return control.get('group');
      }).uniq();

      return this.get('tieredGroups').map(function (group) {
        var children = [];
        if (group.children) {
          children = group.children.filter(function (child) {
            return visible.includes(child.name);
          });
        }
        if (_ember['default'].isEmpty(children) && !visible.includes(group.name)) {
          return null;
        }
        return {
          name: group.name,
          title: group.title,
          children: children
        };
      }).filter(_ember['default'].isPresent);
    }),

    tieredGroups: _ember['default'].computed('groups.[]', function () {

      var groups = {};

      var flatGroups = this.get('groups');
      if (!flatGroups) {
        console.warn('groups not set', this);
        return _ember['default'].A();
      }

      flatGroups.forEach(function (group) {

        if (group.parent) {

          if (!groups[group.parent]) {
            groups[group.parent] = {};
          }

          if (!groups[group.parent].children) {
            groups[group.parent].children = _ember['default'].A();
          }

          groups[group.parent].children.push(group);
        } else {
          if (!groups[group.name]) {
            groups[group.name] = {};
          }
          groups[group.name].name = group.name;
          groups[group.name].title = group.title;
        }
      });

      var list = _ember['default'].A();

      for (var key in groups) {
        if (groups.hasOwnProperty(key)) {
          list.push(groups[key]);
        }
      }

      return list;
    })

  });
});
define("cornerstone/components/workspace/workspace-controls/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 10,
                      "column": 16
                    },
                    "end": {
                      "line": 14,
                      "column": 16
                    }
                  },
                  "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
                },
                isEmpty: false,
                arity: 1,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("                  ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createElement("li");
                  var el2 = dom.createTextNode("\n                    ");
                  dom.appendChild(el1, el2);
                  var el2 = dom.createElement("a");
                  var el3 = dom.createElement("span");
                  var el4 = dom.createComment("");
                  dom.appendChild(el3, el4);
                  dom.appendChild(el2, el3);
                  dom.appendChild(el1, el2);
                  var el2 = dom.createTextNode("\n                  ");
                  dom.appendChild(el1, el2);
                  dom.appendChild(el0, el1);
                  var el1 = dom.createTextNode("\n");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var element0 = dom.childAt(fragment, [1]);
                  var element1 = dom.childAt(element0, [1]);
                  var morphs = new Array(4);
                  morphs[0] = dom.createAttrMorph(element0, 'class');
                  morphs[1] = dom.createAttrMorph(element1, 'class');
                  morphs[2] = dom.createElementMorph(element1);
                  morphs[3] = dom.createMorphAt(dom.childAt(element1, [0]), 0, 0);
                  return morphs;
                },
                statements: [["attribute", "class", ["concat", ["cs-workspace-control-navigation-group ", ["subexpr", "if", [["subexpr", "eq", [["get", "child.name", ["loc", [null, [11, 76], [11, 86]]], 0, 0, 0, 0], ["get", "activeSubGroup", ["loc", [null, [11, 87], [11, 101]]], 0, 0, 0, 0]], [], ["loc", [null, [11, 72], [11, 102]]], 0, 0], "cs-active"], [], ["loc", [null, [11, 67], [11, 116]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["attribute", "class", ["concat", [["subexpr", "if", [["subexpr", "eq", [["get", "child.name", ["loc", [null, [12, 39], [12, 49]]], 0, 0, 0, 0], ["get", "activeGroup", ["loc", [null, [12, 50], [12, 61]]], 0, 0, 0, 0]], [], ["loc", [null, [12, 35], [12, 62]]], 0, 0], "cs-active"], [], ["loc", [null, [12, 30], [12, 76]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["selectGroup", ["get", "child.name", ["loc", [null, [12, 101], [12, 111]]], 0, 0, 0, 0]], [], ["loc", [null, [12, 78], [12, 113]]], 0, 0], ["content", "child.title", ["loc", [null, [12, 120], [12, 135]]], 0, 0, 0, 0]],
                locals: ["child"],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 8,
                    "column": 12
                  },
                  "end": {
                    "line": 16,
                    "column": 12
                  }
                },
                "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("              ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("ul");
                dom.setAttribute(el1, "class", "cs-workspace-control-navigation-groups-sub-level");
                var el2 = dom.createTextNode("\n");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("              ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["block", "each", [["get", "group.children", ["loc", [null, [10, 24], [10, 38]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [10, 16], [14, 25]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 5,
                  "column": 8
                },
                "end": {
                  "line": 18,
                  "column": 8
                }
              },
              "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("          ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("li");
              var el2 = dom.createTextNode("\n            ");
              dom.appendChild(el1, el2);
              var el2 = dom.createElement("a");
              var el3 = dom.createElement("span");
              var el4 = dom.createComment("");
              dom.appendChild(el3, el4);
              dom.appendChild(el2, el3);
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("          ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var element2 = dom.childAt(fragment, [1]);
              var element3 = dom.childAt(element2, [1]);
              var morphs = new Array(4);
              morphs[0] = dom.createAttrMorph(element2, 'class');
              morphs[1] = dom.createElementMorph(element3);
              morphs[2] = dom.createMorphAt(dom.childAt(element3, [0]), 0, 0);
              morphs[3] = dom.createMorphAt(element2, 3, 3);
              return morphs;
            },
            statements: [["attribute", "class", ["concat", ["cs-workspace-control-navigation-group ", ["subexpr", "if", [["subexpr", "eq", [["get", "group.name", ["loc", [null, [6, 68], [6, 78]]], 0, 0, 0, 0], ["get", "activeGroup", ["loc", [null, [6, 79], [6, 90]]], 0, 0, 0, 0]], [], ["loc", [null, [6, 64], [6, 91]]], 0, 0], "cs-active"], [], ["loc", [null, [6, 59], [6, 105]]], 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["element", "action", ["selectGroup", ["get", "group.name", ["loc", [null, [7, 38], [7, 48]]], 0, 0, 0, 0]], [], ["loc", [null, [7, 15], [7, 50]]], 0, 0], ["content", "group.title", ["loc", [null, [7, 57], [7, 72]]], 0, 0, 0, 0], ["block", "if", [["get", "group.children", ["loc", [null, [8, 18], [8, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [8, 12], [16, 19]]]]],
            locals: ["group"],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 21,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("ul");
            dom.setAttribute(el1, "class", "cs-workspace-control-navigation-groups-top-level");
            var el2 = dom.createTextNode("\n");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("      ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
            return morphs;
          },
          statements: [["block", "each", [["get", "visibleGroups", ["loc", [null, [5, 16], [5, 29]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [5, 8], [18, 17]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 22,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "common/scroll-box", [], [], 0, null, ["loc", [null, [3, 4], [21, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 2
            },
            "end": {
              "line": 26,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("    ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "common/search-bar", [], ["noFocus", true, "target", ["subexpr", "@mut", [["get", "searchTarget", ["loc", [null, [25, 44], [25, 56]]], 0, 0, 0, 0]], [], [], 0, 0], "placeholder", ["subexpr", "@mut", [["get", "searchPlaceholder", ["loc", [null, [25, 69], [25, 86]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [25, 4], [25, 88]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 33,
                  "column": 4
                },
                "end": {
                  "line": 35,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["content", "yield", ["loc", [null, [34, 6], [34, 15]]], 0, 0, 0, 0]],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 37,
                    "column": 6
                  },
                  "end": {
                    "line": 39,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Try refining your search, or changing some controls to enable other features.");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 36,
                  "column": 4
                },
                "end": {
                  "line": 40,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "workspace/workspace-message", [], ["title", "No controls found."], 0, null, ["loc", [null, [37, 6], [39, 38]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 32,
                "column": 2
              },
              "end": {
                "line": 41,
                "column": 2
              }
            },
            "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["get", "isSearching", ["loc", [null, [33, 14], [33, 25]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [33, 4], [35, 15]]]], ["block", "if", [["get", "showNoResultsMessage", ["loc", [null, [36, 10], [36, 30]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [36, 4], [40, 11]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 30,
              "column": 0
            },
            "end": {
              "line": 43,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "common/control-list", [], ["controls", ["subexpr", "@mut", [["get", "controls", ["loc", [null, [32, 34], [32, 42]]], 0, 0, 0, 0]], [], [], 0, 0], "hiddenControls", ["subexpr", "@mut", [["get", "hiddenControls", ["loc", [null, [32, 58], [32, 72]]], 0, 0, 0, 0]], [], [], 0, 0], "isSearching", ["subexpr", "@mut", [["get", "isSearching", ["loc", [null, [32, 85], [32, 96]]], 0, 0, 0, 0]], [], [], 0, 0], "onSearchNavigate", ["subexpr", "action", ["searchNavigate"], [], ["loc", [null, [32, 114], [32, 139]]], 0, 0]], 0, null, ["loc", [null, [32, 2], [41, 26]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 44,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/workspace/workspace-controls/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-workspace-control-navigation");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element4 = dom.childAt(fragment, [0]);
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(element4, 1, 1);
        morphs[1] = dom.createMorphAt(element4, 3, 3);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "groups", ["loc", [null, [2, 8], [2, 14]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 2], [22, 9]]]], ["block", "if", [["get", "searchTarget", ["loc", [null, [24, 8], [24, 20]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [24, 2], [26, 9]]]], ["block", "common/scroll-box", [], ["name", "workspace-controls", "onScroll", ["subexpr", "action", ["onScroll"], [], ["loc", [null, [30, 56], [30, 75]]], 0, 0], "scrollTo", ["subexpr", "@mut", [["get", "scrollTo", ["loc", [null, [30, 85], [30, 93]]], 0, 0, 0, 0]], [], [], 0, 0], "linkedSearch", ["subexpr", "@mut", [["get", "searchTarget", ["loc", [null, [30, 107], [30, 119]]], 0, 0, 0, 0]], [], [], 0, 0], "resetScrollOn", ["subexpr", "@mut", [["get", "scrollResetInc", ["loc", [null, [30, 134], [30, 148]]], 0, 0, 0, 0]], [], [], 0, 0]], 2, null, ["loc", [null, [30, 0], [43, 22]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/components/workspace/workspace-header/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-workspace-header']
  });
});
define("cornerstone/components/workspace/workspace-header/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/workspace/workspace-header/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "yield", ["loc", [null, [1, 0], [1, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/components/workspace/workspace-message/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-workspace-message'],
    classNameBindings: ['small:small']
  });
});
define("cornerstone/components/workspace/workspace-message/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/workspace/workspace-message/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h3");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [2, 6], [2, 15]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/workspace/workspace-message/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("p");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          return morphs;
        },
        statements: [["content", "message", ["loc", [null, [5, 5], [5, 16]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/workspace/workspace-message/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "title", ["loc", [null, [1, 6], [1, 11]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "message", ["loc", [null, [4, 6], [4, 13]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]], ["content", "yield", ["loc", [null, [7, 0], [7, 9]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/components/workspace/workspace-nav/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({
    classNames: ['cs-workspace-nav']
  });
});
define("cornerstone/components/workspace/workspace-nav/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 4
              },
              "end": {
                "line": 5,
                "column": 4
              }
            },
            "moduleName": "cornerstone/components/workspace/workspace-nav/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("      ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "item.label", ["loc", [null, [4, 6], [4, 20]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 2
            },
            "end": {
              "line": 6,
              "column": 2
            }
          },
          "moduleName": "cornerstone/components/workspace/workspace-nav/template.hbs"
        },
        isEmpty: false,
        arity: 1,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "link-to", [["get", "item.route", ["loc", [null, [3, 15], [3, 25]]], 0, 0, 0, 0]], ["class", ["subexpr", "if", [["get", "item.divider", ["loc", [null, [3, 36], [3, 48]]], 0, 0, 0, 0], "cs-workspace-nav-divider"], [], ["loc", [null, [3, 32], [3, 76]]], 0, 0]], 0, null, ["loc", [null, [3, 4], [5, 16]]]]],
        locals: ["item"],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "cornerstone/components/workspace/workspace-nav/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "common/bread-crumbs", [], ["activeItem", ["subexpr", "@mut", [["get", "breadcrumbs.activeItem", ["loc", [null, [11, 15], [11, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "items", ["subexpr", "@mut", [["get", "breadcrumbs.items", ["loc", [null, [12, 10], [12, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "onNavigate", ["subexpr", "@mut", [["get", "breadcrumbs.onNavigate", ["loc", [null, [13, 15], [13, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "onMouseEnter", ["subexpr", "@mut", [["get", "breadcrumbs.onMouseEnter", ["loc", [null, [14, 17], [14, 41]]], 0, 0, 0, 0]], [], [], 0, 0], "onMouseLeave", ["subexpr", "@mut", [["get", "breadcrumbs.onMouseLeave", ["loc", [null, [15, 17], [15, 41]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 2], [16, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "cornerstone/components/workspace/workspace-nav/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("nav");
        dom.setAttribute(el1, "class", "cs-workspace-nav-items");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "each", [["get", "items", ["loc", [null, [2, 10], [2, 15]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 2], [6, 11]]]], ["content", "yield", ["loc", [null, [8, 0], [8, 9]]], 0, 0, 0, 0], ["block", "if", [["get", "breadcrumbs", ["loc", [null, [9, 6], [9, 17]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [9, 0], [17, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/content/content/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    title: (0, _emberDataAttr['default'])(),
    postType: (0, _emberDataAttr['default'])(),
    postTypeLabel: (0, _emberDataAttr['default'])(),
    modified: (0, _emberDataAttr['default'])(),
    permalink: (0, _emberDataAttr['default'])(),

    ui: _ember['default'].inject.service(),

    meta: _ember['default'].computed('postType', 'modified', function () {

      var meta = [];

      meta.push(this.get('postTypeLabel'));
      meta.push(this.get('modified'));

      if (this.get('ui.isRTL')) {
        meta.reverse();
      }

      return meta.join(' &bull; ');
    })

  });
});
define('cornerstone/content/data/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    title: (0, _emberDataAttr['default'])(),
    postType: (0, _emberDataAttr['default'])(),
    postTypeLabel: (0, _emberDataAttr['default'])(),
    modified: (0, _emberDataAttr['default'])(),
    permalink: (0, _emberDataAttr['default'])(),

    ui: _ember['default'].inject.service(),

    meta: _ember['default'].computed('postType', 'modified', function () {

      var meta = [];

      meta.push(this.get('postTypeLabel'));
      meta.push(this.get('modified'));

      if (this.get('ui.isRTL')) {
        meta.reverse();
      }

      return meta.join(' &bull; ');
    }),

    selected: _ember['default'].computed('ui.builderIndexSelectedEntry', function () {
      return this.get('ui.builderIndexSelectedEntry.id') === this.get('id');
    })

  });
});
define('cornerstone/content/entry/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    title: (0, _emberDataAttr['default'])(),
    postType: (0, _emberDataAttr['default'])(),
    postTypeLabel: (0, _emberDataAttr['default'])(),
    modified: (0, _emberDataAttr['default'])(),
    permalink: (0, _emberDataAttr['default'])(),

    ui: _ember['default'].inject.service(),

    meta: _ember['default'].computed('postType', 'modified', function () {

      var meta = [];

      meta.push(this.get('postTypeLabel'));
      meta.push(this.get('modified'));

      if (this.get('ui.isRTL')) {
        meta.reverse();
      }

      return meta.join(' &bull; ');
    }),

    selected: _ember['default'].computed('ui.builderIndexSelectedEntry', function () {
      return this.get('ui.builderIndexSelectedEntry.id') === this.get('id');
    })

  });
});
define('cornerstone/content/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    isSearching: _ember['default'].computed.alias('searchData.isSearching'),
    filteredSearchResults: _ember['default'].computed('searchData.results', function () {

      var results = this.get('searchData.results');

      var isSearching = this.get('isSearching');
      var filtered = this.model.entries.filter(function (item) {
        return !isSearching || results.includes(item.get('id').toString());
      });

      return filtered;
    }),

    searchResults: _ember['default'].computed.sort('filteredSearchResults', function (a, b) {

      var cmp = a.getWithDefault('postTypeLabel', '').localeCompare(b.get('postTypeLabel'));

      if (0 === cmp) {
        return a.get('title').localeCompare(b.get('title'));
      }

      return cmp;
    }),

    init: function init() {
      this._super.apply(this, arguments);
      this.set('searchData', this.get('ui.search').getTarget('builder-index'));
    }

  });
});
define('cornerstone/content/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return _ember['default'].RSVP.hash({
        entries: this.store.findAll('content/entry')
      });
    },

    afterModel: function afterModel(model) {

      var search = this.get('ui.search').getTarget('builder-index');

      search.setOptions({
        id: 'id',
        threshold: 0.15,
        distance: 50,
        tokenize: true,
        keys: [{ name: 'title', weight: 0.1 }]
      });

      search.updateIndex(model.entries.map(function (entry) {
        return { id: entry.get('id'), title: entry.get('title') };
      }));
    },

    actions: {
      selectEntry: function selectEntry(item) {
        this.get('ui').selectBuilderIndex(item);
      }
    }
  });
});
define('cornerstone/content/index/service', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({});
});
define("cornerstone/content/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 7,
                "column": 2
              }
            },
            "moduleName": "cornerstone/content/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h2");
            dom.setAttribute(el1, "class", "cs-workspace-title");
            var el2 = dom.createTextNode("Content");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cs-workspace-search");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            return morphs;
          },
          statements: [["inline", "common/search-bar", [], ["target", "builder-index", "placeholder", "Search by Title", "autoFocus", true], ["loc", [null, [5, 6], [5, 95]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 12,
                      "column": 8
                    },
                    "end": {
                      "line": 12,
                      "column": 101
                    }
                  },
                  "moduleName": "cornerstone/content/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("Edit");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 11,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/content/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", ["content.page", ["get", "entry.id", ["loc", [null, [12, 34], [12, 42]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [12, 8], [12, 113]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 10,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/content/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "common/index-entry", [], ["action", ["subexpr", "route-action", ["selectEntry", ["get", "entry", ["loc", [null, [11, 63], [11, 68]]], 0, 0, 0, 0]], [], ["loc", [null, [11, 35], [11, 69]]], 0, 0], "title", ["subexpr", "@mut", [["get", "entry.title", ["loc", [null, [11, 76], [11, 87]]], 0, 0, 0, 0]], [], [], 0, 0], "meta", ["subexpr", "@mut", [["get", "entry.meta", ["loc", [null, [11, 93], [11, 103]]], 0, 0, 0, 0]], [], [], 0, 0], "selected", ["subexpr", "eq", [["get", "entry.id", ["loc", [null, [11, 117], [11, 125]]], 0, 0, 0, 0], ["get", "ui.builderIndexSelectedEntry.id", ["loc", [null, [11, 126], [11, 157]]], 0, 0, 0, 0]], [], ["loc", [null, [11, 113], [11, 158]]], 0, 0]], 0, null, ["loc", [null, [11, 6], [13, 29]]]]],
            locals: ["entry"],
            templates: [child0]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 17,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/content/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Try refining your search to locate your desired content.");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 18,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/content/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "workspace/workspace-message", [], ["title", "No Content Found"], 0, null, ["loc", [null, [15, 6], [17, 38]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 22,
                "column": 2
              }
            },
            "moduleName": "cornerstone/content/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "each", [["get", "searchResults", ["loc", [null, [10, 12], [10, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [10, 4], [18, 13]]]], ["content", "outlet", ["loc", [null, [20, 4], [20, 14]]], 0, 0, 0, 0]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "cornerstone/content/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/workspace-header", [], [], 0, null, ["loc", [null, [2, 2], [7, 33]]]], ["block", "workspace/workspace-content", [], ["name", "search-results", "linkedSearch", "builder-index"], 1, null, ["loc", [null, [8, 2], [22, 34]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 28,
                      "column": 8
                    },
                    "end": {
                      "line": 28,
                      "column": 119
                    }
                  },
                  "moduleName": "cornerstone/content/index/template.hbs"
                },
                isEmpty: false,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  var el1 = dom.createTextNode("Edit ");
                  dom.appendChild(el0, el1);
                  var el1 = dom.createComment("");
                  dom.appendChild(el0, el1);
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                  var morphs = new Array(1);
                  morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                  dom.insertBoundary(fragment, null);
                  return morphs;
                },
                statements: [["content", "ui.builderIndexSelectedEntry.postTypeLabel", ["loc", [null, [28, 73], [28, 119]]], 0, 0, 0, 0]],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 27,
                    "column": 6
                  },
                  "end": {
                    "line": 29,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/content/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["block", "link-to", ["content.page", ["get", "ui.builderIndexSelectedEntry.id", ["loc", [null, [28, 34], [28, 65]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [28, 8], [28, 131]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 26,
                  "column": 4
                },
                "end": {
                  "line": 30,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/content/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "common/preview-frame/overlay-action", [], ["style", ["subexpr", "@mut", [["get", "ui.scrollBarWidthRightStyle", ["loc", [null, [27, 51], [27, 78]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [27, 6], [29, 46]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 25,
                "column": 2
              },
              "end": {
                "line": 31,
                "column": 2
              }
            },
            "moduleName": "cornerstone/content/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "common/preview-frame", [], ["src", ["subexpr", "@mut", [["get", "ui.builderIndexPreviewURL", ["loc", [null, [26, 32], [26, 57]]], 0, 0, 0, 0]], [], [], 0, 0], "state", ["subexpr", "@mut", [["get", "ui.builderIndexPreviewState", ["loc", [null, [26, 64], [26, 91]]], 0, 0, 0, 0]], [], [], 0, 0], "preloader", "content"], 0, null, ["loc", [null, [26, 4], [30, 29]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 32,
                  "column": 4
                },
                "end": {
                  "line": 36,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/content/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("div");
              dom.setAttribute(el1, "class", "cs-welcome-icon cs-welcome-icon-cs-logo");
              var el2 = dom.createTextNode("\n        ");
              dom.appendChild(el1, el2);
              var el2 = dom.createComment("");
              dom.appendChild(el1, el2);
              var el2 = dom.createTextNode("\n      ");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
              return morphs;
            },
            statements: [["inline", "cs-icon", [["get", "ui.contentLogoPath", ["loc", [null, [34, 18], [34, 36]]], 0, 0, 0, 0]], [], ["loc", [null, [34, 8], [34, 38]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 31,
                "column": 2
              },
              "end": {
                "line": 37,
                "column": 2
              }
            },
            "moduleName": "cornerstone/content/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "common/welcome-message", [], [], 0, null, ["loc", [null, [32, 4], [36, 31]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 24,
              "column": 0
            },
            "end": {
              "line": 38,
              "column": 0
            }
          },
          "moduleName": "cornerstone/content/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "ui.builderIndexPreviewURL", ["loc", [null, [25, 8], [25, 33]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [25, 2], [37, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 39,
            "column": 0
          }
        },
        "moduleName": "cornerstone/content/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "workspace/cs-workspace", [], [], 0, null, ["loc", [null, [1, 0], [23, 27]]]], ["block", "global/cs-canvas", [], [], 1, null, ["loc", [null, [24, 0], [38, 21]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/content/page/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    config: _ember['default'].inject.service(),
    url: null,

    previewURL: _ember['default'].computed('model.entry', function () {
      return this.get('model.entry.permalink');
    }),

    requestParams: {
      cornerstone: 1
    },

    previewState: {
      noClient: true,
      route: 'builder',
      inc: 0
    },

    actions: {
      builderUpdate: function builderUpdate(update) {

        if ('propogate:save' === update) {
          this.get('ui.primaryRoute').send('save');
        }

        if ('save:complete' === update) {
          this.get('ui').endSaveProgress();
          this.set('ui.unsavedData', false);
          this.set('lastSave', new Date());
          // this.controllerFor(this.routeName).set('lastSave', new Date() );
          this.incrementProperty('previewState.inc');
        }

        if ('unsaved:data' === update) {
          this.set('ui.unsavedData', true);
        }
      }
    }
  });
});
define('cornerstone/content/page/route', ['exports', 'ember', 'cornerstone/mixins/keyboard-shortcuts/route'], function (exports, _ember, _cornerstoneMixinsKeyboardShortcutsRoute) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsKeyboardShortcutsRoute['default'], {

    xfr: _ember['default'].inject.service(),

    routeUI: {
      bar: ['preview-sizer', 'view-site', 'collapse', 'cheatsheet', 'save']
    },

    keyboardShortcuts: {
      'skeleton-mode': 'toggleSkeletonMode'
    },

    model: function model(params) {
      return _ember['default'].RSVP.hash({
        entry: this.store.findRecord('content/content', params.post_id)
      });
    },

    afterModel: function afterModel() {
      this.set('ui.unsavedData', false);
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.set('routeUI.viewSiteURL', model.entry.get('permalink'));
      this.get('ui').setRouteUI(this);
    },

    renderTemplate: function renderTemplate() {
      this.render('partials/bar/builder-page', {
        outlet: 'bar',
        into: 'application'
      });
      this._super(this, arguments); // use default template rendering
    },

    actions: {

      willTransition: function willTransition(transition) {
        var _this = this;

        if (this.get('ui.unsavedData') && !transition.targetName.includes('content.page')) {

          transition.abort();

          this.get('ui').confirm({
            noSkip: true,
            message: this.get('i18n').t('app.unsaved-warning'),
            accept: function accept() {
              _this.set('ui.unsavedData', false);
              transition.retry();
            },
            acceptClass: 'sad'
          });
        }
      },

      error: function error(_error) {

        if (_error) {
          console.log(_error);
          return this.transitionTo('content');
        }

        // Return true to bubble this event to any parent route.
        return true;
      },

      save: function save() {

        var ui = this.get('ui');
        ui.beginSaveProgress();
        this.get('xfr').message('save', true);
      },

      toggleSkeletonMode: function toggleSkeletonMode() {
        this.set('ui.skeletonModeActive', !this.get('ui.skeletonModeActive'));
      }

    }

  });
});
define("cornerstone/content/page/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 0
          }
        },
        "moduleName": "cornerstone/content/page/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "common/preview-frame", [], ["src", ["subexpr", "@mut", [["get", "previewURL", ["loc", [null, [2, 6], [2, 16]]], 0, 0, 0, 0]], [], [], 0, 0], "state", ["subexpr", "@mut", [["get", "previewState", ["loc", [null, [3, 8], [3, 20]]], 0, 0, 0, 0]], [], [], 0, 0], "requestParams", ["subexpr", "@mut", [["get", "requestParams", ["loc", [null, [4, 16], [4, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "content", "builder", "allowPreviewSizer", false, "usePreloader", false], ["loc", [null, [1, 0], [8, 2]]], 0, 0], ["inline", "builder/builder-shim", [], ["message", ["subexpr", "action", ["builderUpdate"], [], ["loc", [null, [9, 31], [9, 55]]], 0, 0]], ["loc", [null, [9, 0], [9, 57]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/content/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], {

    acl: ['canUseBuilder'],
    routeUI: {
      bar: ['preview-sizer', 'collapse', 'cheatsheet']
    },

    beforeModel: function beforeModel() {
      this.permissionCheck();
    },

    model: function model() {
      return _ember['default'].RSVP.hash({
        config: this.get('config').fetch('page-builder')
      });
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.get('ui').setRouteUI(this);
      this.set('ui.builderIndexSelectedEntry', false);
    },

    actions: {

      barButton: function barButton(action) {
        var key = _ember['default'].String.camelize(action + 'Active');
        var state = this.controller.get(key);
        this.controller.set(key, !state);
      }
    }

  });
});
define("cornerstone/content/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/content/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "outlet", ["loc", [null, [2, 2], [2, 12]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "cornerstone/content/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "builder"], 0, null, ["loc", [null, [1, 0], [3, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/continuity/service', ['exports', 'ember', 'cornerstone/mixins/preview-listener'], function (exports, _ember, _cornerstoneMixinsPreviewListener) {
  exports['default'] = _ember['default'].Service.extend(_cornerstoneMixinsPreviewListener['default'], {

    radio: _ember['default'].inject.service('global/radio'),
    store: _ember['default'].inject.service(),
    modelUpdateQueue: _ember['default'].A(),

    init: function init() {
      this._super.apply(this, arguments);
      this.set('inFlight', {});
      this.listenTo('continuity:update', this.get('modelUpdate'));
      this.listenTo('continuity:find', this.get('modelFind'));
      this.listenTo('continuity:findall', this.get('modelFindAll'));
    },

    findAll: function findAll(type) {
      return this.get('xfr').request('continuity:findall', { type: type });
    },

    findRecord: function findRecord(type, id) {
      // console.log('lookup', id );
      return this.get('xfr').request('continuity:find', { type: type, id: id });
    },

    update: function update(action, type, data, passthrough) {

      if (this.get('inFlight._' + data.data.id)) {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          return resolve(undefined);
        });
      }

      this.get('radio').trigger('continuity.update', type);

      // console.log('updating',this.get('xfr.agent.xfrOrigin'),arguments);

      //debugger;
      var request = this.get('xfr').request('continuity:update', {
        type: type,
        action: action,
        model: JSON.stringify(data)
      });

      if (!passthrough) {
        return request;
      }

      return new _ember['default'].RSVP.Promise(function (resolve) {
        request.then(function () {
          return resolve(undefined);
        }, function (response) {
          _ember['default'].Logger.warn('Adapter update failed', response);
          resolve(undefined);
        });
      });
    },

    modelUpdate: function modelUpdate(data, resolve) {

      // INCOMING DATA FROM OTHER PLAYER
      this.get('modelUpdateQueue').push({
        data: JSON.parse(data.model).data,
        resolve: resolve
      });

      this.flushModelUpdates();
      //Ember.run.debounce(this, this.flushModelUpdates, 5);
    },

    flushModelUpdates: function flushModelUpdates() {
      var _this = this;

      var store = this.get('store');

      var pending = this.get('modelUpdateQueue').map(function (update) {
        _this.set('inFlight._' + update.data.id, true);
        return { id: update.data.id, resolve: update.resolve };
      });

      var batch = this.get('modelUpdateQueue').map(function (update) {
        return store.normalize(_ember['default'].Inflector.inflector.singularize(update.data.type), update.data).data;
      });

      //console.log('model update batch', batch );
      this.get('modelUpdateQueue').clear();
      store.push({ data: batch });

      _ember['default'].run.next(this, function () {
        pending.forEach(function (update) {
          _this.set('inFlight._' + update.id, null);
          update.resolve(undefined);
        });
      });
    },

    modelFind: function modelFind(data, resolve) {

      // TODO: "include" child items
      var model = this.get('store').peekRecord(data.type, data.id);
      // console.log('resolving', data.id, model );
      if (_ember['default'].isNone(model)) {
        resolve(null);
      }

      resolve(JSON.parse(JSON.stringify(this.serialize(model))));
    },

    serialize: function serialize(model) {

      var serialized = model.serialize({
        includeId: true,
        includeChildren: true
      });

      return this.get('store').normalize(_ember['default'].Inflector.inflector.singularize(serialized.data.type), serialized.data);
    },

    modelFindAll: function modelFindAll(data, resolve) {
      var _this2 = this;

      var records = this.get('store').peekAll(data.type);
      resolve(JSON.parse(JSON.stringify({
        data: records.map(function (record) {
          return _this2.serialize(record).data;
        })
      })));
    }

  });
});
define('cornerstone/controls/service', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({

    //
    // This service will provide the legacy font options until they are migrated
    // to the font manager
    //

    fontService: _ember['default'].inject.service('templates/fonts'),

    getOptionList: function getOptionList(list) {
      var choices = this.getChoiceList(list);
      var options = [];
      for (var key in choices) {
        if (choices.hasOwnProperty(key)) {
          options.push({
            value: key,
            label: choices[key]
          });
        }
      }
      return options;
    },

    getChoiceList: function getChoiceList(list) {
      if ('fonts' === list) {
        return this.get('fontChoices');
      }

      if ('font-weights' === list) {
        return this.get('normalizedFontWeights');
      }
      return [];
    },

    controlFilter: function controlFilter(method, value) {
      var _this = this;

      if ('font-weights' === method) {
        var _ret = (function () {
          var font = _this.get('normalizedFonts')[value];
          if (font) {
            return {
              v: _this.getOptionList('font-weights').filter(function (weight) {
                return font.weights.includes(weight.value);
              })
            };
          }
        })();

        if (typeof _ret === 'object') return _ret.v;
      }

      return undefined;
    },

    normalizedFonts: _ember['default'].computed(function () {
      var norm = {};
      var fonts = this.get('config.global.font_data');
      for (var font in fonts) {
        norm[fonts[font].family] = fonts[font];
      }
      return norm;
    }),

    fontChoices: _ember['default'].computed(function () {
      var fonts = this.get('normalizedFonts');
      var choices = {};

      for (var font in fonts) {
        choices[font] = this.get('i18n').t('app.controls-font-family-select', {
          family: font,
          source: _ember['default'].String.capitalize(fonts[font].source)
        }).toString();
      }
      return choices;
    }),

    normalizedFontWeights: _ember['default'].computed('fontService.allWeights', function () {
      var _this2 = this;

      var weights = {};

      this.get('fontService.allWeights').forEach(function (weight) {
        if (weight.includes('i')) {
          weight += 'talic';
        }
        weights[weight] = _this2.get('i18n').t('app.font-weight.' + weight).toString();
      });

      return weights;
    })

  });
});
define("cornerstone/data/googlefonts",["exports"],function(exports){exports["default"] = [{"family":"ABeeZee","stack":"\"ABeeZee\", sans-serif","weights":["400","400i"]},{"family":"Abel","stack":"\"Abel\", sans-serif","weights":["400"]},{"family":"Abhaya Libre","stack":"\"Abhaya Libre\", serif","weights":["400","500","600","700","800"]},{"family":"Abril Fatface","stack":"\"Abril Fatface\", display","weights":["400"]},{"family":"Aclonica","stack":"\"Aclonica\", sans-serif","weights":["400"]},{"family":"Acme","stack":"\"Acme\", sans-serif","weights":["400"]},{"family":"Actor","stack":"\"Actor\", sans-serif","weights":["400"]},{"family":"Adamina","stack":"\"Adamina\", serif","weights":["400"]},{"family":"Advent Pro","stack":"\"Advent Pro\", sans-serif","weights":["100","200","300","400","500","600","700"]},{"family":"Aguafina Script","stack":"\"Aguafina Script\", handwriting","weights":["400"]},{"family":"Akronim","stack":"\"Akronim\", display","weights":["400"]},{"family":"Aladin","stack":"\"Aladin\", handwriting","weights":["400"]},{"family":"Aldrich","stack":"\"Aldrich\", sans-serif","weights":["400"]},{"family":"Alef","stack":"\"Alef\", sans-serif","weights":["400","700"]},{"family":"Alegreya","stack":"\"Alegreya\", serif","weights":["400","400i","700","700i","900","900i"]},{"family":"Alegreya SC","stack":"\"Alegreya SC\", serif","weights":["400","400i","700","700i","900","900i"]},{"family":"Alegreya Sans","stack":"\"Alegreya Sans\", sans-serif","weights":["100","100i","300","300i","400","400i","500","500i","700","700i","800","800i","900","900i"]},{"family":"Alegreya Sans SC","stack":"\"Alegreya Sans SC\", sans-serif","weights":["100","100i","300","300i","400","400i","500","500i","700","700i","800","800i","900","900i"]},{"family":"Alex Brush","stack":"\"Alex Brush\", handwriting","weights":["400"]},{"family":"Alfa Slab One","stack":"\"Alfa Slab One\", display","weights":["400"]},{"family":"Alice","stack":"\"Alice\", serif","weights":["400"]},{"family":"Alike","stack":"\"Alike\", serif","weights":["400"]},{"family":"Alike Angular","stack":"\"Alike Angular\", serif","weights":["400"]},{"family":"Allan","stack":"\"Allan\", display","weights":["400","700"]},{"family":"Allerta","stack":"\"Allerta\", sans-serif","weights":["400"]},{"family":"Allerta Stencil","stack":"\"Allerta Stencil\", sans-serif","weights":["400"]},{"family":"Allura","stack":"\"Allura\", handwriting","weights":["400"]},{"family":"Almendra","stack":"\"Almendra\", serif","weights":["400","400i","700","700i"]},{"family":"Almendra Display","stack":"\"Almendra Display\", display","weights":["400"]},{"family":"Almendra SC","stack":"\"Almendra SC\", serif","weights":["400"]},{"family":"Amarante","stack":"\"Amarante\", display","weights":["400"]},{"family":"Amaranth","stack":"\"Amaranth\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Amatic SC","stack":"\"Amatic SC\", handwriting","weights":["400","700"]},{"family":"Amatica SC","stack":"\"Amatica SC\", display","weights":["400","700"]},{"family":"Amethysta","stack":"\"Amethysta\", serif","weights":["400"]},{"family":"Amiko","stack":"\"Amiko\", sans-serif","weights":["400","600","700"]},{"family":"Amiri","stack":"\"Amiri\", serif","weights":["400","400i","700","700i"]},{"family":"Amita","stack":"\"Amita\", handwriting","weights":["400","700"]},{"family":"Anaheim","stack":"\"Anaheim\", sans-serif","weights":["400"]},{"family":"Andada","stack":"\"Andada\", serif","weights":["400"]},{"family":"Andika","stack":"\"Andika\", sans-serif","weights":["400"]},{"family":"Angkor","stack":"\"Angkor\", display","weights":["400"]},{"family":"Annie Use Your Telescope","stack":"\"Annie Use Your Telescope\", handwriting","weights":["400"]},{"family":"Anonymous Pro","stack":"\"Anonymous Pro\", monospace","weights":["400","400i","700","700i"]},{"family":"Antic","stack":"\"Antic\", sans-serif","weights":["400"]},{"family":"Antic Didone","stack":"\"Antic Didone\", serif","weights":["400"]},{"family":"Antic Slab","stack":"\"Antic Slab\", serif","weights":["400"]},{"family":"Anton","stack":"\"Anton\", sans-serif","weights":["400"]},{"family":"Arapey","stack":"\"Arapey\", serif","weights":["400","400i"]},{"family":"Arbutus","stack":"\"Arbutus\", display","weights":["400"]},{"family":"Arbutus Slab","stack":"\"Arbutus Slab\", serif","weights":["400"]},{"family":"Architects Daughter","stack":"\"Architects Daughter\", handwriting","weights":["400"]},{"family":"Archivo Black","stack":"\"Archivo Black\", sans-serif","weights":["400"]},{"family":"Archivo Narrow","stack":"\"Archivo Narrow\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Aref Ruqaa","stack":"\"Aref Ruqaa\", serif","weights":["400","700"]},{"family":"Arima Madurai","stack":"\"Arima Madurai\", display","weights":["100","200","300","400","500","700","800","900"]},{"family":"Arimo","stack":"\"Arimo\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Arizonia","stack":"\"Arizonia\", handwriting","weights":["400"]},{"family":"Armata","stack":"\"Armata\", sans-serif","weights":["400"]},{"family":"Arsenal","stack":"\"Arsenal\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Artifika","stack":"\"Artifika\", serif","weights":["400"]},{"family":"Arvo","stack":"\"Arvo\", serif","weights":["400","400i","700","700i"]},{"family":"Arya","stack":"\"Arya\", sans-serif","weights":["400","700"]},{"family":"Asap","stack":"\"Asap\", sans-serif","weights":["400","400i","500","500i","700","700i"]},{"family":"Asar","stack":"\"Asar\", serif","weights":["400"]},{"family":"Asset","stack":"\"Asset\", display","weights":["400"]},{"family":"Assistant","stack":"\"Assistant\", sans-serif","weights":["200","300","400","600","700","800"]},{"family":"Astloch","stack":"\"Astloch\", display","weights":["400","700"]},{"family":"Asul","stack":"\"Asul\", sans-serif","weights":["400","700"]},{"family":"Athiti","stack":"\"Athiti\", sans-serif","weights":["200","300","400","500","600","700"]},{"family":"Atma","stack":"\"Atma\", display","weights":["300","400","500","600","700"]},{"family":"Atomic Age","stack":"\"Atomic Age\", display","weights":["400"]},{"family":"Aubrey","stack":"\"Aubrey\", display","weights":["400"]},{"family":"Audiowide","stack":"\"Audiowide\", display","weights":["400"]},{"family":"Autour One","stack":"\"Autour One\", display","weights":["400"]},{"family":"Average","stack":"\"Average\", serif","weights":["400"]},{"family":"Average Sans","stack":"\"Average Sans\", sans-serif","weights":["400"]},{"family":"Averia Gruesa Libre","stack":"\"Averia Gruesa Libre\", display","weights":["400"]},{"family":"Averia Libre","stack":"\"Averia Libre\", display","weights":["300","300i","400","400i","700","700i"]},{"family":"Averia Sans Libre","stack":"\"Averia Sans Libre\", display","weights":["300","300i","400","400i","700","700i"]},{"family":"Averia Serif Libre","stack":"\"Averia Serif Libre\", display","weights":["300","300i","400","400i","700","700i"]},{"family":"Bad Script","stack":"\"Bad Script\", handwriting","weights":["400"]},{"family":"Baloo","stack":"\"Baloo\", display","weights":["400"]},{"family":"Baloo Bhai","stack":"\"Baloo Bhai\", display","weights":["400"]},{"family":"Baloo Bhaina","stack":"\"Baloo Bhaina\", display","weights":["400"]},{"family":"Baloo Chettan","stack":"\"Baloo Chettan\", display","weights":["400"]},{"family":"Baloo Da","stack":"\"Baloo Da\", display","weights":["400"]},{"family":"Baloo Paaji","stack":"\"Baloo Paaji\", display","weights":["400"]},{"family":"Baloo Tamma","stack":"\"Baloo Tamma\", display","weights":["400"]},{"family":"Baloo Thambi","stack":"\"Baloo Thambi\", display","weights":["400"]},{"family":"Balthazar","stack":"\"Balthazar\", serif","weights":["400"]},{"family":"Bangers","stack":"\"Bangers\", display","weights":["400"]},{"family":"Basic","stack":"\"Basic\", sans-serif","weights":["400"]},{"family":"Battambang","stack":"\"Battambang\", display","weights":["400","700"]},{"family":"Baumans","stack":"\"Baumans\", display","weights":["400"]},{"family":"Bayon","stack":"\"Bayon\", display","weights":["400"]},{"family":"Belgrano","stack":"\"Belgrano\", serif","weights":["400"]},{"family":"Belleza","stack":"\"Belleza\", sans-serif","weights":["400"]},{"family":"BenchNine","stack":"\"BenchNine\", sans-serif","weights":["300","400","700"]},{"family":"Bentham","stack":"\"Bentham\", serif","weights":["400"]},{"family":"Berkshire Swash","stack":"\"Berkshire Swash\", handwriting","weights":["400"]},{"family":"Bevan","stack":"\"Bevan\", display","weights":["400"]},{"family":"Bigelow Rules","stack":"\"Bigelow Rules\", display","weights":["400"]},{"family":"Bigshot One","stack":"\"Bigshot One\", display","weights":["400"]},{"family":"Bilbo","stack":"\"Bilbo\", handwriting","weights":["400"]},{"family":"Bilbo Swash Caps","stack":"\"Bilbo Swash Caps\", handwriting","weights":["400"]},{"family":"BioRhyme","stack":"\"BioRhyme\", serif","weights":["200","300","400","700","800"]},{"family":"BioRhyme Expanded","stack":"\"BioRhyme Expanded\", serif","weights":["200","300","400","700","800"]},{"family":"Biryani","stack":"\"Biryani\", sans-serif","weights":["200","300","400","600","700","800","900"]},{"family":"Bitter","stack":"\"Bitter\", serif","weights":["400","400i","700"]},{"family":"Black Ops One","stack":"\"Black Ops One\", display","weights":["400"]},{"family":"Bokor","stack":"\"Bokor\", display","weights":["400"]},{"family":"Bonbon","stack":"\"Bonbon\", handwriting","weights":["400"]},{"family":"Boogaloo","stack":"\"Boogaloo\", display","weights":["400"]},{"family":"Bowlby One","stack":"\"Bowlby One\", display","weights":["400"]},{"family":"Bowlby One SC","stack":"\"Bowlby One SC\", display","weights":["400"]},{"family":"Brawler","stack":"\"Brawler\", serif","weights":["400"]},{"family":"Bree Serif","stack":"\"Bree Serif\", serif","weights":["400"]},{"family":"Bubblegum Sans","stack":"\"Bubblegum Sans\", display","weights":["400"]},{"family":"Bubbler One","stack":"\"Bubbler One\", sans-serif","weights":["400"]},{"family":"Buda","stack":"\"Buda\", display","weights":["300"]},{"family":"Buenard","stack":"\"Buenard\", serif","weights":["400","700"]},{"family":"Bungee","stack":"\"Bungee\", display","weights":["400"]},{"family":"Bungee Hairline","stack":"\"Bungee Hairline\", display","weights":["400"]},{"family":"Bungee Inline","stack":"\"Bungee Inline\", display","weights":["400"]},{"family":"Bungee Outline","stack":"\"Bungee Outline\", display","weights":["400"]},{"family":"Bungee Shade","stack":"\"Bungee Shade\", display","weights":["400"]},{"family":"Butcherman","stack":"\"Butcherman\", display","weights":["400"]},{"family":"Butterfly Kids","stack":"\"Butterfly Kids\", handwriting","weights":["400"]},{"family":"Cabin","stack":"\"Cabin\", sans-serif","weights":["400","400i","500","500i","600","600i","700","700i"]},{"family":"Cabin Condensed","stack":"\"Cabin Condensed\", sans-serif","weights":["400","500","600","700"]},{"family":"Cabin Sketch","stack":"\"Cabin Sketch\", display","weights":["400","700"]},{"family":"Caesar Dressing","stack":"\"Caesar Dressing\", display","weights":["400"]},{"family":"Cagliostro","stack":"\"Cagliostro\", sans-serif","weights":["400"]},{"family":"Cairo","stack":"\"Cairo\", sans-serif","weights":["200","300","400","600","700","900"]},{"family":"Calligraffitti","stack":"\"Calligraffitti\", handwriting","weights":["400"]},{"family":"Cambay","stack":"\"Cambay\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Cambo","stack":"\"Cambo\", serif","weights":["400"]},{"family":"Candal","stack":"\"Candal\", sans-serif","weights":["400"]},{"family":"Cantarell","stack":"\"Cantarell\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Cantata One","stack":"\"Cantata One\", serif","weights":["400"]},{"family":"Cantora One","stack":"\"Cantora One\", sans-serif","weights":["400"]},{"family":"Capriola","stack":"\"Capriola\", sans-serif","weights":["400"]},{"family":"Cardo","stack":"\"Cardo\", serif","weights":["400","400i","700"]},{"family":"Carme","stack":"\"Carme\", sans-serif","weights":["400"]},{"family":"Carrois Gothic","stack":"\"Carrois Gothic\", sans-serif","weights":["400"]},{"family":"Carrois Gothic SC","stack":"\"Carrois Gothic SC\", sans-serif","weights":["400"]},{"family":"Carter One","stack":"\"Carter One\", display","weights":["400"]},{"family":"Catamaran","stack":"\"Catamaran\", sans-serif","weights":["100","200","300","400","500","600","700","800","900"]},{"family":"Caudex","stack":"\"Caudex\", serif","weights":["400","400i","700","700i"]},{"family":"Caveat","stack":"\"Caveat\", handwriting","weights":["400","700"]},{"family":"Caveat Brush","stack":"\"Caveat Brush\", handwriting","weights":["400"]},{"family":"Cedarville Cursive","stack":"\"Cedarville Cursive\", handwriting","weights":["400"]},{"family":"Ceviche One","stack":"\"Ceviche One\", display","weights":["400"]},{"family":"Changa","stack":"\"Changa\", sans-serif","weights":["200","300","400","500","600","700","800"]},{"family":"Changa One","stack":"\"Changa One\", display","weights":["400","400i"]},{"family":"Chango","stack":"\"Chango\", display","weights":["400"]},{"family":"Chathura","stack":"\"Chathura\", sans-serif","weights":["100","300","400","700","800"]},{"family":"Chau Philomene One","stack":"\"Chau Philomene One\", sans-serif","weights":["400","400i"]},{"family":"Chela One","stack":"\"Chela One\", display","weights":["400"]},{"family":"Chelsea Market","stack":"\"Chelsea Market\", display","weights":["400"]},{"family":"Chenla","stack":"\"Chenla\", display","weights":["400"]},{"family":"Cherry Cream Soda","stack":"\"Cherry Cream Soda\", display","weights":["400"]},{"family":"Cherry Swash","stack":"\"Cherry Swash\", display","weights":["400","700"]},{"family":"Chewy","stack":"\"Chewy\", display","weights":["400"]},{"family":"Chicle","stack":"\"Chicle\", display","weights":["400"]},{"family":"Chivo","stack":"\"Chivo\", sans-serif","weights":["400","400i","900","900i"]},{"family":"Chonburi","stack":"\"Chonburi\", display","weights":["400"]},{"family":"Cinzel","stack":"\"Cinzel\", serif","weights":["400","700","900"]},{"family":"Cinzel Decorative","stack":"\"Cinzel Decorative\", display","weights":["400","700","900"]},{"family":"Clicker Script","stack":"\"Clicker Script\", handwriting","weights":["400"]},{"family":"Coda","stack":"\"Coda\", display","weights":["400","800"]},{"family":"Coda Caption","stack":"\"Coda Caption\", sans-serif","weights":["800"]},{"family":"Codystar","stack":"\"Codystar\", display","weights":["300","400"]},{"family":"Coiny","stack":"\"Coiny\", display","weights":["400"]},{"family":"Combo","stack":"\"Combo\", display","weights":["400"]},{"family":"Comfortaa","stack":"\"Comfortaa\", display","weights":["300","400","700"]},{"family":"Coming Soon","stack":"\"Coming Soon\", handwriting","weights":["400"]},{"family":"Concert One","stack":"\"Concert One\", display","weights":["400"]},{"family":"Condiment","stack":"\"Condiment\", handwriting","weights":["400"]},{"family":"Content","stack":"\"Content\", display","weights":["400","700"]},{"family":"Contrail One","stack":"\"Contrail One\", display","weights":["400"]},{"family":"Convergence","stack":"\"Convergence\", sans-serif","weights":["400"]},{"family":"Cookie","stack":"\"Cookie\", handwriting","weights":["400"]},{"family":"Copse","stack":"\"Copse\", serif","weights":["400"]},{"family":"Corben","stack":"\"Corben\", display","weights":["400","700"]},{"family":"Cormorant","stack":"\"Cormorant\", serif","weights":["300","300i","400","400i","500","500i","600","600i","700","700i"]},{"family":"Cormorant Garamond","stack":"\"Cormorant Garamond\", serif","weights":["300","300i","400","400i","500","500i","600","600i","700","700i"]},{"family":"Cormorant Infant","stack":"\"Cormorant Infant\", serif","weights":["300","300i","400","400i","500","500i","600","600i","700","700i"]},{"family":"Cormorant SC","stack":"\"Cormorant SC\", serif","weights":["300","400","500","600","700"]},{"family":"Cormorant Unicase","stack":"\"Cormorant Unicase\", serif","weights":["300","400","500","600","700"]},{"family":"Cormorant Upright","stack":"\"Cormorant Upright\", serif","weights":["300","400","500","600","700"]},{"family":"Courgette","stack":"\"Courgette\", handwriting","weights":["400"]},{"family":"Cousine","stack":"\"Cousine\", monospace","weights":["400","400i","700","700i"]},{"family":"Coustard","stack":"\"Coustard\", serif","weights":["400","900"]},{"family":"Covered By Your Grace","stack":"\"Covered By Your Grace\", handwriting","weights":["400"]},{"family":"Crafty Girls","stack":"\"Crafty Girls\", handwriting","weights":["400"]},{"family":"Creepster","stack":"\"Creepster\", display","weights":["400"]},{"family":"Crete Round","stack":"\"Crete Round\", serif","weights":["400","400i"]},{"family":"Crimson Text","stack":"\"Crimson Text\", serif","weights":["400","400i","600","600i","700","700i"]},{"family":"Croissant One","stack":"\"Croissant One\", display","weights":["400"]},{"family":"Crushed","stack":"\"Crushed\", display","weights":["400"]},{"family":"Cuprum","stack":"\"Cuprum\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Cutive","stack":"\"Cutive\", serif","weights":["400"]},{"family":"Cutive Mono","stack":"\"Cutive Mono\", monospace","weights":["400"]},{"family":"Damion","stack":"\"Damion\", handwriting","weights":["400"]},{"family":"Dancing Script","stack":"\"Dancing Script\", handwriting","weights":["400","700"]},{"family":"Dangrek","stack":"\"Dangrek\", display","weights":["400"]},{"family":"David Libre","stack":"\"David Libre\", serif","weights":["400","500","700"]},{"family":"Dawning of a New Day","stack":"\"Dawning of a New Day\", handwriting","weights":["400"]},{"family":"Days One","stack":"\"Days One\", sans-serif","weights":["400"]},{"family":"Dekko","stack":"\"Dekko\", handwriting","weights":["400"]},{"family":"Delius","stack":"\"Delius\", handwriting","weights":["400"]},{"family":"Delius Swash Caps","stack":"\"Delius Swash Caps\", handwriting","weights":["400"]},{"family":"Delius Unicase","stack":"\"Delius Unicase\", handwriting","weights":["400","700"]},{"family":"Della Respira","stack":"\"Della Respira\", serif","weights":["400"]},{"family":"Denk One","stack":"\"Denk One\", sans-serif","weights":["400"]},{"family":"Devonshire","stack":"\"Devonshire\", handwriting","weights":["400"]},{"family":"Dhurjati","stack":"\"Dhurjati\", sans-serif","weights":["400"]},{"family":"Didact Gothic","stack":"\"Didact Gothic\", sans-serif","weights":["400"]},{"family":"Diplomata","stack":"\"Diplomata\", display","weights":["400"]},{"family":"Diplomata SC","stack":"\"Diplomata SC\", display","weights":["400"]},{"family":"Domine","stack":"\"Domine\", serif","weights":["400","700"]},{"family":"Donegal One","stack":"\"Donegal One\", serif","weights":["400"]},{"family":"Doppio One","stack":"\"Doppio One\", sans-serif","weights":["400"]},{"family":"Dorsa","stack":"\"Dorsa\", sans-serif","weights":["400"]},{"family":"Dosis","stack":"\"Dosis\", sans-serif","weights":["200","300","400","500","600","700","800"]},{"family":"Dr Sugiyama","stack":"\"Dr Sugiyama\", handwriting","weights":["400"]},{"family":"Droid Sans","stack":"\"Droid Sans\", sans-serif","weights":["400","700"]},{"family":"Droid Sans Mono","stack":"\"Droid Sans Mono\", monospace","weights":["400"]},{"family":"Droid Serif","stack":"\"Droid Serif\", serif","weights":["400","400i","700","700i"]},{"family":"Duru Sans","stack":"\"Duru Sans\", sans-serif","weights":["400"]},{"family":"Dynalight","stack":"\"Dynalight\", display","weights":["400"]},{"family":"EB Garamond","stack":"\"EB Garamond\", serif","weights":["400"]},{"family":"Eagle Lake","stack":"\"Eagle Lake\", handwriting","weights":["400"]},{"family":"Eater","stack":"\"Eater\", display","weights":["400"]},{"family":"Economica","stack":"\"Economica\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Eczar","stack":"\"Eczar\", serif","weights":["400","500","600","700","800"]},{"family":"Ek Mukta","stack":"\"Ek Mukta\", sans-serif","weights":["200","300","400","500","600","700","800"]},{"family":"El Messiri","stack":"\"El Messiri\", sans-serif","weights":["400","500","600","700"]},{"family":"Electrolize","stack":"\"Electrolize\", sans-serif","weights":["400"]},{"family":"Elsie","stack":"\"Elsie\", display","weights":["400","900"]},{"family":"Elsie Swash Caps","stack":"\"Elsie Swash Caps\", display","weights":["400","900"]},{"family":"Emblema One","stack":"\"Emblema One\", display","weights":["400"]},{"family":"Emilys Candy","stack":"\"Emilys Candy\", display","weights":["400"]},{"family":"Engagement","stack":"\"Engagement\", handwriting","weights":["400"]},{"family":"Englebert","stack":"\"Englebert\", sans-serif","weights":["400"]},{"family":"Enriqueta","stack":"\"Enriqueta\", serif","weights":["400","700"]},{"family":"Erica One","stack":"\"Erica One\", display","weights":["400"]},{"family":"Esteban","stack":"\"Esteban\", serif","weights":["400"]},{"family":"Euphoria Script","stack":"\"Euphoria Script\", handwriting","weights":["400"]},{"family":"Ewert","stack":"\"Ewert\", display","weights":["400"]},{"family":"Exo","stack":"\"Exo\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Exo 2","stack":"\"Exo 2\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Expletus Sans","stack":"\"Expletus Sans\", display","weights":["400","400i","500","500i","600","600i","700","700i"]},{"family":"Fanwood Text","stack":"\"Fanwood Text\", serif","weights":["400","400i"]},{"family":"Farsan","stack":"\"Farsan\", display","weights":["400"]},{"family":"Fascinate","stack":"\"Fascinate\", display","weights":["400"]},{"family":"Fascinate Inline","stack":"\"Fascinate Inline\", display","weights":["400"]},{"family":"Faster One","stack":"\"Faster One\", display","weights":["400"]},{"family":"Fasthand","stack":"\"Fasthand\", serif","weights":["400"]},{"family":"Fauna One","stack":"\"Fauna One\", serif","weights":["400"]},{"family":"Federant","stack":"\"Federant\", display","weights":["400"]},{"family":"Federo","stack":"\"Federo\", sans-serif","weights":["400"]},{"family":"Felipa","stack":"\"Felipa\", handwriting","weights":["400"]},{"family":"Fenix","stack":"\"Fenix\", serif","weights":["400"]},{"family":"Finger Paint","stack":"\"Finger Paint\", display","weights":["400"]},{"family":"Fira Mono","stack":"\"Fira Mono\", monospace","weights":["400","500","700"]},{"family":"Fira Sans","stack":"\"Fira Sans\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Fira Sans Condensed","stack":"\"Fira Sans Condensed\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Fira Sans Extra Condensed","stack":"\"Fira Sans Extra Condensed\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Fjalla One","stack":"\"Fjalla One\", sans-serif","weights":["400"]},{"family":"Fjord One","stack":"\"Fjord One\", serif","weights":["400"]},{"family":"Flamenco","stack":"\"Flamenco\", display","weights":["300","400"]},{"family":"Flavors","stack":"\"Flavors\", display","weights":["400"]},{"family":"Fondamento","stack":"\"Fondamento\", handwriting","weights":["400","400i"]},{"family":"Fontdiner Swanky","stack":"\"Fontdiner Swanky\", display","weights":["400"]},{"family":"Forum","stack":"\"Forum\", display","weights":["400"]},{"family":"Francois One","stack":"\"Francois One\", sans-serif","weights":["400"]},{"family":"Frank Ruhl Libre","stack":"\"Frank Ruhl Libre\", sans-serif","weights":["300","400","500","700","900"]},{"family":"Freckle Face","stack":"\"Freckle Face\", display","weights":["400"]},{"family":"Fredericka the Great","stack":"\"Fredericka the Great\", display","weights":["400"]},{"family":"Fredoka One","stack":"\"Fredoka One\", display","weights":["400"]},{"family":"Freehand","stack":"\"Freehand\", display","weights":["400"]},{"family":"Fresca","stack":"\"Fresca\", sans-serif","weights":["400"]},{"family":"Frijole","stack":"\"Frijole\", display","weights":["400"]},{"family":"Fruktur","stack":"\"Fruktur\", display","weights":["400"]},{"family":"Fugaz One","stack":"\"Fugaz One\", display","weights":["400"]},{"family":"GFS Didot","stack":"\"GFS Didot\", serif","weights":["400"]},{"family":"GFS Neohellenic","stack":"\"GFS Neohellenic\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Gabriela","stack":"\"Gabriela\", serif","weights":["400"]},{"family":"Gafata","stack":"\"Gafata\", sans-serif","weights":["400"]},{"family":"Galada","stack":"\"Galada\", display","weights":["400"]},{"family":"Galdeano","stack":"\"Galdeano\", sans-serif","weights":["400"]},{"family":"Galindo","stack":"\"Galindo\", display","weights":["400"]},{"family":"Gentium Basic","stack":"\"Gentium Basic\", serif","weights":["400","400i","700","700i"]},{"family":"Gentium Book Basic","stack":"\"Gentium Book Basic\", serif","weights":["400","400i","700","700i"]},{"family":"Geo","stack":"\"Geo\", sans-serif","weights":["400","400i"]},{"family":"Geostar","stack":"\"Geostar\", display","weights":["400"]},{"family":"Geostar Fill","stack":"\"Geostar Fill\", display","weights":["400"]},{"family":"Germania One","stack":"\"Germania One\", display","weights":["400"]},{"family":"Gidugu","stack":"\"Gidugu\", sans-serif","weights":["400"]},{"family":"Gilda Display","stack":"\"Gilda Display\", serif","weights":["400"]},{"family":"Give You Glory","stack":"\"Give You Glory\", handwriting","weights":["400"]},{"family":"Glass Antiqua","stack":"\"Glass Antiqua\", display","weights":["400"]},{"family":"Glegoo","stack":"\"Glegoo\", serif","weights":["400","700"]},{"family":"Gloria Hallelujah","stack":"\"Gloria Hallelujah\", handwriting","weights":["400"]},{"family":"Goblin One","stack":"\"Goblin One\", display","weights":["400"]},{"family":"Gochi Hand","stack":"\"Gochi Hand\", handwriting","weights":["400"]},{"family":"Gorditas","stack":"\"Gorditas\", display","weights":["400","700"]},{"family":"Goudy Bookletter 1911","stack":"\"Goudy Bookletter 1911\", serif","weights":["400"]},{"family":"Graduate","stack":"\"Graduate\", display","weights":["400"]},{"family":"Grand Hotel","stack":"\"Grand Hotel\", handwriting","weights":["400"]},{"family":"Gravitas One","stack":"\"Gravitas One\", display","weights":["400"]},{"family":"Great Vibes","stack":"\"Great Vibes\", handwriting","weights":["400"]},{"family":"Griffy","stack":"\"Griffy\", display","weights":["400"]},{"family":"Gruppo","stack":"\"Gruppo\", display","weights":["400"]},{"family":"Gudea","stack":"\"Gudea\", sans-serif","weights":["400","400i","700"]},{"family":"Gurajada","stack":"\"Gurajada\", serif","weights":["400"]},{"family":"Habibi","stack":"\"Habibi\", serif","weights":["400"]},{"family":"Halant","stack":"\"Halant\", serif","weights":["300","400","500","600","700"]},{"family":"Hammersmith One","stack":"\"Hammersmith One\", sans-serif","weights":["400"]},{"family":"Hanalei","stack":"\"Hanalei\", display","weights":["400"]},{"family":"Hanalei Fill","stack":"\"Hanalei Fill\", display","weights":["400"]},{"family":"Handlee","stack":"\"Handlee\", handwriting","weights":["400"]},{"family":"Hanuman","stack":"\"Hanuman\", serif","weights":["400","700"]},{"family":"Happy Monkey","stack":"\"Happy Monkey\", display","weights":["400"]},{"family":"Harmattan","stack":"\"Harmattan\", sans-serif","weights":["400"]},{"family":"Headland One","stack":"\"Headland One\", serif","weights":["400"]},{"family":"Heebo","stack":"\"Heebo\", sans-serif","weights":["100","300","400","500","700","800","900"]},{"family":"Henny Penny","stack":"\"Henny Penny\", display","weights":["400"]},{"family":"Herr Von Muellerhoff","stack":"\"Herr Von Muellerhoff\", handwriting","weights":["400"]},{"family":"Hind","stack":"\"Hind\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Hind Guntur","stack":"\"Hind Guntur\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Hind Madurai","stack":"\"Hind Madurai\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Hind Siliguri","stack":"\"Hind Siliguri\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Hind Vadodara","stack":"\"Hind Vadodara\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Holtwood One SC","stack":"\"Holtwood One SC\", serif","weights":["400"]},{"family":"Homemade Apple","stack":"\"Homemade Apple\", handwriting","weights":["400"]},{"family":"Homenaje","stack":"\"Homenaje\", sans-serif","weights":["400"]},{"family":"IM Fell DW Pica","stack":"\"IM Fell DW Pica\", serif","weights":["400","400i"]},{"family":"IM Fell DW Pica SC","stack":"\"IM Fell DW Pica SC\", serif","weights":["400"]},{"family":"IM Fell Double Pica","stack":"\"IM Fell Double Pica\", serif","weights":["400","400i"]},{"family":"IM Fell Double Pica SC","stack":"\"IM Fell Double Pica SC\", serif","weights":["400"]},{"family":"IM Fell English","stack":"\"IM Fell English\", serif","weights":["400","400i"]},{"family":"IM Fell English SC","stack":"\"IM Fell English SC\", serif","weights":["400"]},{"family":"IM Fell French Canon","stack":"\"IM Fell French Canon\", serif","weights":["400","400i"]},{"family":"IM Fell French Canon SC","stack":"\"IM Fell French Canon SC\", serif","weights":["400"]},{"family":"IM Fell Great Primer","stack":"\"IM Fell Great Primer\", serif","weights":["400","400i"]},{"family":"IM Fell Great Primer SC","stack":"\"IM Fell Great Primer SC\", serif","weights":["400"]},{"family":"Iceberg","stack":"\"Iceberg\", display","weights":["400"]},{"family":"Iceland","stack":"\"Iceland\", display","weights":["400"]},{"family":"Imprima","stack":"\"Imprima\", sans-serif","weights":["400"]},{"family":"Inconsolata","stack":"\"Inconsolata\", monospace","weights":["400","700"]},{"family":"Inder","stack":"\"Inder\", sans-serif","weights":["400"]},{"family":"Indie Flower","stack":"\"Indie Flower\", handwriting","weights":["400"]},{"family":"Inika","stack":"\"Inika\", serif","weights":["400","700"]},{"family":"Inknut Antiqua","stack":"\"Inknut Antiqua\", serif","weights":["300","400","500","600","700","800","900"]},{"family":"Irish Grover","stack":"\"Irish Grover\", display","weights":["400"]},{"family":"Istok Web","stack":"\"Istok Web\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Italiana","stack":"\"Italiana\", serif","weights":["400"]},{"family":"Italianno","stack":"\"Italianno\", handwriting","weights":["400"]},{"family":"Itim","stack":"\"Itim\", handwriting","weights":["400"]},{"family":"Jacques Francois","stack":"\"Jacques Francois\", serif","weights":["400"]},{"family":"Jacques Francois Shadow","stack":"\"Jacques Francois Shadow\", display","weights":["400"]},{"family":"Jaldi","stack":"\"Jaldi\", sans-serif","weights":["400","700"]},{"family":"Jim Nightshade","stack":"\"Jim Nightshade\", handwriting","weights":["400"]},{"family":"Jockey One","stack":"\"Jockey One\", sans-serif","weights":["400"]},{"family":"Jolly Lodger","stack":"\"Jolly Lodger\", display","weights":["400"]},{"family":"Jomhuria","stack":"\"Jomhuria\", display","weights":["400"]},{"family":"Josefin Sans","stack":"\"Josefin Sans\", sans-serif","weights":["100","100i","300","300i","400","400i","600","600i","700","700i"]},{"family":"Josefin Slab","stack":"\"Josefin Slab\", serif","weights":["100","100i","300","300i","400","400i","600","600i","700","700i"]},{"family":"Joti One","stack":"\"Joti One\", display","weights":["400"]},{"family":"Judson","stack":"\"Judson\", serif","weights":["400","400i","700"]},{"family":"Julee","stack":"\"Julee\", handwriting","weights":["400"]},{"family":"Julius Sans One","stack":"\"Julius Sans One\", sans-serif","weights":["400"]},{"family":"Junge","stack":"\"Junge\", serif","weights":["400"]},{"family":"Jura","stack":"\"Jura\", sans-serif","weights":["300","400","500","600"]},{"family":"Just Another Hand","stack":"\"Just Another Hand\", handwriting","weights":["400"]},{"family":"Just Me Again Down Here","stack":"\"Just Me Again Down Here\", handwriting","weights":["400"]},{"family":"Kadwa","stack":"\"Kadwa\", serif","weights":["400","700"]},{"family":"Kalam","stack":"\"Kalam\", handwriting","weights":["300","400","700"]},{"family":"Kameron","stack":"\"Kameron\", serif","weights":["400","700"]},{"family":"Kanit","stack":"\"Kanit\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Kantumruy","stack":"\"Kantumruy\", sans-serif","weights":["300","400","700"]},{"family":"Karla","stack":"\"Karla\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Karma","stack":"\"Karma\", serif","weights":["300","400","500","600","700"]},{"family":"Katibeh","stack":"\"Katibeh\", display","weights":["400"]},{"family":"Kaushan Script","stack":"\"Kaushan Script\", handwriting","weights":["400"]},{"family":"Kavivanar","stack":"\"Kavivanar\", handwriting","weights":["400"]},{"family":"Kavoon","stack":"\"Kavoon\", display","weights":["400"]},{"family":"Kdam Thmor","stack":"\"Kdam Thmor\", display","weights":["400"]},{"family":"Keania One","stack":"\"Keania One\", display","weights":["400"]},{"family":"Kelly Slab","stack":"\"Kelly Slab\", display","weights":["400"]},{"family":"Kenia","stack":"\"Kenia\", display","weights":["400"]},{"family":"Khand","stack":"\"Khand\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Khmer","stack":"\"Khmer\", display","weights":["400"]},{"family":"Khula","stack":"\"Khula\", sans-serif","weights":["300","400","600","700","800"]},{"family":"Kite One","stack":"\"Kite One\", sans-serif","weights":["400"]},{"family":"Knewave","stack":"\"Knewave\", display","weights":["400"]},{"family":"Kotta One","stack":"\"Kotta One\", serif","weights":["400"]},{"family":"Koulen","stack":"\"Koulen\", display","weights":["400"]},{"family":"Kranky","stack":"\"Kranky\", display","weights":["400"]},{"family":"Kreon","stack":"\"Kreon\", serif","weights":["300","400","700"]},{"family":"Kristi","stack":"\"Kristi\", handwriting","weights":["400"]},{"family":"Krona One","stack":"\"Krona One\", sans-serif","weights":["400"]},{"family":"Kumar One","stack":"\"Kumar One\", display","weights":["400"]},{"family":"Kumar One Outline","stack":"\"Kumar One Outline\", display","weights":["400"]},{"family":"Kurale","stack":"\"Kurale\", serif","weights":["400"]},{"family":"La Belle Aurore","stack":"\"La Belle Aurore\", handwriting","weights":["400"]},{"family":"Laila","stack":"\"Laila\", serif","weights":["300","400","500","600","700"]},{"family":"Lakki Reddy","stack":"\"Lakki Reddy\", handwriting","weights":["400"]},{"family":"Lalezar","stack":"\"Lalezar\", display","weights":["400"]},{"family":"Lancelot","stack":"\"Lancelot\", display","weights":["400"]},{"family":"Lateef","stack":"\"Lateef\", handwriting","weights":["400"]},{"family":"Lato","stack":"\"Lato\", sans-serif","weights":["100","100i","300","300i","400","400i","700","700i","900","900i"]},{"family":"League Script","stack":"\"League Script\", handwriting","weights":["400"]},{"family":"Leckerli One","stack":"\"Leckerli One\", handwriting","weights":["400"]},{"family":"Ledger","stack":"\"Ledger\", serif","weights":["400"]},{"family":"Lekton","stack":"\"Lekton\", sans-serif","weights":["400","400i","700"]},{"family":"Lemon","stack":"\"Lemon\", display","weights":["400"]},{"family":"Lemonada","stack":"\"Lemonada\", display","weights":["300","400","600","700"]},{"family":"Libre Baskerville","stack":"\"Libre Baskerville\", serif","weights":["400","400i","700"]},{"family":"Libre Franklin","stack":"\"Libre Franklin\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Life Savers","stack":"\"Life Savers\", display","weights":["400","700"]},{"family":"Lilita One","stack":"\"Lilita One\", display","weights":["400"]},{"family":"Lily Script One","stack":"\"Lily Script One\", display","weights":["400"]},{"family":"Limelight","stack":"\"Limelight\", display","weights":["400"]},{"family":"Linden Hill","stack":"\"Linden Hill\", serif","weights":["400","400i"]},{"family":"Lobster","stack":"\"Lobster\", display","weights":["400"]},{"family":"Lobster Two","stack":"\"Lobster Two\", display","weights":["400","400i","700","700i"]},{"family":"Londrina Outline","stack":"\"Londrina Outline\", display","weights":["400"]},{"family":"Londrina Shadow","stack":"\"Londrina Shadow\", display","weights":["400"]},{"family":"Londrina Sketch","stack":"\"Londrina Sketch\", display","weights":["400"]},{"family":"Londrina Solid","stack":"\"Londrina Solid\", display","weights":["400"]},{"family":"Lora","stack":"\"Lora\", serif","weights":["400","400i","700","700i"]},{"family":"Love Ya Like A Sister","stack":"\"Love Ya Like A Sister\", display","weights":["400"]},{"family":"Loved by the King","stack":"\"Loved by the King\", handwriting","weights":["400"]},{"family":"Lovers Quarrel","stack":"\"Lovers Quarrel\", handwriting","weights":["400"]},{"family":"Luckiest Guy","stack":"\"Luckiest Guy\", display","weights":["400"]},{"family":"Lusitana","stack":"\"Lusitana\", serif","weights":["400","700"]},{"family":"Lustria","stack":"\"Lustria\", serif","weights":["400"]},{"family":"Macondo","stack":"\"Macondo\", display","weights":["400"]},{"family":"Macondo Swash Caps","stack":"\"Macondo Swash Caps\", display","weights":["400"]},{"family":"Mada","stack":"\"Mada\", sans-serif","weights":["300","400","500","900"]},{"family":"Magra","stack":"\"Magra\", sans-serif","weights":["400","700"]},{"family":"Maiden Orange","stack":"\"Maiden Orange\", display","weights":["400"]},{"family":"Maitree","stack":"\"Maitree\", serif","weights":["200","300","400","500","600","700"]},{"family":"Mako","stack":"\"Mako\", sans-serif","weights":["400"]},{"family":"Mallanna","stack":"\"Mallanna\", sans-serif","weights":["400"]},{"family":"Mandali","stack":"\"Mandali\", sans-serif","weights":["400"]},{"family":"Marcellus","stack":"\"Marcellus\", serif","weights":["400"]},{"family":"Marcellus SC","stack":"\"Marcellus SC\", serif","weights":["400"]},{"family":"Marck Script","stack":"\"Marck Script\", handwriting","weights":["400"]},{"family":"Margarine","stack":"\"Margarine\", display","weights":["400"]},{"family":"Marko One","stack":"\"Marko One\", serif","weights":["400"]},{"family":"Marmelad","stack":"\"Marmelad\", sans-serif","weights":["400"]},{"family":"Martel","stack":"\"Martel\", serif","weights":["200","300","400","600","700","800","900"]},{"family":"Martel Sans","stack":"\"Martel Sans\", sans-serif","weights":["200","300","400","600","700","800","900"]},{"family":"Marvel","stack":"\"Marvel\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Mate","stack":"\"Mate\", serif","weights":["400","400i"]},{"family":"Mate SC","stack":"\"Mate SC\", serif","weights":["400"]},{"family":"Maven Pro","stack":"\"Maven Pro\", sans-serif","weights":["400","500","700","900"]},{"family":"McLaren","stack":"\"McLaren\", display","weights":["400"]},{"family":"Meddon","stack":"\"Meddon\", handwriting","weights":["400"]},{"family":"MedievalSharp","stack":"\"MedievalSharp\", display","weights":["400"]},{"family":"Medula One","stack":"\"Medula One\", display","weights":["400"]},{"family":"Meera Inimai","stack":"\"Meera Inimai\", sans-serif","weights":["400"]},{"family":"Megrim","stack":"\"Megrim\", display","weights":["400"]},{"family":"Meie Script","stack":"\"Meie Script\", handwriting","weights":["400"]},{"family":"Merienda","stack":"\"Merienda\", handwriting","weights":["400","700"]},{"family":"Merienda One","stack":"\"Merienda One\", handwriting","weights":["400"]},{"family":"Merriweather","stack":"\"Merriweather\", serif","weights":["300","300i","400","400i","700","700i","900","900i"]},{"family":"Merriweather Sans","stack":"\"Merriweather Sans\", sans-serif","weights":["300","300i","400","400i","700","700i","800","800i"]},{"family":"Metal","stack":"\"Metal\", display","weights":["400"]},{"family":"Metal Mania","stack":"\"Metal Mania\", display","weights":["400"]},{"family":"Metamorphous","stack":"\"Metamorphous\", display","weights":["400"]},{"family":"Metrophobic","stack":"\"Metrophobic\", sans-serif","weights":["400"]},{"family":"Michroma","stack":"\"Michroma\", sans-serif","weights":["400"]},{"family":"Milonga","stack":"\"Milonga\", display","weights":["400"]},{"family":"Miltonian","stack":"\"Miltonian\", display","weights":["400"]},{"family":"Miltonian Tattoo","stack":"\"Miltonian Tattoo\", display","weights":["400"]},{"family":"Miniver","stack":"\"Miniver\", display","weights":["400"]},{"family":"Miriam Libre","stack":"\"Miriam Libre\", sans-serif","weights":["400","700"]},{"family":"Mirza","stack":"\"Mirza\", display","weights":["400","500","600","700"]},{"family":"Miss Fajardose","stack":"\"Miss Fajardose\", handwriting","weights":["400"]},{"family":"Mitr","stack":"\"Mitr\", sans-serif","weights":["200","300","400","500","600","700"]},{"family":"Modak","stack":"\"Modak\", display","weights":["400"]},{"family":"Modern Antiqua","stack":"\"Modern Antiqua\", display","weights":["400"]},{"family":"Mogra","stack":"\"Mogra\", display","weights":["400"]},{"family":"Molengo","stack":"\"Molengo\", sans-serif","weights":["400"]},{"family":"Molle","stack":"\"Molle\", handwriting","weights":["400i"]},{"family":"Monda","stack":"\"Monda\", sans-serif","weights":["400","700"]},{"family":"Monofett","stack":"\"Monofett\", display","weights":["400"]},{"family":"Monoton","stack":"\"Monoton\", display","weights":["400"]},{"family":"Monsieur La Doulaise","stack":"\"Monsieur La Doulaise\", handwriting","weights":["400"]},{"family":"Montaga","stack":"\"Montaga\", serif","weights":["400"]},{"family":"Montez","stack":"\"Montez\", handwriting","weights":["400"]},{"family":"Montserrat","stack":"\"Montserrat\", sans-serif","weights":["400","700"]},{"family":"Montserrat Alternates","stack":"\"Montserrat Alternates\", sans-serif","weights":["400","700"]},{"family":"Montserrat Subrayada","stack":"\"Montserrat Subrayada\", sans-serif","weights":["400","700"]},{"family":"Moul","stack":"\"Moul\", display","weights":["400"]},{"family":"Moulpali","stack":"\"Moulpali\", display","weights":["400"]},{"family":"Mountains of Christmas","stack":"\"Mountains of Christmas\", display","weights":["400","700"]},{"family":"Mouse Memoirs","stack":"\"Mouse Memoirs\", sans-serif","weights":["400"]},{"family":"Mr Bedfort","stack":"\"Mr Bedfort\", handwriting","weights":["400"]},{"family":"Mr Dafoe","stack":"\"Mr Dafoe\", handwriting","weights":["400"]},{"family":"Mr De Haviland","stack":"\"Mr De Haviland\", handwriting","weights":["400"]},{"family":"Mrs Saint Delafield","stack":"\"Mrs Saint Delafield\", handwriting","weights":["400"]},{"family":"Mrs Sheppards","stack":"\"Mrs Sheppards\", handwriting","weights":["400"]},{"family":"Mukta Vaani","stack":"\"Mukta Vaani\", sans-serif","weights":["200","300","400","500","600","700","800"]},{"family":"Muli","stack":"\"Muli\", sans-serif","weights":["200","200i","300","300i","400","400i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Mystery Quest","stack":"\"Mystery Quest\", display","weights":["400"]},{"family":"NTR","stack":"\"NTR\", sans-serif","weights":["400"]},{"family":"Neucha","stack":"\"Neucha\", handwriting","weights":["400"]},{"family":"Neuton","stack":"\"Neuton\", serif","weights":["200","300","400","400i","700","800"]},{"family":"New Rocker","stack":"\"New Rocker\", display","weights":["400"]},{"family":"News Cycle","stack":"\"News Cycle\", sans-serif","weights":["400","700"]},{"family":"Niconne","stack":"\"Niconne\", handwriting","weights":["400"]},{"family":"Nixie One","stack":"\"Nixie One\", display","weights":["400"]},{"family":"Nobile","stack":"\"Nobile\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Nokora","stack":"\"Nokora\", serif","weights":["400","700"]},{"family":"Norican","stack":"\"Norican\", handwriting","weights":["400"]},{"family":"Nosifer","stack":"\"Nosifer\", display","weights":["400"]},{"family":"Nothing You Could Do","stack":"\"Nothing You Could Do\", handwriting","weights":["400"]},{"family":"Noticia Text","stack":"\"Noticia Text\", serif","weights":["400","400i","700","700i"]},{"family":"Noto Sans","stack":"\"Noto Sans\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Noto Serif","stack":"\"Noto Serif\", serif","weights":["400","400i","700","700i"]},{"family":"Nova Cut","stack":"\"Nova Cut\", display","weights":["400"]},{"family":"Nova Flat","stack":"\"Nova Flat\", display","weights":["400"]},{"family":"Nova Mono","stack":"\"Nova Mono\", monospace","weights":["400"]},{"family":"Nova Oval","stack":"\"Nova Oval\", display","weights":["400"]},{"family":"Nova Round","stack":"\"Nova Round\", display","weights":["400"]},{"family":"Nova Script","stack":"\"Nova Script\", display","weights":["400"]},{"family":"Nova Slim","stack":"\"Nova Slim\", display","weights":["400"]},{"family":"Nova Square","stack":"\"Nova Square\", display","weights":["400"]},{"family":"Numans","stack":"\"Numans\", sans-serif","weights":["400"]},{"family":"Nunito","stack":"\"Nunito\", sans-serif","weights":["200","200i","300","300i","400","400i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Nunito Sans","stack":"\"Nunito Sans\", sans-serif","weights":["200","200i","300","300i","400","400i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Odor Mean Chey","stack":"\"Odor Mean Chey\", display","weights":["400"]},{"family":"Offside","stack":"\"Offside\", display","weights":["400"]},{"family":"Old Standard TT","stack":"\"Old Standard TT\", serif","weights":["400","400i","700"]},{"family":"Oldenburg","stack":"\"Oldenburg\", display","weights":["400"]},{"family":"Oleo Script","stack":"\"Oleo Script\", display","weights":["400","700"]},{"family":"Oleo Script Swash Caps","stack":"\"Oleo Script Swash Caps\", display","weights":["400","700"]},{"family":"Open Sans","stack":"\"Open Sans\", sans-serif","weights":["300","300i","400","400i","600","600i","700","700i","800","800i"]},{"family":"Open Sans Condensed","stack":"\"Open Sans Condensed\", sans-serif","weights":["300","300i","700"]},{"family":"Oranienbaum","stack":"\"Oranienbaum\", serif","weights":["400"]},{"family":"Orbitron","stack":"\"Orbitron\", sans-serif","weights":["400","500","700","900"]},{"family":"Oregano","stack":"\"Oregano\", display","weights":["400","400i"]},{"family":"Orienta","stack":"\"Orienta\", sans-serif","weights":["400"]},{"family":"Original Surfer","stack":"\"Original Surfer\", display","weights":["400"]},{"family":"Oswald","stack":"\"Oswald\", sans-serif","weights":["300","400","700"]},{"family":"Over the Rainbow","stack":"\"Over the Rainbow\", handwriting","weights":["400"]},{"family":"Overlock","stack":"\"Overlock\", display","weights":["400","400i","700","700i","900","900i"]},{"family":"Overlock SC","stack":"\"Overlock SC\", display","weights":["400"]},{"family":"Overpass","stack":"\"Overpass\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Overpass Mono","stack":"\"Overpass Mono\", monospace","weights":["300","400","600","700"]},{"family":"Ovo","stack":"\"Ovo\", serif","weights":["400"]},{"family":"Oxygen","stack":"\"Oxygen\", sans-serif","weights":["300","400","700"]},{"family":"Oxygen Mono","stack":"\"Oxygen Mono\", monospace","weights":["400"]},{"family":"PT Mono","stack":"\"PT Mono\", monospace","weights":["400"]},{"family":"PT Sans","stack":"\"PT Sans\", sans-serif","weights":["400","400i","700","700i"]},{"family":"PT Sans Caption","stack":"\"PT Sans Caption\", sans-serif","weights":["400","700"]},{"family":"PT Sans Narrow","stack":"\"PT Sans Narrow\", sans-serif","weights":["400","700"]},{"family":"PT Serif","stack":"\"PT Serif\", serif","weights":["400","400i","700","700i"]},{"family":"PT Serif Caption","stack":"\"PT Serif Caption\", serif","weights":["400","400i"]},{"family":"Pacifico","stack":"\"Pacifico\", handwriting","weights":["400"]},{"family":"Padauk","stack":"\"Padauk\", sans-serif","weights":["400","700"]},{"family":"Palanquin","stack":"\"Palanquin\", sans-serif","weights":["100","200","300","400","500","600","700"]},{"family":"Palanquin Dark","stack":"\"Palanquin Dark\", sans-serif","weights":["400","500","600","700"]},{"family":"Paprika","stack":"\"Paprika\", display","weights":["400"]},{"family":"Parisienne","stack":"\"Parisienne\", handwriting","weights":["400"]},{"family":"Passero One","stack":"\"Passero One\", display","weights":["400"]},{"family":"Passion One","stack":"\"Passion One\", display","weights":["400","700","900"]},{"family":"Pathway Gothic One","stack":"\"Pathway Gothic One\", sans-serif","weights":["400"]},{"family":"Patrick Hand","stack":"\"Patrick Hand\", handwriting","weights":["400"]},{"family":"Patrick Hand SC","stack":"\"Patrick Hand SC\", handwriting","weights":["400"]},{"family":"Pattaya","stack":"\"Pattaya\", sans-serif","weights":["400"]},{"family":"Patua One","stack":"\"Patua One\", display","weights":["400"]},{"family":"Pavanam","stack":"\"Pavanam\", sans-serif","weights":["400"]},{"family":"Paytone One","stack":"\"Paytone One\", sans-serif","weights":["400"]},{"family":"Peddana","stack":"\"Peddana\", serif","weights":["400"]},{"family":"Peralta","stack":"\"Peralta\", display","weights":["400"]},{"family":"Permanent Marker","stack":"\"Permanent Marker\", handwriting","weights":["400"]},{"family":"Petit Formal Script","stack":"\"Petit Formal Script\", handwriting","weights":["400"]},{"family":"Petrona","stack":"\"Petrona\", serif","weights":["400"]},{"family":"Philosopher","stack":"\"Philosopher\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Piedra","stack":"\"Piedra\", display","weights":["400"]},{"family":"Pinyon Script","stack":"\"Pinyon Script\", handwriting","weights":["400"]},{"family":"Pirata One","stack":"\"Pirata One\", display","weights":["400"]},{"family":"Plaster","stack":"\"Plaster\", display","weights":["400"]},{"family":"Play","stack":"\"Play\", sans-serif","weights":["400","700"]},{"family":"Playball","stack":"\"Playball\", display","weights":["400"]},{"family":"Playfair Display","stack":"\"Playfair Display\", serif","weights":["400","400i","700","700i","900","900i"]},{"family":"Playfair Display SC","stack":"\"Playfair Display SC\", serif","weights":["400","400i","700","700i","900","900i"]},{"family":"Podkova","stack":"\"Podkova\", serif","weights":["400","700"]},{"family":"Poiret One","stack":"\"Poiret One\", display","weights":["400"]},{"family":"Poller One","stack":"\"Poller One\", display","weights":["400"]},{"family":"Poly","stack":"\"Poly\", serif","weights":["400","400i"]},{"family":"Pompiere","stack":"\"Pompiere\", display","weights":["400"]},{"family":"Pontano Sans","stack":"\"Pontano Sans\", sans-serif","weights":["400"]},{"family":"Poppins","stack":"\"Poppins\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Port Lligat Sans","stack":"\"Port Lligat Sans\", sans-serif","weights":["400"]},{"family":"Port Lligat Slab","stack":"\"Port Lligat Slab\", serif","weights":["400"]},{"family":"Pragati Narrow","stack":"\"Pragati Narrow\", sans-serif","weights":["400","700"]},{"family":"Prata","stack":"\"Prata\", serif","weights":["400"]},{"family":"Preahvihear","stack":"\"Preahvihear\", display","weights":["400"]},{"family":"Press Start 2P","stack":"\"Press Start 2P\", display","weights":["400"]},{"family":"Pridi","stack":"\"Pridi\", serif","weights":["200","300","400","500","600","700"]},{"family":"Princess Sofia","stack":"\"Princess Sofia\", handwriting","weights":["400"]},{"family":"Prociono","stack":"\"Prociono\", serif","weights":["400"]},{"family":"Prompt","stack":"\"Prompt\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Prosto One","stack":"\"Prosto One\", display","weights":["400"]},{"family":"Proza Libre","stack":"\"Proza Libre\", sans-serif","weights":["400","400i","500","500i","600","600i","700","700i","800","800i"]},{"family":"Puritan","stack":"\"Puritan\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Purple Purse","stack":"\"Purple Purse\", display","weights":["400"]},{"family":"Quando","stack":"\"Quando\", serif","weights":["400"]},{"family":"Quantico","stack":"\"Quantico\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Quattrocento","stack":"\"Quattrocento\", serif","weights":["400","700"]},{"family":"Quattrocento Sans","stack":"\"Quattrocento Sans\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Questrial","stack":"\"Questrial\", sans-serif","weights":["400"]},{"family":"Quicksand","stack":"\"Quicksand\", sans-serif","weights":["300","400","500","700"]},{"family":"Quintessential","stack":"\"Quintessential\", handwriting","weights":["400"]},{"family":"Qwigley","stack":"\"Qwigley\", handwriting","weights":["400"]},{"family":"Racing Sans One","stack":"\"Racing Sans One\", display","weights":["400"]},{"family":"Radley","stack":"\"Radley\", serif","weights":["400","400i"]},{"family":"Rajdhani","stack":"\"Rajdhani\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Rakkas","stack":"\"Rakkas\", display","weights":["400"]},{"family":"Raleway","stack":"\"Raleway\", sans-serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Raleway Dots","stack":"\"Raleway Dots\", display","weights":["400"]},{"family":"Ramabhadra","stack":"\"Ramabhadra\", sans-serif","weights":["400"]},{"family":"Ramaraja","stack":"\"Ramaraja\", serif","weights":["400"]},{"family":"Rambla","stack":"\"Rambla\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Rammetto One","stack":"\"Rammetto One\", display","weights":["400"]},{"family":"Ranchers","stack":"\"Ranchers\", display","weights":["400"]},{"family":"Rancho","stack":"\"Rancho\", handwriting","weights":["400"]},{"family":"Ranga","stack":"\"Ranga\", display","weights":["400","700"]},{"family":"Rasa","stack":"\"Rasa\", serif","weights":["300","400","500","600","700"]},{"family":"Rationale","stack":"\"Rationale\", sans-serif","weights":["400"]},{"family":"Ravi Prakash","stack":"\"Ravi Prakash\", display","weights":["400"]},{"family":"Redressed","stack":"\"Redressed\", handwriting","weights":["400"]},{"family":"Reem Kufi","stack":"\"Reem Kufi\", sans-serif","weights":["400"]},{"family":"Reenie Beanie","stack":"\"Reenie Beanie\", handwriting","weights":["400"]},{"family":"Revalia","stack":"\"Revalia\", display","weights":["400"]},{"family":"Rhodium Libre","stack":"\"Rhodium Libre\", serif","weights":["400"]},{"family":"Ribeye","stack":"\"Ribeye\", display","weights":["400"]},{"family":"Ribeye Marrow","stack":"\"Ribeye Marrow\", display","weights":["400"]},{"family":"Righteous","stack":"\"Righteous\", display","weights":["400"]},{"family":"Risque","stack":"\"Risque\", display","weights":["400"]},{"family":"Roboto","stack":"\"Roboto\", sans-serif","weights":["100","100i","300","300i","400","400i","500","500i","700","700i","900","900i"]},{"family":"Roboto Condensed","stack":"\"Roboto Condensed\", sans-serif","weights":["300","300i","400","400i","700","700i"]},{"family":"Roboto Mono","stack":"\"Roboto Mono\", monospace","weights":["100","100i","300","300i","400","400i","500","500i","700","700i"]},{"family":"Roboto Slab","stack":"\"Roboto Slab\", serif","weights":["100","300","400","700"]},{"family":"Rochester","stack":"\"Rochester\", handwriting","weights":["400"]},{"family":"Rock Salt","stack":"\"Rock Salt\", handwriting","weights":["400"]},{"family":"Rokkitt","stack":"\"Rokkitt\", serif","weights":["400","700"]},{"family":"Romanesco","stack":"\"Romanesco\", handwriting","weights":["400"]},{"family":"Ropa Sans","stack":"\"Ropa Sans\", sans-serif","weights":["400","400i"]},{"family":"Rosario","stack":"\"Rosario\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Rosarivo","stack":"\"Rosarivo\", serif","weights":["400","400i"]},{"family":"Rouge Script","stack":"\"Rouge Script\", handwriting","weights":["400"]},{"family":"Rozha One","stack":"\"Rozha One\", serif","weights":["400"]},{"family":"Rubik","stack":"\"Rubik\", sans-serif","weights":["300","300i","400","400i","500","500i","700","700i","900","900i"]},{"family":"Rubik Mono One","stack":"\"Rubik Mono One\", sans-serif","weights":["400"]},{"family":"Ruda","stack":"\"Ruda\", sans-serif","weights":["400","700","900"]},{"family":"Rufina","stack":"\"Rufina\", serif","weights":["400","700"]},{"family":"Ruge Boogie","stack":"\"Ruge Boogie\", handwriting","weights":["400"]},{"family":"Ruluko","stack":"\"Ruluko\", sans-serif","weights":["400"]},{"family":"Rum Raisin","stack":"\"Rum Raisin\", sans-serif","weights":["400"]},{"family":"Ruslan Display","stack":"\"Ruslan Display\", display","weights":["400"]},{"family":"Russo One","stack":"\"Russo One\", sans-serif","weights":["400"]},{"family":"Ruthie","stack":"\"Ruthie\", handwriting","weights":["400"]},{"family":"Rye","stack":"\"Rye\", display","weights":["400"]},{"family":"Sacramento","stack":"\"Sacramento\", handwriting","weights":["400"]},{"family":"Sahitya","stack":"\"Sahitya\", serif","weights":["400","700"]},{"family":"Sail","stack":"\"Sail\", display","weights":["400"]},{"family":"Salsa","stack":"\"Salsa\", display","weights":["400"]},{"family":"Sanchez","stack":"\"Sanchez\", serif","weights":["400","400i"]},{"family":"Sancreek","stack":"\"Sancreek\", display","weights":["400"]},{"family":"Sansita One","stack":"\"Sansita One\", display","weights":["400"]},{"family":"Sarala","stack":"\"Sarala\", sans-serif","weights":["400","700"]},{"family":"Sarina","stack":"\"Sarina\", display","weights":["400"]},{"family":"Sarpanch","stack":"\"Sarpanch\", sans-serif","weights":["400","500","600","700","800","900"]},{"family":"Satisfy","stack":"\"Satisfy\", handwriting","weights":["400"]},{"family":"Scada","stack":"\"Scada\", sans-serif","weights":["400","400i","700","700i"]},{"family":"Scheherazade","stack":"\"Scheherazade\", serif","weights":["400","700"]},{"family":"Schoolbell","stack":"\"Schoolbell\", handwriting","weights":["400"]},{"family":"Scope One","stack":"\"Scope One\", serif","weights":["400"]},{"family":"Seaweed Script","stack":"\"Seaweed Script\", display","weights":["400"]},{"family":"Secular One","stack":"\"Secular One\", sans-serif","weights":["400"]},{"family":"Sevillana","stack":"\"Sevillana\", display","weights":["400"]},{"family":"Seymour One","stack":"\"Seymour One\", sans-serif","weights":["400"]},{"family":"Shadows Into Light","stack":"\"Shadows Into Light\", handwriting","weights":["400"]},{"family":"Shadows Into Light Two","stack":"\"Shadows Into Light Two\", handwriting","weights":["400"]},{"family":"Shanti","stack":"\"Shanti\", sans-serif","weights":["400"]},{"family":"Share","stack":"\"Share\", display","weights":["400","400i","700","700i"]},{"family":"Share Tech","stack":"\"Share Tech\", sans-serif","weights":["400"]},{"family":"Share Tech Mono","stack":"\"Share Tech Mono\", monospace","weights":["400"]},{"family":"Shojumaru","stack":"\"Shojumaru\", display","weights":["400"]},{"family":"Short Stack","stack":"\"Short Stack\", handwriting","weights":["400"]},{"family":"Shrikhand","stack":"\"Shrikhand\", display","weights":["400"]},{"family":"Siemreap","stack":"\"Siemreap\", display","weights":["400"]},{"family":"Sigmar One","stack":"\"Sigmar One\", display","weights":["400"]},{"family":"Signika","stack":"\"Signika\", sans-serif","weights":["300","400","600","700"]},{"family":"Signika Negative","stack":"\"Signika Negative\", sans-serif","weights":["300","400","600","700"]},{"family":"Simonetta","stack":"\"Simonetta\", display","weights":["400","400i","900","900i"]},{"family":"Sintony","stack":"\"Sintony\", sans-serif","weights":["400","700"]},{"family":"Sirin Stencil","stack":"\"Sirin Stencil\", display","weights":["400"]},{"family":"Six Caps","stack":"\"Six Caps\", sans-serif","weights":["400"]},{"family":"Skranji","stack":"\"Skranji\", display","weights":["400","700"]},{"family":"Slabo 13px","stack":"\"Slabo 13px\", serif","weights":["400"]},{"family":"Slabo 27px","stack":"\"Slabo 27px\", serif","weights":["400"]},{"family":"Slackey","stack":"\"Slackey\", display","weights":["400"]},{"family":"Smokum","stack":"\"Smokum\", display","weights":["400"]},{"family":"Smythe","stack":"\"Smythe\", display","weights":["400"]},{"family":"Sniglet","stack":"\"Sniglet\", display","weights":["400","800"]},{"family":"Snippet","stack":"\"Snippet\", sans-serif","weights":["400"]},{"family":"Snowburst One","stack":"\"Snowburst One\", display","weights":["400"]},{"family":"Sofadi One","stack":"\"Sofadi One\", display","weights":["400"]},{"family":"Sofia","stack":"\"Sofia\", handwriting","weights":["400"]},{"family":"Sonsie One","stack":"\"Sonsie One\", display","weights":["400"]},{"family":"Sorts Mill Goudy","stack":"\"Sorts Mill Goudy\", serif","weights":["400","400i"]},{"family":"Source Code Pro","stack":"\"Source Code Pro\", monospace","weights":["200","300","400","500","600","700","900"]},{"family":"Source Sans Pro","stack":"\"Source Sans Pro\", sans-serif","weights":["200","200i","300","300i","400","400i","600","600i","700","700i","900","900i"]},{"family":"Source Serif Pro","stack":"\"Source Serif Pro\", serif","weights":["400","600","700"]},{"family":"Space Mono","stack":"\"Space Mono\", monospace","weights":["400","400i","700","700i"]},{"family":"Special Elite","stack":"\"Special Elite\", display","weights":["400"]},{"family":"Spicy Rice","stack":"\"Spicy Rice\", display","weights":["400"]},{"family":"Spinnaker","stack":"\"Spinnaker\", sans-serif","weights":["400"]},{"family":"Spirax","stack":"\"Spirax\", display","weights":["400"]},{"family":"Squada One","stack":"\"Squada One\", display","weights":["400"]},{"family":"Sree Krushnadevaraya","stack":"\"Sree Krushnadevaraya\", serif","weights":["400"]},{"family":"Sriracha","stack":"\"Sriracha\", handwriting","weights":["400"]},{"family":"Stalemate","stack":"\"Stalemate\", handwriting","weights":["400"]},{"family":"Stalinist One","stack":"\"Stalinist One\", display","weights":["400"]},{"family":"Stardos Stencil","stack":"\"Stardos Stencil\", display","weights":["400","700"]},{"family":"Stint Ultra Condensed","stack":"\"Stint Ultra Condensed\", display","weights":["400"]},{"family":"Stint Ultra Expanded","stack":"\"Stint Ultra Expanded\", display","weights":["400"]},{"family":"Stoke","stack":"\"Stoke\", serif","weights":["300","400"]},{"family":"Strait","stack":"\"Strait\", sans-serif","weights":["400"]},{"family":"Sue Ellen Francisco","stack":"\"Sue Ellen Francisco\", handwriting","weights":["400"]},{"family":"Suez One","stack":"\"Suez One\", serif","weights":["400"]},{"family":"Sumana","stack":"\"Sumana\", serif","weights":["400","700"]},{"family":"Sunshiney","stack":"\"Sunshiney\", handwriting","weights":["400"]},{"family":"Supermercado One","stack":"\"Supermercado One\", display","weights":["400"]},{"family":"Sura","stack":"\"Sura\", serif","weights":["400","700"]},{"family":"Suranna","stack":"\"Suranna\", serif","weights":["400"]},{"family":"Suravaram","stack":"\"Suravaram\", serif","weights":["400"]},{"family":"Suwannaphum","stack":"\"Suwannaphum\", display","weights":["400"]},{"family":"Swanky and Moo Moo","stack":"\"Swanky and Moo Moo\", handwriting","weights":["400"]},{"family":"Syncopate","stack":"\"Syncopate\", sans-serif","weights":["400","700"]},{"family":"Tangerine","stack":"\"Tangerine\", handwriting","weights":["400","700"]},{"family":"Taprom","stack":"\"Taprom\", display","weights":["400"]},{"family":"Tauri","stack":"\"Tauri\", sans-serif","weights":["400"]},{"family":"Taviraj","stack":"\"Taviraj\", serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Teko","stack":"\"Teko\", sans-serif","weights":["300","400","500","600","700"]},{"family":"Telex","stack":"\"Telex\", sans-serif","weights":["400"]},{"family":"Tenali Ramakrishna","stack":"\"Tenali Ramakrishna\", sans-serif","weights":["400"]},{"family":"Tenor Sans","stack":"\"Tenor Sans\", sans-serif","weights":["400"]},{"family":"Text Me One","stack":"\"Text Me One\", sans-serif","weights":["400"]},{"family":"The Girl Next Door","stack":"\"The Girl Next Door\", handwriting","weights":["400"]},{"family":"Tienne","stack":"\"Tienne\", serif","weights":["400","700","900"]},{"family":"Tillana","stack":"\"Tillana\", handwriting","weights":["400","500","600","700","800"]},{"family":"Timmana","stack":"\"Timmana\", sans-serif","weights":["400"]},{"family":"Tinos","stack":"\"Tinos\", serif","weights":["400","400i","700","700i"]},{"family":"Titan One","stack":"\"Titan One\", display","weights":["400"]},{"family":"Titillium Web","stack":"\"Titillium Web\", sans-serif","weights":["200","200i","300","300i","400","400i","600","600i","700","700i","900"]},{"family":"Trade Winds","stack":"\"Trade Winds\", display","weights":["400"]},{"family":"Trirong","stack":"\"Trirong\", serif","weights":["100","100i","200","200i","300","300i","400","400i","500","500i","600","600i","700","700i","800","800i","900","900i"]},{"family":"Trocchi","stack":"\"Trocchi\", serif","weights":["400"]},{"family":"Trochut","stack":"\"Trochut\", display","weights":["400","400i","700"]},{"family":"Trykker","stack":"\"Trykker\", serif","weights":["400"]},{"family":"Tulpen One","stack":"\"Tulpen One\", display","weights":["400"]},{"family":"Ubuntu","stack":"\"Ubuntu\", sans-serif","weights":["300","300i","400","400i","500","500i","700","700i"]},{"family":"Ubuntu Condensed","stack":"\"Ubuntu Condensed\", sans-serif","weights":["400"]},{"family":"Ubuntu Mono","stack":"\"Ubuntu Mono\", monospace","weights":["400","400i","700","700i"]},{"family":"Ultra","stack":"\"Ultra\", serif","weights":["400"]},{"family":"Uncial Antiqua","stack":"\"Uncial Antiqua\", display","weights":["400"]},{"family":"Underdog","stack":"\"Underdog\", display","weights":["400"]},{"family":"Unica One","stack":"\"Unica One\", display","weights":["400"]},{"family":"UnifrakturCook","stack":"\"UnifrakturCook\", display","weights":["700"]},{"family":"UnifrakturMaguntia","stack":"\"UnifrakturMaguntia\", display","weights":["400"]},{"family":"Unkempt","stack":"\"Unkempt\", display","weights":["400","700"]},{"family":"Unlock","stack":"\"Unlock\", display","weights":["400"]},{"family":"Unna","stack":"\"Unna\", serif","weights":["400"]},{"family":"VT323","stack":"\"VT323\", monospace","weights":["400"]},{"family":"Vampiro One","stack":"\"Vampiro One\", display","weights":["400"]},{"family":"Varela","stack":"\"Varela\", sans-serif","weights":["400"]},{"family":"Varela Round","stack":"\"Varela Round\", sans-serif","weights":["400"]},{"family":"Vast Shadow","stack":"\"Vast Shadow\", display","weights":["400"]},{"family":"Vesper Libre","stack":"\"Vesper Libre\", serif","weights":["400","500","700","900"]},{"family":"Vibur","stack":"\"Vibur\", handwriting","weights":["400"]},{"family":"Vidaloka","stack":"\"Vidaloka\", serif","weights":["400"]},{"family":"Viga","stack":"\"Viga\", sans-serif","weights":["400"]},{"family":"Voces","stack":"\"Voces\", display","weights":["400"]},{"family":"Volkhov","stack":"\"Volkhov\", serif","weights":["400","400i","700","700i"]},{"family":"Vollkorn","stack":"\"Vollkorn\", serif","weights":["400","400i","700","700i"]},{"family":"Voltaire","stack":"\"Voltaire\", sans-serif","weights":["400"]},{"family":"Waiting for the Sunrise","stack":"\"Waiting for the Sunrise\", handwriting","weights":["400"]},{"family":"Wallpoet","stack":"\"Wallpoet\", display","weights":["400"]},{"family":"Walter Turncoat","stack":"\"Walter Turncoat\", handwriting","weights":["400"]},{"family":"Warnes","stack":"\"Warnes\", display","weights":["400"]},{"family":"Wellfleet","stack":"\"Wellfleet\", display","weights":["400"]},{"family":"Wendy One","stack":"\"Wendy One\", sans-serif","weights":["400"]},{"family":"Wire One","stack":"\"Wire One\", sans-serif","weights":["400"]},{"family":"Work Sans","stack":"\"Work Sans\", sans-serif","weights":["100","200","300","400","500","600","700","800","900"]},{"family":"Yanone Kaffeesatz","stack":"\"Yanone Kaffeesatz\", sans-serif","weights":["200","300","400","700"]},{"family":"Yantramanav","stack":"\"Yantramanav\", sans-serif","weights":["100","300","400","500","700","900"]},{"family":"Yatra One","stack":"\"Yatra One\", display","weights":["400"]},{"family":"Yellowtail","stack":"\"Yellowtail\", handwriting","weights":["400"]},{"family":"Yeseva One","stack":"\"Yeseva One\", display","weights":["400"]},{"family":"Yesteryear","stack":"\"Yesteryear\", handwriting","weights":["400"]},{"family":"Yrsa","stack":"\"Yrsa\", serif","weights":["300","400","500","600","700"]},{"family":"Zeyada","stack":"\"Zeyada\", handwriting","weights":["400"]}]; // export default function() {
//
//   let variants = {
//     "100"       : "100",
//     "100italic" : "100i",
//     "200"       : "200",
//     "200italic" : "200i",
//     "300"       : "300",
//     "300italic" : "300i",
//     "regular"   : "400",
//     "italic"    : "400i",
//     "500"       : "500",
//     "500italic" : "500i",
//     "600"       : "600",
//     "600italic" : "600i",
//     "700"       : "700",
//     "700italic" : "700i",
//     "800"       : "800",
//     "800italic" : "800i",
//     "900"       : "900",
//     "900italic" : "900i"
//   };
//
//   let map = fonts.map((font)=>{
//     return {
//       family: font.family,
//       stack: `"${font.family}", ${font.category}`,
//       weights: font.variants.map((variant)=>{
//         return variants[variant];
//       })
//     }
//   });
//
//   var a = document.createElement("a");
//   document.body.appendChild(a);
//   a.style = "display: none";
//
//   var contents = 'export default ' + JSON.stringify(map, null, '  ') + ';';
//
//   var url = window.URL.createObjectURL(new Blob([contents], {type: "octet/stream"}));
//   a.href = url;
//   a.download = 'fonts.js';
//   a.click();
//   window.URL.revokeObjectURL(url);
//
// }
});
define('cornerstone/data/systemfonts', ['exports'], function (exports) {
  exports['default'] = [{
    family: 'Arial',
    stack: 'Arial, "Helvetica Neue", Helvetica, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Arial Narrow',
    stack: '"Arial Narrow", Arial, "Helvetica Neue", Helvetica, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Baskerville',
    stack: 'Baskerville, "Baskerville old face", "Hoefler Text", Garamond, "Times New Roman", serif',
    weights: ['400', '400i', '600', '600i', '700', '700i']
  }, {
    family: 'Bodoni MT',
    stack: '"Bodoni MT", Didot, "Didot LT STD", "Hoefler Text", Garamond, "Times New Roman", serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Book Antiqua',
    stack: '"Book Antiqua", Palatino, "Palatino Linotype", "Palatino LT STD", Georgia, serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Calibri',
    stack: 'Calibri, Candara, Segoe, "Segoe UI", Optima, Arial, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Cambria',
    stack: 'Cambria, Georgia, serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Candara',
    stack: 'Candara, Calibri, Segoe, "Segoe UI", Optima, Arial, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Consolas',
    stack: 'Consolas, monaco, monospace',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Courier New',
    stack: '"Courier New", Courier, "Lucida Sans Typewriter", "Lucida Typewriter", monospace',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Didot',
    stack: 'Didot, "Didot LT STD", "Hoefler Text", Garamond, "Times New Roman", serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Futura',
    stack: 'Futura, "Trebuchet MS", Arial, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Garamond',
    stack: 'Garamond, Baskerville, "Baskerville Old Face", "Hoefler Text", "Times New Roman", serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Geneva',
    stack: 'Geneva, Tahoma, Verdana, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Georgia',
    stack: 'Georgia, Palatino, "Palatino Linotype", Times, "Times New Roman", serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Gill Sans',
    stack: '"Gill Sans", "Gill Sans MT", Calibri, sans-serif',
    weights: ['300', '300i', '400', '400i', '600', '600i', '700', '700i']
  }, {
    family: 'Goudy Old Style',
    stack: '"Goudy Old Style", Garamond, "Big Caslon", "Times New Roman", serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Helvetica',
    stack: 'Helvetica, Arial, sans-serif',
    weights: ['300', '300i', '400', '400i', '700', '700i']
  }, {
    family: 'Helvetica Neue',
    stack: '"Helvetica Neue", Helvetica, Arial, sans-serif',
    weights: ['100', '100i', '300', '300i', '400', '400i', '500', '500i', '700', '700i']
  }, {
    family: 'Hoefler Text',
    stack: '"Hoefler Text", "Baskerville old face", Garamond, "Times New Roman", serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Lucida Bright',
    stack: '"Lucida Bright", Georgia, serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Lucida Grande',
    stack: '"Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Geneva, Verdana, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Lucida Sans Typewriter',
    stack: '"Lucida Sans Typewriter", "Lucida Console", monaco, "Bitstream Vera Sans Mono", monospace',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Monaco',
    stack: 'Monaco, Consolas, "Lucida Console", monospace',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Optima',
    stack: 'Optima, Segoe, "Segoe UI", Candara, Calibri, Arial, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Palatino',
    stack: 'Palatino, "Palatino Linotype", "Palatino LT STD", "Book Antiqua", Georgia, serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Tahoma',
    stack: 'Tahoma, Geneva, Verdana, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Times New Roman',
    stack: '"Times New Roman", Georgia, serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Trebuchet MS',
    stack: '"Trebuchet MS", "Lucida Grande", "Lucida Sans Unicode", "Lucida Sans", Tahoma, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }, {
    family: 'Verdana',
    stack: 'Verdana, Geneva, sans-serif',
    weights: ['400', '400i', '700', '700i']
  }];
});
define('cornerstone/element/adapter', ['exports', 'cornerstone/entity/adapter'], function (exports, _cornerstoneEntityAdapter) {
  exports['default'] = _cornerstoneEntityAdapter['default'].extend({});
});
// import Ember from 'ember';
define('cornerstone/element/definition/adapter', ['exports', 'ember', 'cornerstone/adapters/cs-client-side-adapter'], function (exports, _ember, _cornerstoneAdaptersCsClientSideAdapter) {
  exports['default'] = _cornerstoneAdaptersCsClientSideAdapter['default'].extend({

    continuity: _ember['default'].inject.service(),
    preview: _ember['default'].inject.service(),

    findAll: function findAll(store, type) {

      if (this.get('preview.isPreview')) {
        return this.get('continuity').findAll(type.modelName);
      }

      return this._super.apply(this, arguments);
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_findRecord
    findRecord: function findRecord(store, type, id) {

      if (this.get('preview.isPreview')) {
        return this.get('continuity').findRecord(type.modelName, id);
      }

      return this._super.apply(this, arguments);
    }

  });
});
define('cornerstone/element/definition/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr', 'cornerstone/util/coalescence-client', 'cornerstone/util/control-proxy-builder', 'ember-data/relationships'], function (exports, _ember, _emberDataModel, _emberDataAttr, _cornerstoneUtilCoalescenceClient, _cornerstoneUtilControlProxyBuilder, _emberDataRelationships) {

  var privateElements = ['undefined', 'root', 'region', 'bar', 'container'];

  exports['default'] = _emberDataModel['default'].extend({
    title: (0, _emberDataAttr['default'])(),
    values: (0, _emberDataAttr['default'])(),
    style: (0, _emberDataAttr['default'])(),
    active: (0, _emberDataAttr['default'])(),
    presets: (0, _emberDataRelationships.hasMany)('element/presets'),

    // This style generation  code should be moved into a service instead of being on the model
    fonts: _ember['default'].inject.service('templates/fonts'),
    colors: _ember['default'].inject.service('templates/colors'),

    stylePostProcess: function stylePostProcess(template) {
      var _this = this;

      var handlers = {
        fontWeight: function fontWeight(value) {
          return this.get('fonts').resolveFontWeight(value);
        },
        fontFamily: function fontFamily(value) {
          return this.get('fonts').resolveFontFamilyStack(value);
        },
        color: function color(value) {
          return this.get('colors').lookupColor(value);
        }
      };

      return template.replace(/%%post ([\w-:]+?)%%(.*?)%%\/post%%/g, function (match, p1, p2 /*, offset, string*/) {
        var callback = _ember['default'].String.camelize(p1);
        var replacement = handlers[callback] ? handlers[callback].call(_this, p2) : p2;
        // console.log('CSS Post Process', p1, p2, replacement );
        return replacement;
      });
    },

    styleDesignatedKeys: _ember['default'].computed('designations', function () {

      var keys = {};
      var designations = this.get('designations');

      for (var key in designations) {
        if ('string' !== typeof designations[key]) {
          debugger;
          continue;
        }
        var parts = designations[key].split(':');
        var group = parts.shift();
        var subGroup = parts.join(':');
        if ('style' !== group || !subGroup) {
          continue;
        }
        keys[key] = subGroup;
      }

      return keys;
    }),

    styleTemplate: _ember['default'].computed('style', function () {
      return (0, _cornerstoneUtilCoalescenceClient['default'])(JSON.parse(this.get('style')), this.get('styleDesignatedKeys'), this.get('stylePostProcess').bind(this));
    }),

    defaults: _ember['default'].computed('values', function () {
      var values = this.get('values');
      var defaults = {};
      for (var key in values) {
        if (values.hasOwnProperty(key)) {
          defaults[key] = _ember['default'].isNone(values[key]['default']) ? null : values[key]['default'];
        }
      }
      return defaults;
    }),

    designations: _ember['default'].computed('values', function () {
      var values = this.get('values');
      var designations = {};
      for (var key in values) {
        if (values.hasOwnProperty(key)) {
          designations[key] = _ember['default'].isNone(values[key].designation) ? null : values[key].designation;
        }
      }
      return designations;
    }),

    controls: (0, _emberDataAttr['default'])(),
    controlGroups: (0, _emberDataAttr['default'])(),

    controlGroupTiers: _ember['default'].computed('controlGroups', function () {
      var groups = this.get('controlGroups');
      var list = _ember['default'].A();
      for (var key in groups) {
        if (groups.hasOwnProperty(key)) {
          var group = {
            name: key,
            title: groups[key].title
          };

          var tiers = key.split(':');
          tiers.pop();
          if (!_ember['default'].isEmpty(tiers)) {
            group.parent = tiers.join(':');
          }
          list.push(group);
        }
      }
      return list;
    }),

    icon: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return 'interface/nav-elements-line';
      } }),

    iconPath: _ember['default'].computed('icon', function () {
      var icon = this.get('icon');
      if ('native' === icon) {
        return 'elements/' + this.get('id');
      }
      return icon;
    }),

    isSelectable: _ember['default'].computed('active', 'isPrivate', function () {
      return this.get('active') && !this.get('isPrivate');
    }),

    isPrivate: _ember['default'].computed('id', function () {
      return privateElements.includes(this.get('id'));
    }),

    controlFactory: _ember['default'].computed('controls', function () {
      return (0, _cornerstoneUtilControlProxyBuilder['default'])({
        owner: _ember['default'].getOwner(this),
        sourcePath: 'atts',
        controls: this.get('controls')
      });
    })

  });
});
define('cornerstone/element/model', ['exports', 'ember', 'ember-data/relationships', 'cornerstone/entity/model'], function (exports, _ember, _emberDataRelationships, _cornerstoneEntityModel) {
  exports['default'] = _cornerstoneEntityModel['default'].extend({

    radio: _ember['default'].inject.service('global/radio'),

    children: (0, _emberDataRelationships.hasMany)('element', { inverse: 'parent' }),
    parent: (0, _emberDataRelationships.belongsTo)('element', { inverse: 'children' }),

    setup: function setup() {
      this.set('definition', this.get('store').peekRecord('element/definition', this.getWithDefault('atts._type', 'undefined')));
      this.setDefaults();
    },

    title: _ember['default'].computed('atts.title', 'atts._type', {
      get: function get() {

        var customTitle = this.get('atts.title');

        if (customTitle) {
          return customTitle;
        }

        var definitionTitle = this.get('definition.title');

        if (definitionTitle) {
          return definitionTitle;
        }

        return this.get('atts._type');
      },
      set: function set(key, value) {

        if (!value) {
          value = this.getWithDefault('definition.title', this.get('atts._type'));
        }

        this.set('atts.title', value);
        return value;
      }

    }),

    hasChanged: function hasChanged(key) {
      var designationKey = this.get('definition.designations.' + key);
      if (_ember['default'].isNone(designationKey)) {
        return;
      }
      var designations = designationKey.split(':');
      this.incrementProperty(_ember['default'].String.camelize('update-' + designations[0]));
    },

    setDefaults: function setDefaults() {

      var defaults = this.get('definition.defaults');

      var atts = this.get('atts');
      for (var key in defaults) {
        if ('undefined' === typeof atts[key]) {
          this.set('atts.' + key, defaults[key]);
        }
      }

      var designations = this.get('definition.designations');
      for (var key in designations) {
        // Define attr properties. atts.row_flex -> attrRowFlex
        if ('attr' === designations[key]) {
          _ember['default'].defineProperty(this, _ember['default'].String.camelize('attr_' + key), _ember['default'].computed.alias('atts.' + key));
        }
      }

      return this;
    },

    duplicate: function duplicate(atts) {
      var _this = this;

      if (!this.get('parent.children')) {
        return;
      }

      var nameInUse = function nameInUse(name) {
        return _this.get('parent.children').any(function (item) {
          return name === item.get('title');
        });
      };

      var data = this.serialize({ includeChildren: true });

      if (atts) {
        _ember['default'].merge(data.data.attributes.atts, atts);
      }

      data = JSON.parse(JSON.stringify(data.data));

      var customTitle = this.get('atts.title');
      if (!_ember['default'].isNone(customTitle)) {
        var title = "" === customTitle ? this.get('definition.title') : customTitle;
        data.attributes.atts.title = this.get('i18n').t('app.copy-of', { title: title }).string;
      }

      // Ensure the title is unique
      var copyIndex = 1;
      var copiedTitle = data.attributes.atts.title;
      while (nameInUse(data.attributes.atts.title)) {
        // something of the same title exists
        data.attributes.atts.title = this.get('i18n').t('app.copy-of-numeric', {
          title: copiedTitle,
          index: copyIndex++
        }).string;
      }

      this.get('parent.addChild')(data.attributes.atts, this.get('order') + 1, {
        children: data.attributes.children
      });
    }

  });
});

// import DS from 'ember-data';
define('cornerstone/element/preset/model', ['exports', 'ember', 'ember-data', 'ember-data/attr', 'ember-data/relationships'], function (exports, _ember, _emberData, _emberDataAttr, _emberDataRelationships) {
  exports['default'] = _emberData['default'].Model.extend({
    title: (0, _emberDataAttr['default'])(),
    element: (0, _emberDataRelationships.belongsTo)('element/definition'),
    atts: (0, _emberDataAttr['default'])(),

    values: _ember['default'].computed('atts', 'element', function () {
      return _ember['default'].assign({}, this.get('element.defaults'), JSON.parse(this.get('atts')));
    }),

    getScopedPropertyUpdate: function getScopedPropertyUpdate(path) {
      var values = this.get('values');
      var update = {};
      for (var key in values) {
        update[path + '.' + key] = values[key];
      }
      return update;
    }
  });
});
define('cornerstone/element/serializer', ['exports', 'ember', 'cornerstone/entity/serializer'], function (exports, _ember, _cornerstoneEntitySerializer) {
  exports['default'] = _cornerstoneEntitySerializer['default'].extend({
    normalize: function normalize(typeClass, hash) {

      function prenormalize(entity, region, order) {

        if (entity.attributes && entity.attributes.atts) {
          return entity;
        }
        if (region) {
          entity._region = region;
        }

        var record = {
          attributes: {
            atts: entity,
            order: _ember['default'].isNone(order) ? 0 : order
          },
          type: typeClass.modelName
        };
        if (entity._id) {
          record.id = entity._id;
          delete record.attributes.atts._id;
        }

        if (_ember['default'].isArray(entity._modules)) {
          (function () {

            var childOrder = 0;

            var children = entity._modules.map(function (child) {
              return prenormalize(child, entity._region, childOrder++);
            });

            if (children.length > 0) {
              record.attributes.children = children;
            }

            delete record.attributes.atts._modules;
          })();
        }

        return record;
      }

      var prenormalized = prenormalize(hash);
      return this._super(typeClass, prenormalized);
    }
  });

  // import Ember from 'ember';
  // import JSONSerializer from 'ember-data/serializers/json';
  // import EmbeddedRecordsMixin from 'ember-data/serializers/embedded-records-mixin';
  // import uuid from 'npm:uuid';

  // export default JSONSerializer.extend( EmbeddedRecordsMixin, {

  //   normalize(typeClass, hash) {
  //     debugger;
  //     let order = 0;

  //     let record = {
  //       id:   uuid.v4(),
  //       type: hash._type,
  //       modules: Ember.isArray( hash._modules ) ? hash._modules.map(function(child) {
  //         child._order = order++;
  //         child._region = hash._region;
  //         return child;
  //       }) : hash._modules,
  //       region: hash._region,
  //       order: Ember.isNone(hash._order) ? 0 : hash._order
  //     };

  //     if ( hash.parent ) {
  //       record.parent = hash.parent;
  //     }

  //     let atts = Ember.copy( hash );

  //     delete atts._type;
  //     delete atts._modules;
  //     delete atts._region;
  //     delete atts._order;

  //     record.atts = atts;

  //     return this._super(typeClass, record);
  //   },

  //   pushPayload: function(store, payload) {

  //     let documentHash = {
  //       data: [],
  //       included: []
  //     };

  //     for (var prop in payload) {
  //       var modelName = this.modelNameFromPayloadKey(prop);
  //       if ( ! store.modelFactoryFor(modelName)) {
  //         Ember.warn('Encountered "' + prop + '" in payload, but no model was found for model name "' + modelName + '" (resolved model name using ' + this.constructor.toString() + '.modelNameFromPayloadKey("' + prop + '"))', false, {
  //           id: 'ds.serializer.model-for-key-missing'
  //         });
  //         continue;
  //       }
  //       var type = store.modelFor(modelName);
  //       var typeSerializer = store.serializerFor(type.modelName);

  //       /*jshint loopfunc:true*/
  //       Ember.makeArray(payload[prop]).forEach((hash) => {
  //         let { data, included } = typeSerializer.normalize(type, hash, prop);
  //         documentHash.data.push(data);
  //         if (included) {
  //           documentHash.included.push(...included);
  //         }
  //       });
  //     }

  //     store.push(documentHash);
  //   },

  //   serialize: function(snapshot /*, options */) {

  //     var json = this._super.apply(this, arguments);

  //     // Apply sorted order
  //     let order = snapshot.record.get('moduleList').map(function(record) {
  //       return record.get('id');
  //     });

  //     json.modules.sort(function( a, b ) {

  //       a = order.indexOf( a._id ) ;
  //       b = order.indexOf( b._id );

  //       if ( a < b ) {
  //         return -1;
  //       }

  //       if ( a > b ) {
  //         return 1;
  //       }

  //       return 0;
  //     });

  //     let serialized = Ember.merge({}, json.atts || {} );
  //     serialized._modules = json.modules;
  //     serialized._type = json.type;
  //     serialized._id = json.id;

  //     return serialized;
  //   },

  //   attrs: {
  //     modules: {
  //       serialize: 'records',
  //       deserialize: 'records'
  //     }
  //   }
  // });
});
define('cornerstone/entity/adapter', ['exports', 'ember', 'ember-data/adapters/json-api', 'npm:uuid'], function (exports, _ember, _emberDataAdaptersJsonApi, _npmUuid) {
  exports['default'] = _emberDataAdaptersJsonApi['default'].extend({

    continuity: _ember['default'].inject.service(),

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_findAll
    findAll: function findAll(store, type) {
      return this.get('continuity').findAll(type.modelName);
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_findRecord
    findRecord: function findRecord(store, type, id) {
      return this.get('continuity').findRecord(type.modelName, id);
    },

    // http://emberjs.com/api/data/classes/DS.Adapter.html#method_query
    query: function query() /* store, type, query */{},

    generateIdForRecord: function generateIdForRecord() {
      return _npmUuid['default'].v4();
    },

    shouldReloadRecord: function shouldReloadRecord() {
      return false;
    },

    shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
      return false;
    },

    //
    // Persistence
    //

    createRecord: function createRecord(store, type, snapshot) {
      return this._updateRequest('create', store, type, snapshot);
    },

    updateRecord: function updateRecord(store, type, snapshot) {
      return this._updateRequest('update', store, type, snapshot);
    },

    deleteRecord: function deleteRecord(store, type, snapshot) {
      return this._updateRequest('delete', store, type, snapshot);
    },

    _updateRequest: function _updateRequest(action, store, type, snapshot) {
      return this.get('continuity').update(action, type.modelName, this.serialize(snapshot, { includeId: true }), true);
    }
  });
});
define('cornerstone/entity/model', ['exports', 'ember', 'ember-data', 'ember-data/attr'], function (exports, _ember, _emberData, _emberDataAttr) {
  exports['default'] = _emberData['default'].Model.extend({

    atts: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return {};
      } }),
    order: (0, _emberDataAttr['default'])({ defaultValue: 0 }),
    children: _emberData['default'].hasMany('entity', { inverse: 'parent', async: true }),
    parent: _emberData['default'].belongsTo('entity', { inverse: 'children', async: true }),

    continuity: _ember['default'].inject.service(),

    addChild: function addChild(atts, order, params) {

      order = this._normalizeOrder(order);

      if (!atts) {
        atts = {};
      }

      var record = {
        type: this.constructor.modelName,
        attributes: {
          order: this.get('children.length'),
          atts: atts
        },
        relationships: {
          parent: {
            data: {
              id: this.get('id'),
              type: this.constructor.modelName
            }
          }
        }

      };

      if (params) {
        _ember['default'].merge(record.attributes, params);
      }

      var store = this.get('store');
      var normalized = store.normalize(this.constructor.modelName, record);
      var item = store.push(normalized);
      this.updateChildPosition(item, order);
      return item.saveAll();
    },

    saveAll: function saveAll() {

      var promises = _ember['default'].A();

      this.get('children').forEach(function (child) {
        promises.push(child.saveAll());
      });

      return new _ember['default'].RSVP.Promise((function (resolve) {
        _ember['default'].RSVP.allSettled(promises).then((function () {
          this.save().then(function (record) {
            resolve(record);
          });
        }).bind(this));
      }).bind(this));
    },

    // overrideAddChild( atts, order ) {
    //   return this._super( atts, order, {
    //     extra: 'stuff'
    //   })
    // }

    _normalizeOrder: function _normalizeOrder(order) {
      var length = this.get('children.length');

      if (_ember['default'].isNone(order) || order > length) {
        return length;
      } else if (order < 0) {
        return 0;
      }

      return order;
    },

    updatePosition: function updatePosition(index) {
      this.get('parent.updateChildPosition')(this, index);
    },

    updateChildPosition: function updateChildPosition(child, order) {

      order = this._normalizeOrder(order);

      var children = this.get('children').sortBy('order');
      var start = child.get('order');

      if (start < order) {
        // Moving down
        children.forEach(function (item, index) {
          if (index > start && index <= order) {
            item.set('order', index - 1);
          }
        });
      } else {
        // Moving up
        children.forEach(function (item, index) {
          if (index < start && index >= order) {
            item.set('order', index + 1);
          }
        });
      }

      child.set('order', order);
      children.forEach(function (model) {
        return model.save();
      });

      // console.log(`Moving ${child.get('id')} from ${old} to ${order}`);
    },

    reorderChildren: function reorderChildren() {
      this.get('children').sortBy('order').forEach(function (model, index) {
        model.set('order', index);
        model.save();
      });
    },

    boundMethods: ['addChild', 'updatePosition', 'updateChildPosition'],

    init: function init() {
      this._super.apply(this, arguments);
      this.get('boundMethods').forEach((function (method) {
        this.set(method, this.get(method).bind(this));
      }).bind(this));
      _ember['default'].run.next(this, this.updateObservers);
      this.setup();
    },

    setup: function setup() {},

    attsObserver: _ember['default'].observer('atts', function () {
      this.updateObservers();
    }),

    updateObservers: function updateObservers() {
      var atts = this.get('atts');
      for (var key in atts) {
        this.addObserver('atts.' + key, this, 'valueUpdated');
      }
      this._oldAtts = _ember['default'].copy(atts);
    },

    attsUpdated: 0,
    valueUpdated: function valueUpdated(self, key) {

      var current = self.get(key);

      if (_ember['default'].isNone(self._oldAtts)) {
        self._oldAtts = {};
      }

      var attKey = key.split('.').splice(1).join('.');

      if (self._oldAtts[attKey] === current) {
        return;
      }

      // console.log('Value updated', this.get('continuity.xfr.agent.xfrOrigin'), self._oldAtts[oldKey], current);
      self._oldAtts[attKey] = current;

      _ember['default'].set(this, 'attsUpdated', this.get('attsUpdated') + 1);
      this.hasChanged(attKey);

      // On an incoming push, this could run multiple times and we only want to save once
      _ember['default'].run.debounce(this, this.save, 0);
    },

    hasChanged: function hasChanged() /* key */{},

    willDestroy: function willDestroy() {
      for (var key in this.get('atts')) {
        this.removeObserver('atts.' + key, this, 'valueUpdated');
      }
    },

    selfDestruct: function selfDestruct() {
      var parent = this.get('parent.content');
      return new _ember['default'].RSVP.Promise((function (resolve) {
        this._selfDestruct().then(function () {
          if (parent) {
            parent.reorderChildren();
            parent.save().then(resolve);
          } else {
            resolve();
          }
        });
      }).bind(this));
    },

    _selfDestruct: function _selfDestruct() {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve) {

        _ember['default'].RSVP.all(_this.get('children').invoke('_selfDestruct')).then(function () {

          var parent = _this.get('parent');
          var parentModules = _this.get('parent.children');

          if (parent && parentModules) {
            parentModules.removeObject(_this);
            //parent.incrementProperty('newModuleOrder'); // DEBOUNCE?
          }

          _this.destroyRecord().then(resolve);
        });
      });
    },

    duplicate: function duplicate(atts) {

      if (!this.get('parent.children')) {
        return;
      }

      var data = this.serialize({ includeChildren: true });

      if (atts) {
        _ember['default'].merge(data.data.attributes.atts, atts);
      }

      data = JSON.parse(JSON.stringify(data.data));
      this.get('parent.addChild')(data.attributes.atts, this.get('order'), {
        children: data.attributes.children
      });
    },

    getCleanAtts: function getCleanAtts() {
      var serialized = JSON.parse(JSON.stringify(_ember['default'].get(this.serialize(), 'data.attributes.atts')));
      serialized._id = this.get('id');
      return serialized;
    }

  });
});
define('cornerstone/entity/serializer', ['exports', 'ember-data/serializers/json-api', 'npm:uuid'], function (exports, _emberDataSerializersJsonApi, _npmUuid) {
  exports['default'] = _emberDataSerializersJsonApi['default'].extend({

    attrs: {
      children: { embedded: 'always' }
    },

    normalize: function normalize(typeClass, hash, prop) {

      var included = [];

      function prenormalize(hash) {

        if (!hash.id) {
          hash.id = _npmUuid['default'].v4();
        }

        hash.type = typeClass.modelName;

        if (hash.attributes.children) {

          // Populate relationships
          if (!hash.relationships) {
            hash.relationships = {};
          }
          if (!hash.relationships.children) {
            hash.relationships.children = {};
          }
          hash.relationships.children.data = hash.attributes.children.map(function (child) {
            child = prenormalize(child);
            if (!child.relationships) {
              child.relationships = {};
            }
            child.relationships.parent = {
              data: {
                id: hash.id,
                type: typeClass.modelName
              }
            };
            included.push(child);
            return {
              id: child.id,
              type: typeClass.modelName
            };
          });
          delete hash.attributes.children;
        }

        return hash;
      }

      var normalizedHash = this._super(typeClass, prenormalize(hash), prop);
      normalizedHash.included = included;
      return normalizedHash;
    },

    serialize: function serialize(snapshot, options) {

      var serialized = this._super.apply(this, arguments);

      delete serialized.data.attributes.atts._modules;
      if (options && options.includeChildren && snapshot.record.get('children.length') > 0) {
        (function () {
          var order = 0;
          var children = snapshot.record.get('children').sortBy('order').map(function (child) {
            var data = child.serialize({
              includeId: options.includeId || false,
              includeChildren: true,
              inner: true
            }).data;
            data.attributes.order = order++;
            return data;
          });

          if (children && children.length > 0) {
            serialized.data.attributes.children = children;
          }

          if (options.inner) {
            delete serialized.data.relationships;
            delete serialized.data.attributes.order;
          }
        })();
      }

      return serialized;
    }

  });
});
// import Ember from 'ember';
define('cornerstone/files/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("cornerstone/files/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 8,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/files/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("\n\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 3,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "cornerstone/files/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h2");
            var el2 = dom.createTextNode("Files");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cs-builder-search");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createComment("");
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
            morphs[1] = dom.createMorphAt(fragment, 5, 5, contextualElement);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["inline", "common/search-bar", [], ["target", "builder-index", "placeholder", "Search by Title", "autoFocus", true], ["loc", [null, [6, 6], [6, 95]]], 0, 0], ["block", "common/scroll-box", [], ["name", "search-results", "linkedSearch", "builder-index"], 0, null, ["loc", [null, [8, 4], [11, 26]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "cornerstone/files/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["block", "workspace/cs-workspace", [], [], 0, null, ["loc", [null, [3, 2], [12, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "cornerstone/files/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "builder"], 0, null, ["loc", [null, [1, 0], [14, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/flash/object', ['exports', 'ember-cli-flash/flash/object'], function (exports, _emberCliFlashFlashObject) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliFlashFlashObject['default'];
    }
  });
});
define('cornerstone/footers/controller', ['exports', 'ember', 'cornerstone/util/flatten-assignments'], function (exports, _ember, _cornerstoneUtilFlattenAssignments) {
  exports['default'] = _ember['default'].Controller.extend({

    previewState: {
      route: 'regions-index',
      inc: 0
    },

    templateOptions: _ember['default'].computed('model.templates.[]', function () {
      return this.getWithDefault('model.templates', []).map(function (item) {
        return { value: item.get('id'), label: item.get('title') };
      });
    }),

    previewing: _ember['default'].computed('selectedTemplate', 'selected', 'defaultSelected', function () {

      if ('none' !== this.get('selectedTemplate')) {
        return 'footer-template:' + this.get('selectedTemplate');
      }

      if (this.get('selected.id')) {
        return 'footer:' + this.get('selected.id');
      }

      if (this.get('defaultSelected')) {
        return 'footer-template:' + this.get('model.defaultTemplate');
      }

      return 'off';
    }),

    previewUpdate: _ember['default'].observer('previewing', function () {
      _ember['default'].run.debounce(this, update.bind(this), 5);
      function update() {
        this.incrementProperty('previewState.inc');
        this.set('previewState.previewing', this.get('previewing'));
      }
    }),

    previewURL: _ember['default'].computed('url', 'selectedUrl', function () {

      var url = this.get('url');
      if (url) {
        return url;
      }

      var selectedUrl = this.get('selectedUrl');
      if (selectedUrl) {
        return this.get('selectedUrl');
      }

      return this.get('ui.defaultPreviewUrl');
    }),

    selectedAssignment: _ember['default'].computed('selected', 'model.assignments.value', 'flattenedAssignContexts', function () {
      var assignments = this.get('model.assignments.value');
      var contexts = this.get('flattenedAssignContexts');
      var id = this.get('selected.id');

      for (var context in assignments) {
        if (assignments.hasOwnProperty(context) && '' + id === assignments[context]) {
          if ('global' === context) {
            return 'global';
          }
          if (contexts[context]) {
            return contexts[context];
          }
        }
      }

      return null;
    }),

    selectedUrl: _ember['default'].computed('selectedAssignment', function () {
      var context = this.get('selectedAssignment');
      if ('global' === context) {
        return this.get('ui.defaultPreviewUrl');
      }
      return context && context.url ? context.url : null;
    }),

    assignContexts: _ember['default'].computed.alias('model.config.assign_contexts'),
    flattenedAssignContexts: _ember['default'].computed('assignContexts', function () {
      return (0, _cornerstoneUtilFlattenAssignments['default'])(this.get('assignContexts'));
    })

  });
});
define('cornerstone/footers/entry/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    title: (0, _emberDataAttr['default'])(),

    titleObserver: _ember['default'].observer('title', function () {
      if (!this.get('title')) {
        this.set('title', 'Untitled');
      }
    }),

    modified: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return '';
      } }),

    ui: _ember['default'].inject.service(),

    meta: _ember['default'].computed('assignments', function () {

      var assignments = this.get('assignments');

      if (!assignments || !assignments.length) {
        assignments = [{ label: 'Unassigned' }];
      }

      var meta = assignments.map(function (item) {
        return item.label;
      });

      return meta.join(' &bull; ');
    })

  });
});
define('cornerstone/footers/footer/adapter', ['exports', 'cornerstone/adapters/cs-adapter'], function (exports, _cornerstoneAdaptersCsAdapter) {
  exports['default'] = _cornerstoneAdaptersCsAdapter['default'].extend({});
});
// import Ember from 'ember';
define('cornerstone/footers/footer/controller', ['exports', 'ember', 'cornerstone/util/flatten-assignments'], function (exports, _ember, _cornerstoneUtilFlattenAssignments) {
  exports['default'] = _ember['default'].Controller.extend({

    inspectorService: _ember['default'].inject.service('footers/footer/inspector'),
    config: _ember['default'].inject.service(),
    url: null,

    previewState: {
      route: 'regions',
      mode: 'footers',
      custom_js: {}
    },

    previewURL: _ember['default'].computed('url', 'assignedUrl', function () {
      var url = this.get('url');
      if (url) {
        return url;
      }
      var assignedUrl = this.get('assignedUrl');
      if (assignedUrl) {
        return assignedUrl;
      }
      return this.get('ui.defaultPreviewUrl');
    }),

    assignedContext: _ember['default'].computed('model.footer', 'model.assignments.value', 'flattenedAssignContexts', function () {
      var assignments = this.get('model.assignments.value');
      var contexts = this.get('flattenedAssignContexts');
      var id = this.get('model.footer.id');

      for (var context in assignments) {
        if (assignments.hasOwnProperty(context) && '' + id === assignments[context]) {
          if ('global' === context) {
            return 'global';
          }
          if (contexts[context]) {
            return contexts[context];
          }
        }
      }

      return null;
    }),

    assignedUrl: _ember['default'].computed('assignedContext', function () {
      var context = this.get('assignedContext');
      if ('global' === context) {
        return this.get('ui.defaultPreviewUrl');
      }
      return context && context.url ? context.url : null;
    }),

    assignContexts: _ember['default'].computed.alias('model.config.assign_contexts'),
    flattenedAssignContexts: _ember['default'].computed('assignContexts', function () {
      return (0, _cornerstoneUtilFlattenAssignments['default'])(this.get('assignContexts'));
    }),

    customScriptObserver: _ember['default'].observer('model.footer.settings.customJS', function () {
      var customJS = this.get('model.footer.settings.customJS');
      this.set('previewState.custom_js.x-footer-custom-scripts', customJS ? customJS : null);
    }),

    actions: {
      runCustomJs: function runCustomJs() {
        this.get('ui').notify('Refreshing preview.');
        this.incrementProperty('previewState.inc');
      }
    }

  });
});
define('cornerstone/footers/footer/inspector/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    service: _ember['default'].inject.service('footers'),
    inspectorService: _ember['default'].inject.service('footers/footer/inspector'),

    actions: {
      breadcrumbNavigate: function breadcrumbNavigate(element) {
        this.get('inspectorService').inspect(element);
      },
      applyPreset: function applyPreset(presetId) {
        this.get('inspectorService').applyPreset(presetId);
      },
      savePreset: function savePreset(name) {
        console.log(name);
      },
      observeStart: function observeStart(item) {
        this.get('ui.preview.xfr').message('preview:observe-start', item.entity.get('id'));
      },
      observeEnd: function observeEnd(item) {
        this.get('ui.preview.xfr').message('preview:observe-end', item.entity.get('id'));
      }
    }

  });
});
define('cornerstone/footers/footer/inspector/service', ['exports', 'cornerstone/services/inspector'], function (exports, _cornerstoneServicesInspector) {
  exports['default'] = _cornerstoneServicesInspector['default'].extend({});
});
// import Ember from 'ember';
define("cornerstone/footers/footer/inspector/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "cornerstone/footers/footer/inspector/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "controls/manage-presets", [], ["presets", ["subexpr", "@mut", [["get", "inspectorService.presets", ["loc", [null, [24, 12], [24, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "onApply", ["subexpr", "action", ["applyPreset"], [], ["loc", [null, [25, 12], [25, 34]]], 0, 0], "onSave", ["subexpr", "action", ["savePreset"], [], ["loc", [null, [26, 11], [26, 32]]], 0, 0]], ["loc", [null, [23, 2], [27, 4]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "cornerstone/footers/footer/inspector/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/workspace-controls", [], ["name", "inspector", "searchTarget", "footer-inspector", "searchPlaceholder", ["subexpr", "t", ["app.inspector.search"], [], ["loc", [null, [19, 22], [19, 48]]], 0, 0], "controls", ["subexpr", "@mut", [["get", "inspectorService.controlProxies", ["loc", [null, [20, 13], [20, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "groups", ["subexpr", "@mut", [["get", "inspectorService.controlGroups", ["loc", [null, [21, 11], [21, 41]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [16, 2], [28, 35]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "cornerstone/footers/footer/inspector/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "workspace/workspace-message", [], ["title", ["subexpr", "t", ["app.inspector.na-title"], [], ["loc", [null, [32, 12], [32, 40]]], 0, 0], "message", ["subexpr", "t", ["footers.inspector.na-message"], [], ["loc", [null, [33, 14], [33, 48]]], 0, 0]], ["loc", [null, [31, 4], [34, 6]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "cornerstone/footers/footer/inspector/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "inspectorService.transitioning", ["loc", [null, [30, 12], [30, 42]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [30, 2], [35, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "cornerstone/footers/footer/inspector/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "workspace/workspace-nav", [], ["items", ["subexpr", "array", [["subexpr", "hash", [], ["route", "footers", "label", ["subexpr", "t", ["app.footers.title"], [], ["loc", [null, [3, 32], [3, 55]]], 0, 0], "divider", true], ["loc", [null, [3, 4], [3, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "footers.footer.layout", "label", ["subexpr", "t", ["app.layout.title"], [], ["loc", [null, [4, 46], [4, 68]]], 0, 0]], ["loc", [null, [4, 4], [4, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "footers.footer.inspector", "label", ["subexpr", "t", ["app.inspector.title"], [], ["loc", [null, [5, 49], [5, 74]]], 0, 0]], ["loc", [null, [5, 4], [5, 76]]], 0, 0]], [], ["loc", [null, [2, 8], [6, 3]]], 0, 0], "breadcrumbs", ["subexpr", "hash", [], ["activeItem", ["get", "inspectorService.inspecting", ["loc", [null, [8, 15], [8, 42]]], 0, 0, 0, 0], "items", ["get", "inspectorService.breadcrumbs", ["loc", [null, [9, 10], [9, 38]]], 0, 0, 0, 0], "onNavigate", ["subexpr", "action", ["breadcrumbNavigate"], [], ["loc", [null, [10, 15], [10, 44]]], 0, 0], "onMouseEnter", ["subexpr", "action", ["observeStart"], [], ["loc", [null, [11, 17], [11, 40]]], 0, 0], "onMouseLeave", ["subexpr", "action", ["observeEnd"], [], ["loc", [null, [12, 17], [12, 38]]], 0, 0]], ["loc", [null, [7, 14], [13, 3]]], 0, 0]], ["loc", [null, [1, 0], [14, 2]]], 0, 0], ["block", "if", [["get", "inspectorService.inspecting", ["loc", [null, [15, 6], [15, 33]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [15, 0], [36, 7]]]], ["content", "outlet", ["loc", [null, [37, 0], [37, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/footers/footer/layout/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    inspecting: _ember['default'].computed.alias('inspectorService.inspecting'),
    service: _ember['default'].inject.service('footers'),
    inspectorService: _ember['default'].inject.service('footers/footer/inspector')
  });
});
define("cornerstone/footers/footer/layout/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 9,
              "column": 0
            },
            "end": {
              "line": 23,
              "column": 0
            }
          },
          "moduleName": "cornerstone/footers/footer/layout/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "cornerstone/footers/footer/layout/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "workspace/workspace-nav", [], ["items", ["subexpr", "array", [["subexpr", "hash", [], ["route", "footers", "label", ["subexpr", "t", ["app.footers.title"], [], ["loc", [null, [3, 32], [3, 55]]], 0, 0], "divider", true], ["loc", [null, [3, 4], [3, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "footers.footer.layout", "label", ["subexpr", "t", ["app.layout.title"], [], ["loc", [null, [4, 46], [4, 68]]], 0, 0]], ["loc", [null, [4, 4], [4, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "footers.footer.inspector", "label", ["subexpr", "t", ["app.inspector.title"], [], ["loc", [null, [5, 49], [5, 74]]], 0, 0]], ["loc", [null, [5, 4], [5, 76]]], 0, 0]], [], ["loc", [null, [2, 8], [6, 3]]], 0, 0]], ["loc", [null, [1, 0], [7, 2]]], 0, 0], ["block", "bars/region-manager", [], ["screen", "footers", "moduleDefinitions", ["subexpr", "@mut", [["get", "model.library", ["loc", [null, [11, 20], [11, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "inspecting", ["subexpr", "@mut", [["get", "inspecting", ["loc", [null, [12, 13], [12, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "activeRoot", ["subexpr", "@mut", [["get", "model.footer.root", ["loc", [null, [13, 13], [13, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "onInspect", ["subexpr", "route-action", ["inspect"], [], ["loc", [null, [14, 12], [14, 36]]], 0, 0], "onFirstOpen", ["subexpr", "route-action", ["layoutFirstOpen"], [], ["loc", [null, [15, 14], [15, 46]]], 0, 0], "onNewElement", ["subexpr", "route-action", ["newElement"], [], ["loc", [null, [16, 15], [16, 42]]], 0, 0], "onDuplicateElement", ["subexpr", "route-action", ["duplicateElement"], [], ["loc", [null, [17, 21], [17, 54]]], 0, 0], "regions", ["subexpr", "array", [["subexpr", "hash", [], ["value", "footer", "label", "Footer"], ["loc", [null, [19, 4], [19, 41]]], 0, 0]], [], ["loc", [null, [18, 10], [20, 3]]], 0, 0]], 0, null, ["loc", [null, [9, 0], [23, 24]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/footers/footer/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    availableRegions: ['footer' /*, 'alternate' */],
    title: (0, _emberDataAttr['default'])(),
    regions: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return {};
      } }),

    settings: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return {};
      } }),

    setupModules: function setupModules() {

      // Remove existing bar modules for a fresh slate
      this.store.unloadAll('element');

      var regions = this.get('regions');

      // Ensure we're working with clean data before sending it to the store
      regions = JSON.parse(JSON.stringify(regions));

      var normalized = this.store.normalize('element', {
        _id: 'root',
        _type: 'root',
        _modules: this.get('availableRegions').map(function (key) {
          return { _type: 'region', _region: key, _modules: _ember['default'].isNone(regions[key]) ? [] : regions[key] };
        })
      });

      this.store.push(normalized);
      this.set('root', this.store.peekRecord('element', 'root'));
      return this;
    },

    meta: _ember['default'].computed('assignments', function () {

      var assignments = this.get('assignments');

      if (!assignments || !assignments.length) {
        assignments = [{ label: 'Unassigned' }];
      }

      var meta = assignments.map(function (item) {
        return item.label;
      });

      return meta.join(' &bull; ');
    }),

    updateRegions: function updateRegions() {

      function cleanChildren(child) {
        var record = child.attributes.atts;

        if (child.attributes.children) {
          record._modules = child.attributes.children.map(cleanChildren);
        }

        return record;
      }
      var regions = {};

      this.get('root').serialize({ includeChildren: true }).data.attributes.children.map(function (region) {
        return cleanChildren(region);
      }).forEach(function (region) {
        if (region._modules) {
          regions[region._region] = region._modules;
        }
      });

      this.set('regions', null);
      this.set('regions', regions);

      return this;
    }

  });
});
define('cornerstone/footers/footer/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization', 'cornerstone/mixins/preview-listener'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization, _cornerstoneMixinsPreviewListener) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], _cornerstoneMixinsPreviewListener['default'], {

    inspectorService: _ember['default'].inject.service('footers/footer/inspector'),
    service: _ember['default'].inject.service('footers'),
    preview: _ember['default'].inject.service(),
    radio: _ember['default'].inject.service('global/radio'),

    acl: ['canUseRegions'],

    routeUI: {
      bar: ['preview-sizer', 'view-site', 'collapse', 'cheatsheet', 'save'],
      orientation: 'vertical'
    },

    init: function init() {
      this._super();
      this.listenTo('observer', function (event) {
        this.send(_ember['default'].String.camelize('observer-' + event.type), event);
      });
    },

    beforeModel: function beforeModel() {
      this.permissionCheck();
    },

    model: function model(params) {
      var _this = this;

      return _ember['default'].RSVP.hash({
        config: this.get('config').fetch('footer-builder'),
        library: this.store.findAll('element/definition'),
        assignments: this.store.findRecord('option', 'cornerstone_footer_assignments'),
        footer: new _ember['default'].RSVP.Promise(function (resolve, reject) {
          _this.store.findRecord('footers/footer', params.footer_id).then(function (record) {
            resolve(record.setupModules());
          }, reject);
        })
      });
    },

    afterModel: function afterModel() {
      this.set('ui.unsavedData', false);
    },

    deactivate: function deactivate() {
      this.store.unloadAll('element');
    },

    setupController: function setupController(controller) {
      this._super.apply(this, arguments);
      this.set('inspectorService.inspecting', null);
      this.set('routeUI.viewSiteURL', controller.get('assignedUrl'));
      this.get('ui').setRouteUI(this);
      this.setActivePane();
    },

    renderTemplate: function renderTemplate() {

      this.render('partials/bar/footer', {
        outlet: 'bar',
        into: 'application'
      });

      this.render('partials/global/footer', {
        outlet: 'global',
        into: 'application'
      });

      this._super(this, arguments); // use default template rendering
    },

    redirect: function redirect() {
      this.transitionTo('footers.footer.layout');
    },

    setActivePane: function setActivePane() {

      Object.keys(this.get('router.router.state.params')).forEach((function (key) {
        if (key.includes('footers.footer.')) {
          this.set('controller.activePane', key.replace('footers.footer.', ''));
        }
      }).bind(this));
    },

    actions: {

      error: function error(_error) {

        if (_error) {
          console.log(_error);
          return this.transitionTo('footers');
        }

        // Return true to bubble this event to any parent route.
        return true;
      },

      willTransition: function willTransition(transition) {
        var _this2 = this;

        if (this.get('ui.unsavedData') && !transition.targetName.includes('footers.footer')) {

          transition.abort();

          this.get('ui').confirm({
            noSkip: true,
            message: this.get('i18n').t('app.unsaved-warning'),
            accept: function accept() {
              _this2.set('ui.unsavedData', false);
              transition.retry();
            },
            acceptClass: 'sad'
          });
        }
      },

      save: function save() {
        var _this3 = this;

        var ui = this.get('ui');
        ui.beginSaveProgress();

        this.modelFor(this.routeName).footer.updateRegions().save().then(function (data) {
          _ember['default'].Logger.info('Saving Footer', data);
          ui.endSaveProgress();
          ui.notify('Footer saved!', 'success');
          _this3.set('ui.unsavedData', false);
          _this3.controllerFor(_this3.routeName).set('lastSave', new Date());
        })['catch'](function (reason) {
          _ember['default'].Logger.warn(reason);
          ui.notify('Footer failed to save', 'error');
          ui.endSaveProgress();
        });
      },

      didTransition: function didTransition() {
        this.setActivePane();
        return true; // bubble to next route
      },

      observerInspect: function observerInspect(_ref) {
        var id = _ref.id;

        this.send('inspect', this.get('store').peekRecord('element', id));
      },

      inspect: function inspect(element) {
        var _this4 = this;

        var after = function after() {
          _this4.get('router').transitionTo('footers.footer.inspector');
        };

        if (this.get('inspectorService').isInspecting(element)) {
          after();
        } else {
          this.get('inspectorService').inspect(element, after);
        }
      },

      newElement: function newElement(element) {
        if ('bar' === element.get('atts._type')) {
          this.send('scrollToBottom');
        }
      },

      duplicateElement: function duplicateElement(original) {
        if ('bar' === original.get('atts._type')) {
          this.send('scrollToBottom');
        }
      },

      scrollToBottom: function scrollToBottom() {
        this.get('preview').scrollToBottomAfterRender();
      },

      layoutFirstOpen: function layoutFirstOpen() {}

    }

  });
});
define("cornerstone/footers/footer/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 3,
                  "column": 76
                }
              },
              "moduleName": "cornerstone/footers/footer/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "debug/module-data", [], ["module", ["subexpr", "@mut", [["get", "inspectorService.inspecting", ["loc", [null, [3, 47], [3, 74]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 20], [3, 76]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "cornerstone/footers/footer/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "if", [["get", "ui.debug", ["loc", [null, [3, 10], [3, 18]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 4], [3, 83]]]], ["inline", "common/preview-frame", [], ["src", ["subexpr", "@mut", [["get", "previewURL", ["loc", [null, [5, 10], [5, 20]]], 0, 0, 0, 0]], [], [], 0, 0], "state", ["subexpr", "@mut", [["get", "previewState", ["loc", [null, [6, 12], [6, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "preloader", "footers", "package", ["subexpr", "hash", [], ["customCSS", ["get", "model.footer.settings.customCSS", ["loc", [null, [9, 18], [9, 49]]], 0, 0, 0, 0]], ["loc", [null, [8, 14], [10, 7]]], 0, 0]], ["loc", [null, [4, 4], [11, 6]]], 0, 0]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "cornerstone/footers/footer/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "outlet", ["loc", [null, [14, 2], [14, 12]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "cornerstone/footers/footer/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "global/cs-canvas", [], [], 0, null, ["loc", [null, [2, 2], [12, 23]]]], ["block", "workspace/cs-workspace", [], [], 1, null, ["loc", [null, [13, 2], [15, 29]]]], ["inline", "common/confirm-modal", [], ["screen", "footers"], ["loc", [null, [16, 2], [16, 43]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "cornerstone/footers/footer/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "footers-footer"], 0, null, ["loc", [null, [1, 0], [17, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/footers/footer/template/model', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _emberDataModel, _emberDataAttr) {
  // import { belongsTo, hasMany } from 'ember-data/relationships';

  exports['default'] = _emberDataModel['default'].extend({
    title: (0, _emberDataAttr['default'])(),
    regions: (0, _emberDataAttr['default'])()
  });
});
define('cornerstone/footers/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], {

    acl: ['canUseRegions'],

    routeUI: {
      bar: ['preview-sizer', 'collapse', 'cheatsheet'],
      orientation: 'vertical'
    },

    beforeModel: function beforeModel() {
      this.store.unloadAll('footers/entry');
      this.permissionCheck();
    },

    model: function model() {
      return _ember['default'].RSVP.hash({
        config: this.get('config').fetch('footer-builder'),
        templates: this.store.findAll('footers/footer/template'),
        library: this.store.findAll('element/definition'),
        entries: this.store.findAll('footers/entry'),
        assignments: this.store.findRecord('option', 'cornerstone_footer_assignments'),
        newFooter: { title: '', template: '' },
        defaultTemplate: 'footer-default'
      });
    },

    afterModel: function afterModel(model) {
      var val = model.assignments.get('value');
      if (!val || _ember['default'].isEmpty(val)) {
        model.assignments.set('value', {});
      }
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.get('ui').setRouteUI(this);
      controller.set('activeModal', false);
      controller.set('selectedTemplate', 'none');
    },

    actions: {

      doEntryAction: function doEntryAction() {
        this.send.apply(this, arguments);
      },

      createDefault: function createDefault() {
        this.send('createNew', this.modelFor(this.routeName).defaultTemplate, 'Default Footer', true);
      },

      createNew: function createNew(templateId, title) {
        var _this = this;

        var transition = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

        if (!title) {
          return this.get('ui').notify('Your footer needs a title.', 'error');
        }

        if (!templateId) {
          return this.get('ui').notify('Your footer needs a template.', 'error');
        }

        var template = this.store.peekRecord('footers/footer/template', templateId);

        var footerEntry = this.store.createRecord('footers/entry', {
          title: title
        });

        var footer = this.store.createRecord('footers/footer', {
          title: title,
          regions: template.get('regions'),
          settings: template.get('settings')
        });

        this.controllerFor('footers').set('selectedTemplate', 'none');
        this.get('ui').beginSaveProgress();

        footer.save().then(function (saved) {
          footerEntry.set('id', saved.id);
          footerEntry.save();
          _this.get('ui').endSaveProgress();
          if (transition) {
            _this.transitionTo('footers.footer', saved.id);
          } else {
            _this.get('ui').notify('Footer created.', 'success');
          }
        })['catch'](function (reason) {
          _ember['default'].Logger.warn('Could not create new footer', reason);
          _this.get('ui').notify('Unable to create new footer.');
        });
      },

      entryDuplicate: function entryDuplicate(entry) {
        var _this2 = this;

        this.get('store').findRecord('footers/footer', entry.get('id')).then(function (record) {

          var data = record.serialize();
          var title = _this2.get('i18n').t('app.copy-of', { title: data.data.attributes.title }).toString();

          var footerEntry = _this2.store.createRecord('footers/entry', {
            title: title
          });

          var footer = _this2.store.createRecord('footers/footer', {
            title: title,
            regions: data.data.attributes.regions,
            settings: data.data.attributes.settings
          });

          _this2.get('ui').beginSaveProgress();
          footer.save().then(function (saved) {
            footerEntry.set('id', saved.id);
            footerEntry.save();
            _this2.get('ui').notify('Footer duplicated', 'success');
            _this2.get('ui').endSaveProgress();
          })['catch'](function (reason) {
            _ember['default'].Logger.warn('Could not create new footer', reason);
            _this2.get('ui').notify('Unable to duplicate footer.', 'error');
            _this2.get('ui').endSaveProgress();
          });
        });
      },

      entryDelete: function entryDelete(entry) {
        var _this3 = this;

        this.get('ui').confirm({
          screen: 'footers',
          message: this.get('i18n').t('footers.entry-delete-confirm'),
          acceptClass: 'sad',
          accept: function accept() {

            _this3.get('store').findRecord('footers/footer', entry.get('id')).then(function (record) {
              _this3.controllerFor('footers').set('selected', null);
              entry.destroyRecord();
              record.destroyRecord().then(function () {
                _this3.get('ui').notify('Footer deleted');
                _this3.modelFor(_this3.routeName).assignments.reload();
              }, function (reason) {
                _ember['default'].Logger.warn('Could not delete footer', reason);
                _this3.get('ui').notify('Unable to delete footer.', 'error');
              });
            });
          }
        });
      },

      entryTitleUpdate: function entryTitleUpdate(entry) {
        var _this4 = this;

        this.get('store').findRecord('footers/footer', entry.get('id')).then(function (record) {

          record.set('title', entry.get('title'));
          _this4.get('ui').beginSaveProgress();

          record.save().then(function () {
            _this4.get('ui').endSaveProgress();
          }, function (reason) {
            _ember['default'].Logger.warn('Could not update footer title', reason);
            _this4.get('ui').notify('Unable to update footer title.', 'error');
          });
        });
      }

    }

  });
});
define('cornerstone/footers/service', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    selected: null,
    inspect: function inspect(element, after) {
      this.set('selected', element);
      if (after) {
        after.call();
      }
    }
  });
});
define("cornerstone/footers/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 6
                  },
                  "end": {
                    "line": 6,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/footers/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "common/welcome-message", [], ["title", ["subexpr", "t", ["app.templates.blank-welcome"], [], ["loc", [null, [5, 39], [5, 72]]], 0, 0]], ["loc", [null, [5, 8], [5, 74]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 7,
                      "column": 8
                    },
                    "end": {
                      "line": 12,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/footers/template.hbs"
                },
                isEmpty: true,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/footers/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "common/preview-frame", [], ["src", ["subexpr", "@mut", [["get", "previewURL", ["loc", [null, [8, 14], [8, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "state", ["subexpr", "@mut", [["get", "previewState", ["loc", [null, [9, 16], [9, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "preloader", "footers"], 0, null, ["loc", [null, [7, 8], [12, 33]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/footers/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", ["blank", ["get", "selectedTemplate", ["loc", [null, [4, 24], [4, 40]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 12], [4, 41]]], 0, 0]], [], 0, 1, ["loc", [null, [4, 6], [13, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/footers/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "cs-welcome-icon cs-welcome-icon-cs-logo");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "cs-icon", ["interface/logo-footers-flat-original"], [], ["loc", [null, [17, 10], [17, 60]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 20,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/footers/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "common/welcome-message", [], [], 0, null, ["loc", [null, [15, 6], [19, 33]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "cornerstone/footers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["subexpr", "eq", ["off", ["get", "previewing", ["loc", [null, [3, 24], [3, 34]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 14], [3, 35]]], 0, 0]], [], 0, 1, ["loc", [null, [3, 4], [20, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 2
              }
            },
            "moduleName": "cornerstone/footers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "regions/hf-index", [], ["context", "footers", "assignContexts", ["subexpr", "@mut", [["get", "flattenedAssignContexts", ["loc", [null, [25, 21], [25, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "assignments", ["subexpr", "@mut", [["get", "model.assignments", ["loc", [null, [26, 18], [26, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "entries", ["subexpr", "@mut", [["get", "model.entries", ["loc", [null, [27, 14], [27, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "selected", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [28, 15], [28, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "selectedTemplate", ["subexpr", "@mut", [["get", "selectedTemplate", ["loc", [null, [29, 23], [29, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "defaultSelected", ["subexpr", "@mut", [["get", "defaultSelected", ["loc", [null, [30, 22], [30, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "templateOptions", ["subexpr", "@mut", [["get", "templateOptions", ["loc", [null, [31, 22], [31, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "onAction", ["subexpr", "route-action", ["doEntryAction"], [], ["loc", [null, [32, 15], [32, 45]]], 0, 0], "editRoute", "footers.footer", "onCreate", ["subexpr", "route-action", ["createNew"], [], ["loc", [null, [34, 15], [34, 41]]], 0, 0], "onTitleUpdate", ["subexpr", "route-action", ["entryTitleUpdate"], [], ["loc", [null, [35, 20], [35, 53]]], 0, 0], "assignLabels", ["subexpr", "hash", [], ["globalMessage", "This footer is currently assigned as your global (default) footer.", "blankMessage", "Click a footer to manage assignments."], ["loc", [null, [36, 19], [39, 7]]], 0, 0], "createLabels", ["subexpr", "hash", [], ["heading", "Create Footer", "previewMessage", "Select a template to begin. Your choice will be previewed above.", "createMessage", "To start building with this footer, name it below and click <strong>Create.</strong>", "templatePlaceholder", "Choose Template", "titlePlaceholder", "", "createLabel", "Create"], ["loc", [null, [40, 19], [47, 7]]], 0, 0], "manageLabels", ["subexpr", "hash", [], ["defaultItem", "Default Footer"], ["loc", [null, [48, 19], [50, 7]]], 0, 0]], ["loc", [null, [23, 4], [51, 6]]], 0, 0], ["content", "outlet", ["loc", [null, [52, 4], [52, 14]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "cornerstone/footers/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "global/cs-canvas", [], [], 0, null, ["loc", [null, [2, 2], [21, 23]]]], ["block", "workspace/cs-workspace", [], [], 1, null, ["loc", [null, [22, 2], [53, 29]]]], ["inline", "common/confirm-modal", [], ["screen", "footers"], ["loc", [null, [54, 2], [54, 43]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "cornerstone/footers/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "footers"], 0, null, ["loc", [null, [1, 0], [55, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/fragment/adapter', ['exports', 'cornerstone/adapters/cs-longevity-adapter'], function (exports, _cornerstoneAdaptersCsLongevityAdapter) {
  exports['default'] = _cornerstoneAdaptersCsLongevityAdapter['default'].extend({
    csBackgroundReloadRefreshRate: 150000
  });
});
// import Ember from 'ember';
define('cornerstone/fragment/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({
    value: (0, _emberDataAttr['default'])(),

    loadedAt: _ember['default'].on('didLoad', function () {
      this.set('loadedAt', new Date());
    })
  });
});
define('cornerstone/global/radio/service', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend(_ember['default'].Evented);
});
define('cornerstone/headers/controller', ['exports', 'ember', 'cornerstone/util/flatten-assignments'], function (exports, _ember, _cornerstoneUtilFlattenAssignments) {
  exports['default'] = _ember['default'].Controller.extend({

    previewState: {
      route: 'regions-index',
      inc: 0
    },

    templateOptions: _ember['default'].computed('model.templates.[]', function () {
      return this.getWithDefault('model.templates', []).map(function (item) {
        return { value: item.get('id'), label: item.get('title') };
      });
    }),

    previewing: _ember['default'].computed('selectedTemplate', 'selected', 'defaultSelected', function () {

      if ('none' !== this.get('selectedTemplate')) {
        return 'header-template:' + this.get('selectedTemplate');
      }

      if (this.get('selected.id')) {
        return 'header:' + this.get('selected.id');
      }

      if (this.get('defaultSelected')) {
        return 'header-template:' + this.get('model.defaultTemplate');
      }

      return 'off';
    }),

    previewUpdate: _ember['default'].observer('previewing', function () {
      _ember['default'].run.debounce(this, update.bind(this), 5);
      function update() {
        this.incrementProperty('previewState.inc');
        this.set('previewState.previewing', this.get('previewing'));
      }
    }),

    previewURL: _ember['default'].computed('url', 'selectedUrl', function () {

      var url = this.get('url');
      if (url) {
        return url;
      }

      var selectedUrl = this.get('selectedUrl');
      if (selectedUrl) {
        return this.get('selectedUrl');
      }

      return this.get('ui.defaultPreviewUrl');
    }),

    selectedAssignment: _ember['default'].computed('selected', 'model.assignments.value', 'flattenedAssignContexts', function () {
      var assignments = this.get('model.assignments.value');
      var contexts = this.get('flattenedAssignContexts');
      var id = this.get('selected.id');

      for (var context in assignments) {
        if (assignments.hasOwnProperty(context) && '' + id === assignments[context]) {
          if ('global' === context) {
            return 'global';
          }
          if (contexts[context]) {
            return contexts[context];
          }
        }
      }

      return null;
    }),

    selectedUrl: _ember['default'].computed('selectedAssignment', function () {
      var context = this.get('selectedAssignment');
      if ('global' === context) {
        return this.get('ui.defaultPreviewUrl');
      }
      return context && context.url ? context.url : null;
    }),

    assignContexts: _ember['default'].computed.alias('model.config.assign_contexts'),
    flattenedAssignContexts: _ember['default'].computed('assignContexts', function () {
      return (0, _cornerstoneUtilFlattenAssignments['default'])(this.get('assignContexts'));
    })

  });
});
define('cornerstone/headers/entry/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    title: (0, _emberDataAttr['default'])(),

    titleObserver: _ember['default'].observer('title', function () {
      if (!this.get('title')) {
        this.set('title', 'Untitled');
      }
    }),

    modified: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return '';
      } }),

    ui: _ember['default'].inject.service(),

    meta: _ember['default'].computed('assignments', function () {

      var assignments = this.get('assignments');

      if (!assignments || !assignments.length) {
        assignments = [{ label: 'Unassigned' }];
      }

      var meta = assignments.map(function (item) {
        return item.label;
      });

      return meta.join(' &bull; ');
    })

  });
});
define('cornerstone/headers/header/adapter', ['exports', 'cornerstone/adapters/cs-adapter'], function (exports, _cornerstoneAdaptersCsAdapter) {
  exports['default'] = _cornerstoneAdaptersCsAdapter['default'].extend({});
});
// import Ember from 'ember';
define('cornerstone/headers/header/controller', ['exports', 'ember', 'cornerstone/util/flatten-assignments'], function (exports, _ember, _cornerstoneUtilFlattenAssignments) {
  exports['default'] = _ember['default'].Controller.extend({

    inspectorService: _ember['default'].inject.service('headers/header/inspector'),
    config: _ember['default'].inject.service(),
    url: null,

    previewState: {
      route: 'regions',
      mode: 'headers',
      custom_js: {}
    },

    previewURL: _ember['default'].computed('url', 'assignedUrl', function () {
      var url = this.get('url');
      if (url) {
        return url;
      }
      var assignedUrl = this.get('assignedUrl');
      if (assignedUrl) {
        return assignedUrl;
      }
      return this.get('ui.defaultPreviewUrl');
    }),

    assignedContext: _ember['default'].computed('model.header', 'model.assignments.value', 'flattenedAssignContexts', function () {
      var assignments = this.get('model.assignments.value');
      var contexts = this.get('flattenedAssignContexts');
      var id = this.get('model.header.id');

      for (var context in assignments) {
        if (assignments.hasOwnProperty(context) && '' + id === assignments[context]) {
          if ('global' === context) {
            return 'global';
          }
          if (contexts[context]) {
            return contexts[context];
          }
        }
      }

      return null;
    }),

    assignedUrl: _ember['default'].computed('assignedContext', function () {
      var context = this.get('assignedContext');
      if ('global' === context) {
        return this.get('ui.defaultPreviewUrl');
      }
      return context && context.url ? context.url : null;
    }),

    assignContexts: _ember['default'].computed.alias('model.config.assign_contexts'),
    flattenedAssignContexts: _ember['default'].computed('assignContexts', function () {
      return (0, _cornerstoneUtilFlattenAssignments['default'])(this.get('assignContexts'));
    }),

    customScriptObserver: _ember['default'].observer('model.header.settings.customJS', function () {
      var customJS = this.get('model.header.settings.customJS');
      this.set('previewState.custom_js.x-header-custom-scripts', customJS ? customJS : null);
    }),

    actions: {
      runCustomJs: function runCustomJs() {
        this.get('ui').notify('Refreshing preview.');
        this.incrementProperty('previewState.inc');
      }
    }

  });
});
define('cornerstone/headers/header/inspector/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    service: _ember['default'].inject.service('headers'),
    inspectorService: _ember['default'].inject.service('headers/header/inspector'),

    actions: {
      breadcrumbNavigate: function breadcrumbNavigate(element) {
        this.get('inspectorService').inspect(element);
      },
      applyPreset: function applyPreset(presetId) {
        this.get('inspectorService').applyPreset(presetId);
      },
      savePreset: function savePreset(name) {
        console.log(name);
      },
      observeStart: function observeStart(item) {
        this.get('ui.preview.xfr').message('preview:observe-start', item.entity.get('id'));
      },
      observeEnd: function observeEnd(item) {
        this.get('ui.preview.xfr').message('preview:observe-end', item.entity.get('id'));
      }
    }

  });
});
define('cornerstone/headers/header/inspector/service', ['exports', 'cornerstone/services/inspector'], function (exports, _cornerstoneServicesInspector) {
  exports['default'] = _cornerstoneServicesInspector['default'].extend({});
});
// import Ember from 'ember';
define("cornerstone/headers/header/inspector/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 16,
                "column": 2
              },
              "end": {
                "line": 28,
                "column": 2
              }
            },
            "moduleName": "cornerstone/headers/header/inspector/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "controls/manage-presets", [], ["presets", ["subexpr", "@mut", [["get", "inspectorService.presets", ["loc", [null, [24, 12], [24, 36]]], 0, 0, 0, 0]], [], [], 0, 0], "onApply", ["subexpr", "action", ["applyPreset"], [], ["loc", [null, [25, 12], [25, 34]]], 0, 0], "onSave", ["subexpr", "action", ["savePreset"], [], ["loc", [null, [26, 11], [26, 32]]], 0, 0]], ["loc", [null, [23, 2], [27, 4]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 15,
              "column": 0
            },
            "end": {
              "line": 29,
              "column": 0
            }
          },
          "moduleName": "cornerstone/headers/header/inspector/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/workspace-controls", [], ["name", "inspector", "searchTarget", "header-inspector", "searchPlaceholder", ["subexpr", "t", ["app.inspector.search"], [], ["loc", [null, [19, 22], [19, 48]]], 0, 0], "controls", ["subexpr", "@mut", [["get", "inspectorService.controlProxies", ["loc", [null, [20, 13], [20, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "groups", ["subexpr", "@mut", [["get", "inspectorService.controlGroups", ["loc", [null, [21, 11], [21, 41]]], 0, 0, 0, 0]], [], [], 0, 0]], 0, null, ["loc", [null, [16, 2], [28, 35]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 30,
                "column": 2
              },
              "end": {
                "line": 35,
                "column": 2
              }
            },
            "moduleName": "cornerstone/headers/header/inspector/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "workspace/workspace-message", [], ["title", ["subexpr", "t", ["app.inspector.na-title"], [], ["loc", [null, [32, 12], [32, 40]]], 0, 0], "message", ["subexpr", "t", ["headers.inspector.na-message"], [], ["loc", [null, [33, 14], [33, 48]]], 0, 0]], ["loc", [null, [31, 4], [34, 6]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 29,
              "column": 0
            },
            "end": {
              "line": 36,
              "column": 0
            }
          },
          "moduleName": "cornerstone/headers/header/inspector/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "unless", [["get", "inspectorService.transitioning", ["loc", [null, [30, 12], [30, 42]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [30, 2], [35, 13]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 38,
            "column": 0
          }
        },
        "moduleName": "cornerstone/headers/header/inspector/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "workspace/workspace-nav", [], ["items", ["subexpr", "array", [["subexpr", "hash", [], ["route", "headers", "label", ["subexpr", "t", ["app.headers.title"], [], ["loc", [null, [3, 32], [3, 55]]], 0, 0], "divider", true], ["loc", [null, [3, 4], [3, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "headers.header.layout", "label", ["subexpr", "t", ["app.layout.title"], [], ["loc", [null, [4, 46], [4, 68]]], 0, 0]], ["loc", [null, [4, 4], [4, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "headers.header.inspector", "label", ["subexpr", "t", ["app.inspector.title"], [], ["loc", [null, [5, 49], [5, 74]]], 0, 0]], ["loc", [null, [5, 4], [5, 76]]], 0, 0]], [], ["loc", [null, [2, 8], [6, 3]]], 0, 0], "breadcrumbs", ["subexpr", "hash", [], ["activeItem", ["get", "inspectorService.inspecting", ["loc", [null, [8, 15], [8, 42]]], 0, 0, 0, 0], "items", ["get", "inspectorService.breadcrumbs", ["loc", [null, [9, 10], [9, 38]]], 0, 0, 0, 0], "onNavigate", ["subexpr", "action", ["breadcrumbNavigate"], [], ["loc", [null, [10, 15], [10, 44]]], 0, 0], "onMouseEnter", ["subexpr", "action", ["observeStart"], [], ["loc", [null, [11, 17], [11, 40]]], 0, 0], "onMouseLeave", ["subexpr", "action", ["observeEnd"], [], ["loc", [null, [12, 17], [12, 38]]], 0, 0]], ["loc", [null, [7, 14], [13, 3]]], 0, 0]], ["loc", [null, [1, 0], [14, 2]]], 0, 0], ["block", "if", [["get", "inspectorService.inspecting", ["loc", [null, [15, 6], [15, 33]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [15, 0], [36, 7]]]], ["content", "outlet", ["loc", [null, [37, 0], [37, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/headers/header/layout/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    inspecting: _ember['default'].computed.alias('inspectorService.inspecting'),
    service: _ember['default'].inject.service('headers'),
    inspectorService: _ember['default'].inject.service('headers/header/inspector')
  });
});
define("cornerstone/headers/header/layout/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 24,
            "column": 0
          }
        },
        "moduleName": "cornerstone/headers/header/layout/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "workspace/workspace-nav", [], ["items", ["subexpr", "array", [["subexpr", "hash", [], ["route", "headers", "label", ["subexpr", "t", ["app.headers.title"], [], ["loc", [null, [3, 32], [3, 55]]], 0, 0], "divider", true], ["loc", [null, [3, 4], [3, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "headers.header.layout", "label", ["subexpr", "t", ["app.layout.title"], [], ["loc", [null, [4, 46], [4, 68]]], 0, 0]], ["loc", [null, [4, 4], [4, 70]]], 0, 0], ["subexpr", "hash", [], ["route", "headers.header.inspector", "label", ["subexpr", "t", ["app.inspector.title"], [], ["loc", [null, [5, 49], [5, 74]]], 0, 0]], ["loc", [null, [5, 4], [5, 76]]], 0, 0]], [], ["loc", [null, [2, 8], [6, 3]]], 0, 0]], ["loc", [null, [1, 0], [7, 2]]], 0, 0], ["inline", "bars/region-manager", [], ["screen", "headers", "moduleDefinitions", ["subexpr", "@mut", [["get", "model.library", ["loc", [null, [10, 20], [10, 33]]], 0, 0, 0, 0]], [], [], 0, 0], "inspecting", ["subexpr", "@mut", [["get", "inspecting", ["loc", [null, [11, 13], [11, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "activeRoot", ["subexpr", "@mut", [["get", "model.header.root", ["loc", [null, [12, 13], [12, 30]]], 0, 0, 0, 0]], [], [], 0, 0], "onInspect", ["subexpr", "route-action", ["inspect"], [], ["loc", [null, [13, 12], [13, 36]]], 0, 0], "onFirstOpen", ["subexpr", "route-action", ["layoutFirstOpen"], [], ["loc", [null, [14, 14], [14, 46]]], 0, 0], "onNewElement", ["subexpr", "route-action", ["newElement"], [], ["loc", [null, [15, 15], [15, 42]]], 0, 0], "onDuplicateElement", ["subexpr", "route-action", ["duplicateElement"], [], ["loc", [null, [16, 21], [16, 54]]], 0, 0], "regions", ["subexpr", "array", [["subexpr", "hash", [], ["value", "top", "label", "Top"], ["loc", [null, [18, 4], [18, 38]]], 0, 0], ["subexpr", "hash", [], ["value", "left", "label", "Left", "oneBar", true], ["loc", [null, [19, 4], [19, 51]]], 0, 0], ["subexpr", "hash", [], ["value", "right", "label", "Right", "oneBar", true], ["loc", [null, [20, 4], [20, 52]]], 0, 0], ["subexpr", "hash", [], ["value", "bottom", "label", "Bottom", "oneBar", true], ["loc", [null, [21, 4], [21, 53]]], 0, 0]], [], ["loc", [null, [17, 10], [22, 3]]], 0, 0]], ["loc", [null, [8, 0], [23, 2]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/headers/header/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    availableRegions: ['top', 'left', 'bottom', 'right' /*, 'alternate' */],
    title: (0, _emberDataAttr['default'])(),
    regions: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return {};
      } }),

    settings: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return {};
      } }),

    setupModules: function setupModules() {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve /*, reject*/) {
        // Remove existing bar modules for a fresh slate
        _this.store.unloadAll('element');

        var regions = _this.get('regions');

        // Ensure we're working with clean data before sending it to the store
        regions = JSON.parse(JSON.stringify(regions));

        var normalized = _this.store.normalize('element', {
          _id: 'root',
          _type: 'root',
          _modules: _this.get('availableRegions').map(function (key) {
            return { _type: 'region', _region: key, _modules: _ember['default'].isNone(regions[key]) ? [] : regions[key] };
          })
        });

        _this.store.push(normalized);
        _this.set('root', _this.store.peekRecord('element', 'root'));
        resolve(_this);
      });
    },

    updateRegions: function updateRegions() {

      function cleanChildren(child) {
        var record = child.attributes.atts;

        if (child.attributes.children) {
          record._modules = child.attributes.children.map(cleanChildren);
        }

        return record;
      }

      var regions = {};

      var serialized = this.get('root').serialize({ includeChildren: true });

      serialized.data.attributes.children.map(function (region) {
        return cleanChildren(region);
      }).forEach(function (region) {
        if (region._modules) {
          regions[region._region] = region._modules;
        }
      });

      this.set('regions', null);
      this.set('regions', regions);

      return this;
    }

  });
});
define('cornerstone/headers/header/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization', 'cornerstone/mixins/preview-listener'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization, _cornerstoneMixinsPreviewListener) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], _cornerstoneMixinsPreviewListener['default'], {

    inspectorService: _ember['default'].inject.service('headers/header/inspector'),
    service: _ember['default'].inject.service('headers'),
    radio: _ember['default'].inject.service('global/radio'),

    acl: ['canUseRegions'],

    routeUI: {
      bar: ['preview-sizer', 'view-site', 'collapse', 'cheatsheet', 'save'],
      orientation: 'vertical'
    },

    init: function init() {
      this._super();
      this.listenTo('observer', function (event) {
        this.send(_ember['default'].String.camelize('observer-' + event.type), event);
      });
    },

    beforeModel: function beforeModel() {
      this.permissionCheck();
    },

    model: function model(params) {
      var _this = this;

      return _ember['default'].RSVP.hash({
        config: this.get('config').fetch('header-builder'),
        library: this.store.findAll('element/definition'),
        assignments: this.store.findRecord('option', 'cornerstone_header_assignments'),
        header: new _ember['default'].RSVP.Promise(function (resolve, reject) {
          _this.store.findRecord('headers/header', params.header_id).then(function (header) {
            header.setupModules().then(function (record) {
              return resolve(record);
            });
          }, reject);
        })
      });
    },

    afterModel: function afterModel() {
      this.set('ui.unsavedData', false);
    },

    deactivate: function deactivate() {
      this.store.unloadAll('element');
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      this.set('inspectorService.inspecting', null);
      this.set('routeUI.viewSiteURL', controller.get('assignedUrl'));
      this.get('ui').setRouteUI(this);
      this.setActivePane();

      var customJS = model.header.get('settings.customJS');
      controller.set('previewState.custom_js.x-header-custom-scripts', customJS ? customJS : null);
    },

    renderTemplate: function renderTemplate() {

      this.render('partials/bar/header', {
        outlet: 'bar',
        into: 'application'
      });

      this.render('partials/global/header', {
        outlet: 'global',
        into: 'application'
      });

      this._super(this, arguments); // use default template rendering
    },

    redirect: function redirect() {
      this.transitionTo('headers.header.layout');
    },

    setActivePane: function setActivePane() {

      Object.keys(this.get('router.router.state.params')).forEach((function (key) {
        if (key.includes('headers.header.')) {
          this.set('controller.activePane', key.replace('headers.header.', ''));
        }
      }).bind(this));
    },

    actions: {

      error: function error(_error) {

        if (_error) {
          console.log(_error);
          return this.transitionTo('headers');
        }

        // Return true to bubble this event to any parent route.
        return true;
      },

      save: function save() {
        var _this2 = this;

        var ui = this.get('ui');
        ui.beginSaveProgress();

        this.modelFor(this.routeName).header.updateRegions().save().then(function (data) {
          _ember['default'].Logger.info('Saving Header', data);
          ui.endSaveProgress();
          ui.notify('Header saved!', 'success');
          _this2.set('ui.unsavedData', false);
          _this2.controllerFor(_this2.routeName).set('lastSave', new Date());
        })['catch'](function (reason) {
          _ember['default'].Logger.warn(reason);
          ui.notify('Header failed to save', 'error');
          ui.endSaveProgress();
        });
      },

      willTransition: function willTransition(transition) {
        var _this3 = this;

        if (this.get('ui.unsavedData') && !transition.targetName.includes('headers.header')) {

          transition.abort();

          this.get('ui').confirm({
            noSkip: true,
            message: this.get('i18n').t('app.unsaved-warning'),
            accept: function accept() {
              _this3.set('ui.unsavedData', false);
              transition.retry();
            },
            acceptClass: 'sad'
          });
        }
      },

      didTransition: function didTransition() {
        this.setActivePane();
        return true; // bubble to next route
      },

      observerInspect: function observerInspect(_ref) {
        var id = _ref.id;

        this.send('inspect', this.get('store').peekRecord('element', id));
      },

      inspect: function inspect(element) {
        var _this4 = this;

        var after = function after() {
          _this4.get('router').transitionTo('headers.header.inspector');
        };

        if (this.get('inspectorService').isInspecting(element)) {
          after();
        } else {
          this.get('inspectorService').inspect(element, after);
        }
      },

      newElement: function newElement() /* element */{},

      duplicateElement: function duplicateElement() /* original */{},

      layoutFirstOpen: function layoutFirstOpen() {}

    }

  });
});
define("cornerstone/headers/header/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 3,
                  "column": 76
                }
              },
              "moduleName": "cornerstone/headers/header/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["inline", "debug/module-data", [], ["module", ["subexpr", "@mut", [["get", "inspectorService.inspecting", ["loc", [null, [3, 47], [3, 74]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 20], [3, 76]]], 0, 0]],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "cornerstone/headers/header/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "if", [["get", "ui.debug", ["loc", [null, [3, 10], [3, 18]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [3, 4], [3, 83]]]], ["inline", "common/preview-frame", [], ["src", ["subexpr", "@mut", [["get", "previewURL", ["loc", [null, [5, 10], [5, 20]]], 0, 0, 0, 0]], [], [], 0, 0], "state", ["subexpr", "@mut", [["get", "previewState", ["loc", [null, [6, 12], [6, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "preloader", "headers", "package", ["subexpr", "hash", [], ["customCSS", ["get", "model.header.settings.customCSS", ["loc", [null, [9, 18], [9, 49]]], 0, 0, 0, 0]], ["loc", [null, [8, 14], [10, 7]]], 0, 0]], ["loc", [null, [4, 4], [11, 6]]], 0, 0]],
          locals: [],
          templates: [child0]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 13,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "cornerstone/headers/header/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("  ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "outlet", ["loc", [null, [14, 2], [14, 12]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "cornerstone/headers/header/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "global/cs-canvas", [], [], 0, null, ["loc", [null, [2, 2], [12, 23]]]], ["block", "workspace/cs-workspace", [], [], 1, null, ["loc", [null, [13, 2], [15, 29]]]], ["inline", "common/confirm-modal", [], ["screen", "headers"], ["loc", [null, [16, 2], [16, 43]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "cornerstone/headers/header/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "headers-header"], 0, null, ["loc", [null, [1, 0], [17, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/headers/header/template/model', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _emberDataModel, _emberDataAttr) {
  // import { belongsTo, hasMany } from 'ember-data/relationships';

  exports['default'] = _emberDataModel['default'].extend({
    title: (0, _emberDataAttr['default'])(),
    regions: (0, _emberDataAttr['default'])()
  });
});
define('cornerstone/headers/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], {

    acl: ['canUseRegions'],

    routeUI: {
      bar: ['preview-sizer', 'collapse', 'cheatsheet'],
      orientation: 'vertical'
    },

    beforeModel: function beforeModel() {
      this.store.unloadAll('headers/entry');
      this.permissionCheck();
    },

    model: function model() {
      return _ember['default'].RSVP.hash({
        config: this.get('config').fetch('header-builder'),
        templates: this.store.findAll('headers/header/template'),
        library: this.store.findAll('element/definition'),
        entries: this.store.findAll('headers/entry'),
        assignments: this.store.findRecord('option', 'cornerstone_header_assignments'),
        newHeader: { title: '', template: '' },
        defaultTemplate: 'header-default'
      });
    },

    afterModel: function afterModel(model) {
      var val = model.assignments.get('value');
      if (!val || _ember['default'].isEmpty(val)) {
        model.assignments.set('value', {});
      }
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.get('ui').setRouteUI(this);
      controller.set('activeModal', false);
      controller.set('selectedTemplate', 'none');
      controller.set('selected', null);
    },

    actions: {

      doEntryAction: function doEntryAction() {
        this.send.apply(this, arguments);
      },

      createDefault: function createDefault() {
        this.send('createNew', this.modelFor(this.routeName).defaultTemplate, 'Default Header', true);
      },

      createNew: function createNew(templateId, title) {
        var _this = this;

        var transition = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

        if (!title) {
          return this.get('ui').notify('Your header needs a title.', 'error');
        }

        if (!templateId) {
          return this.get('ui').notify('Your header needs a template.', 'error');
        }

        var template = this.store.peekRecord('headers/header/template', templateId);

        var headerEntry = this.store.createRecord('headers/entry', {
          title: title
        });

        var header = this.store.createRecord('headers/header', {
          title: title,
          regions: template.get('regions'),
          settings: template.get('settings')
        });

        this.controllerFor('headers').set('selectedTemplate', 'none');
        this.get('ui').beginSaveProgress();
        header.save().then(function (saved) {
          headerEntry.set('id', saved.id);
          headerEntry.save();
          _this.get('ui').endSaveProgress();
          if (transition) {
            _this.transitionTo('headers.header', saved.id);
          } else {
            _this.get('ui').notify('Header created.', 'success');
          }
        })['catch'](function (reason) {
          _ember['default'].Logger.warn('Could not create new header', reason);
          _this.get('ui').notify('Unable to create new header.');
        });
      },

      entryDuplicate: function entryDuplicate(entry) {
        var _this2 = this;

        this.get('store').findRecord('headers/header', entry.get('id')).then(function (record) {

          var data = record.serialize();
          var title = _this2.get('i18n').t('app.copy-of', { title: data.data.attributes.title }).toString();

          var headerEntry = _this2.store.createRecord('headers/entry', {
            title: title
          });

          var header = _this2.store.createRecord('headers/header', {
            title: title,
            regions: data.data.attributes.regions,
            settings: data.data.attributes.settings
          });

          _this2.get('ui').beginSaveProgress();
          header.save().then(function (saved) {
            headerEntry.set('id', saved.id);
            headerEntry.save();
            _this2.get('ui').notify('Header duplicated', 'success');
            _this2.get('ui').endSaveProgress();
          })['catch'](function (reason) {
            _ember['default'].Logger.warn('Could not create new header', reason);
            _this2.get('ui').notify('Unable to duplicate header.', 'error');
            _this2.get('ui').endSaveProgress();
          });
        });
      },

      entryDelete: function entryDelete(entry) {
        var _this3 = this;

        this.get('ui').confirm({
          screen: 'headers',
          message: this.get('i18n').t('headers.entry-delete-confirm'),
          acceptClass: 'sad',
          accept: function accept() {

            _this3.get('store').findRecord('headers/header', entry.get('id')).then(function (record) {
              _this3.controllerFor('headers').set('selected', null);
              entry.destroyRecord();
              record.destroyRecord().then(function () {
                _this3.get('ui').notify('Header deleted');
                _this3.modelFor(_this3.routeName).assignments.reload();
              }, function (reason) {
                _ember['default'].Logger.warn('Could not delete header', reason);
                _this3.get('ui').notify('Unable to delete header.', 'error');
              });
            });
          }
        });
      },

      entryTitleUpdate: function entryTitleUpdate(entry) {
        var _this4 = this;

        this.get('store').findRecord('headers/header', entry.get('id')).then(function (record) {

          record.set('title', entry.get('title'));
          _this4.get('ui').beginSaveProgress();

          record.save().then(function () {
            _this4.get('ui').endSaveProgress();
          }, function (reason) {
            _ember['default'].Logger.warn('Could not update header title', reason);
            _this4.get('ui').notify('Unable to update header title.', 'error');
          });
        });
      }

    }

  });
});
define('cornerstone/headers/service', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    selected: null
  });
});
define("cornerstone/headers/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 4,
                    "column": 6
                  },
                  "end": {
                    "line": 6,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/headers/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
                return morphs;
              },
              statements: [["inline", "common/welcome-message", [], ["title", ["subexpr", "t", ["app.templates.blank-welcome"], [], ["loc", [null, [5, 39], [5, 72]]], 0, 0]], ["loc", [null, [5, 8], [5, 74]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          var child1 = (function () {
            var child0 = (function () {
              return {
                meta: {
                  "revision": "Ember@2.8.0",
                  "loc": {
                    "source": null,
                    "start": {
                      "line": 7,
                      "column": 8
                    },
                    "end": {
                      "line": 12,
                      "column": 8
                    }
                  },
                  "moduleName": "cornerstone/headers/template.hbs"
                },
                isEmpty: true,
                arity: 0,
                cachedFragment: null,
                hasRendered: false,
                buildFragment: function buildFragment(dom) {
                  var el0 = dom.createDocumentFragment();
                  return el0;
                },
                buildRenderNodes: function buildRenderNodes() {
                  return [];
                },
                statements: [],
                locals: [],
                templates: []
              };
            })();
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 6,
                    "column": 6
                  },
                  "end": {
                    "line": 13,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/headers/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createComment("");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
                dom.insertBoundary(fragment, 0);
                dom.insertBoundary(fragment, null);
                return morphs;
              },
              statements: [["block", "common/preview-frame", [], ["src", ["subexpr", "@mut", [["get", "previewURL", ["loc", [null, [8, 14], [8, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "state", ["subexpr", "@mut", [["get", "previewState", ["loc", [null, [9, 16], [9, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "preloader", "headers"], 0, null, ["loc", [null, [7, 8], [12, 33]]]]],
              locals: [],
              templates: [child0]
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 3,
                  "column": 4
                },
                "end": {
                  "line": 14,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/headers/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "if", [["subexpr", "eq", ["blank", ["get", "selectedTemplate", ["loc", [null, [4, 24], [4, 40]]], 0, 0, 0, 0]], [], ["loc", [null, [4, 12], [4, 41]]], 0, 0]], [], 0, 1, ["loc", [null, [4, 6], [13, 13]]]]],
            locals: [],
            templates: [child0, child1]
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 15,
                    "column": 6
                  },
                  "end": {
                    "line": 19,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/headers/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("div");
                dom.setAttribute(el1, "class", "cs-welcome-icon cs-welcome-icon-cs-logo");
                var el2 = dom.createTextNode("\n          ");
                dom.appendChild(el1, el2);
                var el2 = dom.createComment("");
                dom.appendChild(el1, el2);
                var el2 = dom.createTextNode("\n        ");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
                var morphs = new Array(1);
                morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 1, 1);
                return morphs;
              },
              statements: [["inline", "cs-icon", ["interface/logo-headers-flat-original"], [], ["loc", [null, [17, 10], [17, 60]]], 0, 0]],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 14,
                  "column": 4
                },
                "end": {
                  "line": 20,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/headers/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "common/welcome-message", [], [], 0, null, ["loc", [null, [15, 6], [19, 33]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 21,
                "column": 2
              }
            },
            "moduleName": "cornerstone/headers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "unless", [["subexpr", "eq", ["off", ["get", "previewing", ["loc", [null, [3, 24], [3, 34]]], 0, 0, 0, 0]], [], ["loc", [null, [3, 14], [3, 35]]], 0, 0]], [], 0, 1, ["loc", [null, [3, 4], [20, 15]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 22,
                "column": 2
              },
              "end": {
                "line": 53,
                "column": 2
              }
            },
            "moduleName": "cornerstone/headers/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["inline", "regions/hf-index", [], ["context", "headers", "assignContexts", ["subexpr", "@mut", [["get", "flattenedAssignContexts", ["loc", [null, [25, 21], [25, 44]]], 0, 0, 0, 0]], [], [], 0, 0], "assignments", ["subexpr", "@mut", [["get", "model.assignments", ["loc", [null, [26, 18], [26, 35]]], 0, 0, 0, 0]], [], [], 0, 0], "entries", ["subexpr", "@mut", [["get", "model.entries", ["loc", [null, [27, 14], [27, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "selected", ["subexpr", "@mut", [["get", "selected", ["loc", [null, [28, 15], [28, 23]]], 0, 0, 0, 0]], [], [], 0, 0], "selectedTemplate", ["subexpr", "@mut", [["get", "selectedTemplate", ["loc", [null, [29, 23], [29, 39]]], 0, 0, 0, 0]], [], [], 0, 0], "defaultSelected", ["subexpr", "@mut", [["get", "defaultSelected", ["loc", [null, [30, 22], [30, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "templateOptions", ["subexpr", "@mut", [["get", "templateOptions", ["loc", [null, [31, 22], [31, 37]]], 0, 0, 0, 0]], [], [], 0, 0], "editRoute", "headers.header", "onAction", ["subexpr", "route-action", ["doEntryAction"], [], ["loc", [null, [33, 15], [33, 45]]], 0, 0], "onCreate", ["subexpr", "route-action", ["createNew"], [], ["loc", [null, [34, 15], [34, 41]]], 0, 0], "onTitleUpdate", ["subexpr", "route-action", ["entryTitleUpdate"], [], ["loc", [null, [35, 20], [35, 53]]], 0, 0], "assignLabels", ["subexpr", "hash", [], ["globalMessage", "This header is currently assigned as your global (default) header.", "blankMessage", "Click a header to manage assignments."], ["loc", [null, [36, 19], [39, 7]]], 0, 0], "createLabels", ["subexpr", "hash", [], ["heading", "Create Header", "previewMessage", "Select a template to begin. Your choice will be previewed above.", "createMessage", "To start building with this header, name it below and click <strong>Create.</strong>", "templatePlaceholder", "Choose Template", "titlePlaceholder", "", "createLabel", "Create"], ["loc", [null, [40, 19], [47, 7]]], 0, 0], "manageLabels", ["subexpr", "hash", [], ["defaultItem", "Default Header"], ["loc", [null, [48, 19], [50, 7]]], 0, 0]], ["loc", [null, [23, 4], [51, 6]]], 0, 0], ["content", "outlet", ["loc", [null, [52, 4], [52, 14]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 55,
              "column": 0
            }
          },
          "moduleName": "cornerstone/headers/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(3);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          dom.insertBoundary(fragment, 0);
          return morphs;
        },
        statements: [["block", "global/cs-canvas", [], [], 0, null, ["loc", [null, [2, 2], [21, 23]]]], ["block", "workspace/cs-workspace", [], [], 1, null, ["loc", [null, [22, 2], [53, 29]]]], ["inline", "common/confirm-modal", [], ["screen", "headers"], ["loc", [null, [54, 2], [54, 43]]], 0, 0]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 56,
            "column": 0
          }
        },
        "moduleName": "cornerstone/headers/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "headers"], 0, null, ["loc", [null, [1, 0], [55, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/helpers/append', ['exports', 'ember-composable-helpers/helpers/append'], function (exports, _emberComposableHelpersHelpersAppend) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersAppend['default'];
    }
  });
  Object.defineProperty(exports, 'append', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersAppend.append;
    }
  });
});
define('cornerstone/helpers/array', ['exports', 'ember'], function (exports, _ember) {
  exports.array = array;

  function array(params /*, hash*/) {
    return params;
  }

  exports['default'] = _ember['default'].Helper.helper(array);
});
define('cornerstone/helpers/bar-module-markup', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Helper.extend({

    defaultTemplate: '<div class="hm{{model.id}}" style="display:none;">{{yield}}</div>',

    renderService: _ember['default'].inject.service('preview/bar-modules'),

    compute: function compute(params) {
      if ('string' !== typeof params[0]) {
        this.get('renderService').updateMarkup(params[1]);
        return this.get('defaultTemplate');
      }
      return params[0];
    }
  });
});
define('cornerstone/helpers/base64content', ['exports', 'ember', 'cornerstone/util/base64'], function (exports, _ember, _cornerstoneUtilBase64) {
  exports.base64Content = base64Content;

  function base64Content(params) {
    return _ember['default'].String.htmlSafe(_cornerstoneUtilBase64['default'].decode(params[0]));
  }

  exports['default'] = _ember['default'].Helper.helper(base64Content);
});
define('cornerstone/helpers/camelize', ['exports', 'ember-composable-helpers/helpers/camelize'], function (exports, _emberComposableHelpersHelpersCamelize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCamelize['default'];
    }
  });
  Object.defineProperty(exports, 'camelize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCamelize.camelize;
    }
  });
});
define('cornerstone/helpers/capitalize', ['exports', 'ember-composable-helpers/helpers/capitalize'], function (exports, _emberComposableHelpersHelpersCapitalize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCapitalize['default'];
    }
  });
  Object.defineProperty(exports, 'capitalize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCapitalize.capitalize;
    }
  });
});
define('cornerstone/helpers/chunk', ['exports', 'ember-composable-helpers/helpers/chunk'], function (exports, _emberComposableHelpersHelpersChunk) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersChunk['default'];
    }
  });
  Object.defineProperty(exports, 'chunk', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersChunk.chunk;
    }
  });
});
define('cornerstone/helpers/classify', ['exports', 'ember-composable-helpers/helpers/classify'], function (exports, _emberComposableHelpersHelpersClassify) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersClassify['default'];
    }
  });
  Object.defineProperty(exports, 'classify', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersClassify.classify;
    }
  });
});
define('cornerstone/helpers/compact', ['exports', 'ember-composable-helpers/helpers/compact'], function (exports, _emberComposableHelpersHelpersCompact) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompact['default'];
    }
  });
  Object.defineProperty(exports, 'compact', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompact.compact;
    }
  });
});
define('cornerstone/helpers/compute', ['exports', 'ember-composable-helpers/helpers/compute'], function (exports, _emberComposableHelpersHelpersCompute) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompute['default'];
    }
  });
  Object.defineProperty(exports, 'compute', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompute.compute;
    }
  });
});
define('cornerstone/helpers/contains', ['exports', 'ember-composable-helpers/helpers/contains'], function (exports, _emberComposableHelpersHelpersContains) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersContains['default'];
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersContains.contains;
    }
  });
});
define('cornerstone/helpers/cs-icon', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Helper.extend({

    compute: function compute(params) {

      if (!params[0]) {
        return;
      }

      var path = params[0].split('/');
      var group = path[0];
      path.shift();
      var icon = path.join('-');

      var transform = _ember['default'].getOwner(this).resolveRegistration('icon:' + group + '/' + icon);

      if ('function' === typeof transform) {
        return _ember['default'].String.htmlSafe(transform());
      }

      var iconMaps = this.get('config.global.iconMaps');
      if (!iconMaps[group]) {
        return;
      }

      var extra = params[1] ? params[1] : '';

      return _ember['default'].String.htmlSafe('<svg role="img" class="cs-custom-icon">' + extra + '<use xlink:href="' + iconMaps[group] + '#' + icon + '"></use></svg>');
    }

  });
});
define('cornerstone/helpers/dasherize', ['exports', 'ember-composable-helpers/helpers/dasherize'], function (exports, _emberComposableHelpersHelpersDasherize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDasherize['default'];
    }
  });
  Object.defineProperty(exports, 'dasherize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDasherize.dasherize;
    }
  });
});
define('cornerstone/helpers/dec', ['exports', 'ember-composable-helpers/helpers/dec'], function (exports, _emberComposableHelpersHelpersDec) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDec['default'];
    }
  });
  Object.defineProperty(exports, 'dec', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDec.dec;
    }
  });
});
define('cornerstone/helpers/drop', ['exports', 'ember-composable-helpers/helpers/drop'], function (exports, _emberComposableHelpersHelpersDrop) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDrop['default'];
    }
  });
  Object.defineProperty(exports, 'drop', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDrop.drop;
    }
  });
});
define('cornerstone/helpers/dynamic-bar-module', ['exports', 'cornerstone/helpers/dynamic-component', 'cornerstone/components/preview/bar-module/component'], function (exports, _cornerstoneHelpersDynamicComponent, _cornerstoneComponentsPreviewBarModuleComponent) {
  exports['default'] = _cornerstoneHelpersDynamicComponent['default'].extend({
    name: 'element',
    getComponentClass: function getComponentClass() {
      return _cornerstoneComponentsPreviewBarModuleComponent['default'];
    },
    transformTemplate: function transformTemplate(template) {

      if ('string' !== typeof template) {
        return template;
      }

      return template.replace(new RegExp('{{yield}}', 'g'), '{{#each (sort-by "order" model.children) as |child| }}{{component (dynamic-bar-module (bar-module-markup (get renderService.cache (concat \'markup-\' child.id) ) child ) model=child)}}{{/each}}');
    }
  });
});
// import Ember from 'ember';
define('cornerstone/helpers/dynamic-component', ['exports', 'ember'], function (exports, _ember) {
  var count = 0;

  function parseTemplate(template, hash) {

    var normalized = normalizeMarkup(template, hash);

    var rootEl = undefined;
    var scripts = {};
    var scriptIndex = 0;
    var html = _ember['default'].$.parseHTML(normalized, null, true);

    // Abort if HTML couldn't be parsed, or no suitable root element was found.
    // The first DOM node found will become the root element
    if (!html || !(rootEl = html.find(function (node) {
      return 1 === node.nodeType;
    }))) {
      return output(normalized);
    }

    // We need to work off a single root element
    // This captures additional elements after the
    // first and holds them in a special container
    var extraNodes = [];
    html.forEach(function (node) {
      extractScripts(node);
      if (node !== rootEl) {
        extraNodes.push(node);
      }
    });

    if (extraNodes.length > 0) {
      (function () {
        var extraContainer = document.createElement('div');
        extraContainer.setAttribute('data-cs-extra-container', null);
        extraNodes.forEach(function (node) {
          return extraContainer.append(node);
        });
        rootEl.append(extraContainer);
      })();
    }

    // Set the layout to those contents
    // Convert attributes to component properties
    return output(rootEl.innerHTML, propsFromAtts(rootEl));

    function output(html) {
      var properties = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

      // console.log(html);
      var layout = '';
      try {
        layout = _ember['default'].HTMLBars.compile('string' === typeof html ? optimizeMarkup(html) : '');
      } catch (e) {
        console.warn('Template compile error', e);
        layout = '<p>This element could not render due to invalid template markup. This could be due to changes introduced by a third party plugin. The front end of your site should still function normally.';
      }

      return { layout: layout, properties: properties, scripts: scripts };
    }

    function extractScripts(node) {

      if (!node.querySelectorAll) {
        return;
      }

      node.querySelectorAll('script').forEach(function (script) {
        var id = 'cs-inline-script:' + scriptIndex++;
        script.insertAdjacentHTML('beforebegin', '<!--' + id + '-->');
        scripts[id] = script.outerHTML;
        script.remove();
      });
    }
  }

  function normalizeMarkup(html, hash) {

    if ('' === hash.tagName) {
      html = '<div>' + html + '</div>';
    }

    return html;
  }

  function optimizeMarkup(html) {

    return html.replace(/(\s[\w\-]+?)=\"({{[\w\.\_]+?}})\"/g, removeAttributeQuotes);

    function removeAttributeQuotes(match, p1, p2 /*, offset, string */) {
      return p1 + '=' + p2;
    }
  }

  function propsFromAtts(el) {

    var propCount = 0;
    var properties = {};

    if (el.hasAttributes()) {
      var attrs = el.attributes;
      for (var i = attrs.length - 1; i >= 0; i--) {
        mapAttr(attrs[i].name, attrs[i].value);
      }
    }

    function mapAttr(name, value) {

      if ('id' === name) {
        name = 'data-original-id';
      }

      if ('class' === name) {
        return mapClasses(value);
      }

      if (!properties.attributeBindings) {
        properties.attributeBindings = [];
      }

      var binding = makeBinding(value);
      properties.attributeBindings.push(binding + ':' + name);
    }

    function mapClasses(value) {

      value.split(' ').forEach(function (item) {
        var binding = makeBinding(item, true);
        if (false !== binding) {
          if (!properties.classNameBindings) {
            properties.classNameBindings = [];
          }
          properties.classNameBindings.push(binding);
        } else {
          if (!properties.classNames) {
            properties.classNames = [];
          }
          properties.classNames.push(item);
        }
      });
    }

    // Returns a binding reference for a property.
    // Creates computed property when needed
    // Passing observeNone as true will return false when no bindings are required
    function makeBinding(string, observeNone) {

      // Split our string into recognizeable parts
      // [ "before", { key: 'observedProperty' }, "after" ]
      var keys = [];
      var parts = string.split(new RegExp(/({{[\w\.\-\_]+?}})/g)).filter(function (string) {
        return '' !== string;
      }).map(function (part) {
        if (0 === part.indexOf('{{') && part.length - 2 === part.indexOf('}}')) {
          var key = part.substr(0, part.length - 2).substr(2);
          keys.push(key);
          return { key: key };
        }
        return part;
      });

      // Abort if there are no keys to observe and we are using observeNone
      if (_ember['default'].isEmpty(keys) && observeNone) {
        return false;
      }

      // If this attribute is a single key, we can use that directly
      if (1 === parts.length && 1 === keys.length) {
        return keys[0];
      }

      // Otherwise we need to fashion a computed property
      var name = 'dynamicProp' + propCount++;
      var args = keys.splice(0);

      args.push(function () {
        var _this = this;

        return _ember['default'].String.htmlSafe(parts.reduce(function (output, part) {
          return output + ('object' === typeof part ? _this.get(part.key) : part);
        }, ''));
      });

      properties[name] = _ember['default'].computed.apply(_ember['default'], args);

      return name;
    }

    return properties;
  }

  exports['default'] = _ember['default'].Helper.extend({
    name: 'component',
    getComponentClass: function getComponentClass() {
      return _ember['default'].Component;
    },
    transformTemplate: function transformTemplate(template) {
      return template;
    },
    compute: function compute(params, hash) {

      // Parse our string into a handlebars template
      // and collection of component properties

      var _parseTemplate = parseTemplate(this.transformTemplate(params[0]), hash);

      var layout = _parseTemplate.layout;
      var properties = _parseTemplate.properties;
      var scripts = _parseTemplate.scripts;

      // Create a Component on the fly
      var baseClass = this.getComponentClass();
      var component = baseClass.extend(_ember['default'].assign(properties, hash, {
        layout: layout,
        _extraChildren: _ember['default'].A(),
        didInsertElement: function didInsertElement() {
          var _this2 = this;

          this._super.apply(this, arguments);

          _ember['default'].run.scheduleOnce('afterRender', function () {
            if (!_this2.get('element')) {
              return;
            }

            // Now that we've rendered, we can place all of our additional nodes
            // (stored in the extra container) after our main element
            var extra = _this2.get('element').querySelector('div[data-cs-extra-container]');
            if (extra) {
              var extraChildren = _ember['default'].A();
              for (var i = 0; i < extra.children.length; i++) {
                extraChildren.push(extra.children[i]);
                _this2.$().after(extra.children[i]);
              }
              _this2.set('_extraChildren', extraChildren);
              extra.remove();
            }

            // "Wake up" script tags
            _this2.get('element').querySelectorAll('script').forEach(function (script) {
              _ember['default'].$(script).after(script.outerHTML);
              script.remove();
            });

            // Expand template level script tags
            if (!_ember['default'].isEmpty(Object.keys(scripts))) {
              getComments(_this2.get('element')).forEach(function (comment) {
                if (scripts[comment.nodeValue]) {
                  _ember['default'].$(comment).after(scripts[comment.nodeValue]);
                  comment.remove();
                }
              });
            }
          });
        },
        willDestroy: function willDestroy() {
          this._super.apply(this, arguments);
          this.getWithDefault('_extraChildren', []).forEach(function (node) {
            return node.remove();
          });
          _ember['default'].run.next(this, function () {
            component = null;
          });
        }
      }));

      // Register our component temporarily so it can be
      // used by the {{component}} helper

      var owner = _ember['default'].getOwner(this);
      var uniqueId = 'dynamic/' + this.get('name') + '-' + count++;

      owner.register('component:' + uniqueId, component);
      _ember['default'].run.next(this, function () {
        owner.unregister('component:' + uniqueId);
      });

      function getComments(rootElem) {
        // http://stackoverflow.com/a/13364065
        function filterNone() {
          return NodeFilter.FILTER_ACCEPT;
        }
        var comments = [];
        var iterator = document.createNodeIterator(rootElem, NodeFilter.SHOW_COMMENT, filterNone, false);
        var curNode;
        while (curNode = iterator.nextNode()) {
          // eslint-disable-line no-cond-assign
          comments.push(curNode);
        }
        return comments;
      }

      return uniqueId;
    }
  });
});
define('cornerstone/helpers/eq', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.eq = eq;

  function eq(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var a = _ref2[0];
    var b = _ref2[1];

    return a === b;
  }

  exports['default'] = _ember['default'].Helper.helper(eq);
});
define('cornerstone/helpers/fa-icon', ['exports', 'ember'], function (exports, _ember) {
  exports.faIcon = faIcon;

  function faIcon(params) {
    return _ember['default'].String.htmlSafe('<i class="cs-fa cs-fa-' + params[0] + '" aria-hidden="true"></i>');
  }

  exports['default'] = _ember['default'].Helper.helper(faIcon);
});
define('cornerstone/helpers/filter-by', ['exports', 'ember-composable-helpers/helpers/filter-by'], function (exports, _emberComposableHelpersHelpersFilterBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilterBy['default'];
    }
  });
  Object.defineProperty(exports, 'filterBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilterBy.filterBy;
    }
  });
});
define('cornerstone/helpers/filter', ['exports', 'ember-composable-helpers/helpers/filter'], function (exports, _emberComposableHelpersHelpersFilter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilter['default'];
    }
  });
  Object.defineProperty(exports, 'filter', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilter.filter;
    }
  });
});
define('cornerstone/helpers/find-by', ['exports', 'ember-composable-helpers/helpers/find-by'], function (exports, _emberComposableHelpersHelpersFindBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFindBy['default'];
    }
  });
  Object.defineProperty(exports, 'findBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFindBy.findBy;
    }
  });
});
define('cornerstone/helpers/flatten', ['exports', 'ember-composable-helpers/helpers/flatten'], function (exports, _emberComposableHelpersHelpersFlatten) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFlatten['default'];
    }
  });
  Object.defineProperty(exports, 'flatten', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFlatten.flatten;
    }
  });
});
define('cornerstone/helpers/group-by', ['exports', 'ember-composable-helpers/helpers/group-by'], function (exports, _emberComposableHelpersHelpersGroupBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersGroupBy['default'];
    }
  });
  Object.defineProperty(exports, 'groupBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersGroupBy.groupBy;
    }
  });
});
define('cornerstone/helpers/has-next', ['exports', 'ember-composable-helpers/helpers/has-next'], function (exports, _emberComposableHelpersHelpersHasNext) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasNext['default'];
    }
  });
  Object.defineProperty(exports, 'hasNext', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasNext.hasNext;
    }
  });
});
define('cornerstone/helpers/has-previous', ['exports', 'ember-composable-helpers/helpers/has-previous'], function (exports, _emberComposableHelpersHelpersHasPrevious) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasPrevious['default'];
    }
  });
  Object.defineProperty(exports, 'hasPrevious', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasPrevious.hasPrevious;
    }
  });
});
define('cornerstone/helpers/html-safe', ['exports', 'ember-composable-helpers/helpers/html-safe'], function (exports, _emberComposableHelpersHelpersHtmlSafe) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHtmlSafe['default'];
    }
  });
  Object.defineProperty(exports, 'htmlSafe', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHtmlSafe.htmlSafe;
    }
  });
});
define('cornerstone/helpers/icon', ['exports', 'ember', 'cornerstone/helpers/fa-icon', 'cornerstone/helpers/cs-icon'], function (exports, _ember, _cornerstoneHelpersFaIcon, _cornerstoneHelpersCsIcon) {
  exports['default'] = _cornerstoneHelpersCsIcon['default'].extend({
    compute: function compute(params) {
      var icon = this._super(params);
      return _ember['default'].isNone(icon) ? (0, _cornerstoneHelpersFaIcon.faIcon)(params) : icon;
    }
  });
});
define('cornerstone/helpers/inc', ['exports', 'ember-composable-helpers/helpers/inc'], function (exports, _emberComposableHelpersHelpersInc) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInc['default'];
    }
  });
  Object.defineProperty(exports, 'inc', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInc.inc;
    }
  });
});
define('cornerstone/helpers/intersect', ['exports', 'ember-composable-helpers/helpers/intersect'], function (exports, _emberComposableHelpersHelpersIntersect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersIntersect['default'];
    }
  });
  Object.defineProperty(exports, 'intersect', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersIntersect.intersect;
    }
  });
});
define('cornerstone/helpers/invoke', ['exports', 'ember-composable-helpers/helpers/invoke'], function (exports, _emberComposableHelpersHelpersInvoke) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInvoke['default'];
    }
  });
  Object.defineProperty(exports, 'invoke', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInvoke.invoke;
    }
  });
});
define('cornerstone/helpers/join', ['exports', 'ember-composable-helpers/helpers/join'], function (exports, _emberComposableHelpersHelpersJoin) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersJoin['default'];
    }
  });
  Object.defineProperty(exports, 'join', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersJoin.join;
    }
  });
});
define('cornerstone/helpers/locate-component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Helper.extend({
    compute: function compute(params /*, hash*/) {
      return _ember['default'].getOwner(this).hasRegistration('component:' + params[0]) ? params[0] : params[1];
    }
  });
});
define('cornerstone/helpers/map-by', ['exports', 'ember-composable-helpers/helpers/map-by'], function (exports, _emberComposableHelpersHelpersMapBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMapBy['default'];
    }
  });
  Object.defineProperty(exports, 'mapBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMapBy.mapBy;
    }
  });
});
define('cornerstone/helpers/map', ['exports', 'ember-composable-helpers/helpers/map'], function (exports, _emberComposableHelpersHelpersMap) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMap['default'];
    }
  });
  Object.defineProperty(exports, 'map', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMap.map;
    }
  });
});
define('cornerstone/helpers/next', ['exports', 'ember-composable-helpers/helpers/next'], function (exports, _emberComposableHelpersHelpersNext) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersNext['default'];
    }
  });
  Object.defineProperty(exports, 'next', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersNext.next;
    }
  });
});
define('cornerstone/helpers/not-eq', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.notEq = notEq;

  function notEq(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var a = _ref2[0];
    var b = _ref2[1];

    return a !== b;
  }

  exports['default'] = _ember['default'].Helper.helper(notEq);
});
define('cornerstone/helpers/not', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.not = not;

  function not(_ref) {
    var _ref2 = _slicedToArray(_ref, 1);

    var val = _ref2[0];

    return !val;
  }

  exports['default'] = _ember['default'].Helper.helper(not);
});
define('cornerstone/helpers/object-at', ['exports', 'ember-composable-helpers/helpers/object-at'], function (exports, _emberComposableHelpersHelpersObjectAt) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersObjectAt['default'];
    }
  });
  Object.defineProperty(exports, 'objectAt', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersObjectAt.objectAt;
    }
  });
});
define('cornerstone/helpers/optional', ['exports', 'ember-composable-helpers/helpers/optional'], function (exports, _emberComposableHelpersHelpersOptional) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersOptional['default'];
    }
  });
  Object.defineProperty(exports, 'optional', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersOptional.optional;
    }
  });
});
define('cornerstone/helpers/or', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.or = or;

  function or(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var a = _ref2[0];
    var b = _ref2[1];

    return a || b;
  }

  exports['default'] = _ember['default'].Helper.helper(or);
});
define('cornerstone/helpers/pipe-action', ['exports', 'ember-composable-helpers/helpers/pipe-action'], function (exports, _emberComposableHelpersHelpersPipeAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPipeAction['default'];
    }
  });
});
define('cornerstone/helpers/pipe', ['exports', 'ember-composable-helpers/helpers/pipe'], function (exports, _emberComposableHelpersHelpersPipe) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPipe['default'];
    }
  });
  Object.defineProperty(exports, 'pipe', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPipe.pipe;
    }
  });
});
define('cornerstone/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('cornerstone/helpers/previous', ['exports', 'ember-composable-helpers/helpers/previous'], function (exports, _emberComposableHelpersHelpersPrevious) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPrevious['default'];
    }
  });
  Object.defineProperty(exports, 'previous', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPrevious.previous;
    }
  });
});
define('cornerstone/helpers/queue', ['exports', 'ember-composable-helpers/helpers/queue'], function (exports, _emberComposableHelpersHelpersQueue) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersQueue['default'];
    }
  });
  Object.defineProperty(exports, 'queue', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersQueue.queue;
    }
  });
});
define('cornerstone/helpers/range', ['exports', 'ember-composable-helpers/helpers/range'], function (exports, _emberComposableHelpersHelpersRange) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRange['default'];
    }
  });
  Object.defineProperty(exports, 'range', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRange.range;
    }
  });
});
define('cornerstone/helpers/read-path', ['exports', 'ember'], function (exports, _ember) {
  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

  exports.readPath = readPath;

  function readPath(_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var object = _ref2[0];
    var path = _ref2[1];

    return _ember['default'].get(object, path);
  }

  exports['default'] = _ember['default'].Helper.helper(readPath);
});
define('cornerstone/helpers/reduce', ['exports', 'ember-composable-helpers/helpers/reduce'], function (exports, _emberComposableHelpersHelpersReduce) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReduce['default'];
    }
  });
  Object.defineProperty(exports, 'reduce', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReduce.reduce;
    }
  });
});
define('cornerstone/helpers/reject-by', ['exports', 'ember-composable-helpers/helpers/reject-by'], function (exports, _emberComposableHelpersHelpersRejectBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRejectBy['default'];
    }
  });
  Object.defineProperty(exports, 'rejectBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRejectBy.rejectBy;
    }
  });
});
define('cornerstone/helpers/repeat', ['exports', 'ember-composable-helpers/helpers/repeat'], function (exports, _emberComposableHelpersHelpersRepeat) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRepeat['default'];
    }
  });
  Object.defineProperty(exports, 'repeat', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRepeat.repeat;
    }
  });
});
define('cornerstone/helpers/reverse', ['exports', 'ember-composable-helpers/helpers/reverse'], function (exports, _emberComposableHelpersHelpersReverse) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReverse['default'];
    }
  });
  Object.defineProperty(exports, 'reverse', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReverse.reverse;
    }
  });
});
define('cornerstone/helpers/route-action', ['exports', 'ember-route-action-helper/helpers/route-action'], function (exports, _emberRouteActionHelperHelpersRouteAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRouteActionHelperHelpersRouteAction['default'];
    }
  });
});
define('cornerstone/helpers/shuffle', ['exports', 'ember-composable-helpers/helpers/shuffle'], function (exports, _emberComposableHelpersHelpersShuffle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersShuffle['default'];
    }
  });
  Object.defineProperty(exports, 'shuffle', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersShuffle.shuffle;
    }
  });
});
define('cornerstone/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('cornerstone/helpers/slice', ['exports', 'ember-composable-helpers/helpers/slice'], function (exports, _emberComposableHelpersHelpersSlice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSlice['default'];
    }
  });
  Object.defineProperty(exports, 'slice', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSlice.slice;
    }
  });
});
define('cornerstone/helpers/sort-by', ['exports', 'ember-composable-helpers/helpers/sort-by'], function (exports, _emberComposableHelpersHelpersSortBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSortBy['default'];
    }
  });
  Object.defineProperty(exports, 'sortBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSortBy.sortBy;
    }
  });
});
define('cornerstone/helpers/t', ['exports', 'ember-i18n/helper'], function (exports, _emberI18nHelper) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nHelper['default'];
    }
  });
});
define('cornerstone/helpers/take', ['exports', 'ember-composable-helpers/helpers/take'], function (exports, _emberComposableHelpersHelpersTake) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTake['default'];
    }
  });
  Object.defineProperty(exports, 'take', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTake.take;
    }
  });
});
define('cornerstone/helpers/titleize', ['exports', 'ember-composable-helpers/helpers/titleize'], function (exports, _emberComposableHelpersHelpersTitleize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTitleize['default'];
    }
  });
  Object.defineProperty(exports, 'titleize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTitleize.titleize;
    }
  });
});
define('cornerstone/helpers/toggle-action', ['exports', 'ember-composable-helpers/helpers/toggle-action'], function (exports, _emberComposableHelpersHelpersToggleAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersToggleAction['default'];
    }
  });
});
define('cornerstone/helpers/toggle', ['exports', 'ember-composable-helpers/helpers/toggle'], function (exports, _emberComposableHelpersHelpersToggle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersToggle['default'];
    }
  });
  Object.defineProperty(exports, 'toggle', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersToggle.toggle;
    }
  });
});
define('cornerstone/helpers/truncate', ['exports', 'ember-composable-helpers/helpers/truncate'], function (exports, _emberComposableHelpersHelpersTruncate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTruncate['default'];
    }
  });
  Object.defineProperty(exports, 'truncate', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTruncate.truncate;
    }
  });
});
define('cornerstone/helpers/underscore', ['exports', 'ember-composable-helpers/helpers/underscore'], function (exports, _emberComposableHelpersHelpersUnderscore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnderscore['default'];
    }
  });
  Object.defineProperty(exports, 'underscore', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnderscore.underscore;
    }
  });
});
define('cornerstone/helpers/union', ['exports', 'ember-composable-helpers/helpers/union'], function (exports, _emberComposableHelpersHelpersUnion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnion['default'];
    }
  });
  Object.defineProperty(exports, 'union', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnion.union;
    }
  });
});
define('cornerstone/helpers/w', ['exports', 'ember-composable-helpers/helpers/w'], function (exports, _emberComposableHelpersHelpersW) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersW['default'];
    }
  });
  Object.defineProperty(exports, 'w', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersW.w;
    }
  });
});
define('cornerstone/helpers/without', ['exports', 'ember-composable-helpers/helpers/without'], function (exports, _emberComposableHelpersHelpersWithout) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersWithout['default'];
    }
  });
  Object.defineProperty(exports, 'without', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersWithout.without;
    }
  });
});
define('cornerstone/icons/interface/js', ['exports'], function (exports) {
  exports['default'] = function () {
    return 'JS';
  };
});
define('cornerstone/icons/interface/logo-pro', ['exports'], function (exports) {
  exports['default'] = function () {

    return '<svg width="100%" height="100%" viewBox="0 0 301 301" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><defs><radialGradient cx="50.0002681%" cy="50.007793%" fx="50.0002681%" fy="50.007793%" r="49.992207%" gradientTransform="translate(0.500003,0.500078),rotate(90.000000),scale(1.000000,0.996541),translate(-0.500003,-0.500078)" id="proRadialGradient-1"><stop stop-color="#72B3EB" offset="0%"></stop><stop stop-color="#2160AB" offset="100%"></stop></radialGradient></defs><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="Desktop-HD" transform="translate(-720.000000, -574.000000)" fill-rule="nonzero"><g id="PRO" transform="translate(720.000000, 574.000000)"><circle id="Oval" fill="url(#proRadialGradient-1)" cx="150.5" cy="150.5" r="150.5"></circle><path d="M68.0721829,131.680864 L68.0721829,154.303526 L86.1297337,154.303526 C101.549665,154.303526 101.448218,131.680864 86.1297337,131.680864 L68.0721829,131.680864 Z M86.1297337,120.217363 C117.375383,120.217363 117.47683,165.462687 86.1297337,165.462687 L68.0721829,165.462687 L68.0721829,184.230366 L56,184.230366 L56,120.31881 C66.0432446,120.31881 76.0864891,120.217363 86.1297337,120.217363 Z M174.388549,183.418791 L174.388549,184.230366 L160.084535,184.230366 L141.418302,162.825067 L129.853354,162.825067 L129.853354,184.230366 L117.781171,184.230366 L117.781171,120.217363 C127.925863,120.217363 138.070554,120.31881 148.215245,120.31881 C163.330836,120.420257 171.243695,130.463501 171.243695,141.521215 C171.243695,150.24565 167.185819,159.172978 155.113636,161.607704 L174.388549,183.418791 Z M148.215245,131.579417 L129.853354,131.579417 L129.853354,152.071694 L148.215245,152.071694 C155.925211,152.071694 159.171512,146.999348 159.171512,141.825556 C159.171512,136.651763 155.823764,131.579417 148.215245,131.579417 Z M209.387735,119 C231.401716,119 242.357982,135.840188 242.155089,152.578929 C241.952195,169.114776 231.807503,185.650623 209.387735,185.650623 C186.967967,185.650623 176.518935,169.520564 176.518935,152.680376 C176.518935,135.840188 187.272308,119 209.387735,119 Z M209.387735,129.956267 C194.373592,129.956267 188.083883,142.129897 188.388224,152.88327 C188.692564,163.433749 194.373592,174.592909 209.387735,174.592909 C224.503325,174.592909 230.082906,163.230855 230.2858,152.781823 C230.488693,142.02845 224.401878,129.956267 209.387735,129.956267 Z" id="path-2_13_" fill="#2463AD"></path><path d="M73.6,130.2 L73.6,152.5 L91.4,152.5 C106.6,152.5 106.5,130.2 91.4,130.2 L73.6,130.2 Z M91.4,118.9 C122.2,118.9 122.3,163.5 91.4,163.5 L73.6,163.5 L73.6,182 L61.7,182 L61.7,119 C71.6,119 81.5,118.9 91.4,118.9 Z M178.4,181.2 L178.4,182 L164.3,182 L145.9,160.9 L134.5,160.9 L134.5,182 L122.6,182 L122.6,118.9 C132.6,118.9 142.6,119 152.6,119 C167.5,119.1 175.3,129 175.3,139.9 C175.3,148.5 171.3,157.3 159.4,159.7 L178.4,181.2 Z M152.6,130.1 L134.5,130.1 L134.5,150.3 L152.6,150.3 C160.2,150.3 163.4,145.3 163.4,140.2 C163.4,135.1 160.1,130.1 152.6,130.1 Z M212.9,117.7 C234.6,117.7 245.4,134.3 245.2,150.8 C245,167.1 235,183.4 212.9,183.4 C190.8,183.4 180.5,167.5 180.5,150.9 C180.5,134.3 191.1,117.7 212.9,117.7 Z M212.9,128.5 C198.1,128.5 191.9,140.5 192.2,151.1 C192.5,161.5 198.1,172.5 212.9,172.5 C227.8,172.5 233.3,161.3 233.5,151 C233.7,140.4 227.7,128.5 212.9,128.5 Z" id="path-2_13_" fill="#FFFFFF"></path></g></g></g></svg>';
  };
});
define('cornerstone/icons/styled/something', ['exports'], function (exports) {
  exports['default'] = function () {
    return 'yup';
  };
});
define('cornerstone/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'cornerstone/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _cornerstoneConfigEnvironment) {
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(_cornerstoneConfigEnvironment['default'].APP.name, _cornerstoneConfigEnvironment['default'].APP.version)
  };
});
define('cornerstone/initializers/config', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(app) {

    app.inject('helper', 'config', 'service:config');
    app.inject('route', 'config', 'service:config');
    app.inject('service:cs-ajax', 'config', 'service:config');
    app.inject('service:controls', 'config', 'service:config');
    app.inject('service:current-user', 'config', 'service:config');

    app.inject('service:config', 'i18n', 'service:i18n');
    app.inject('service:controls', 'i18n', 'service:i18n');
    app.inject('route', 'i18n', 'service:i18n');
    app.inject('component', 'i18n', 'service:i18n');
    app.inject('model', 'i18n', 'service:i18n');
  }

  exports['default'] = {
    name: 'config',
    after: ['ember-i18n'],
    initialize: initialize
  };
});
define('cornerstone/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('cornerstone/initializers/cs-ajax', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(application) {
    application.inject('route', 'csAjax', 'service:cs-ajax');
    application.inject('adapter', 'csAjax', 'service:cs-ajax');
  }

  exports['default'] = {
    name: 'cs-ajax',
    after: 'config',
    initialize: initialize
  };
});
define('cornerstone/initializers/current-user', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(app) {
    app.inject('controller', 'currentUser', 'service:current-user');
    app.inject('component', 'currentUser', 'service:current-user');
    app.inject('route', 'currentUser', 'service:current-user');
  }

  exports['default'] = {
    name: 'current-user',
    after: ['config'],
    initialize: initialize
  };
});
define('cornerstone/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('cornerstone/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.ArrayController.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define('cornerstone/initializers/ember-i18n', ['exports', 'ember-i18n/initializers/ember-i18n'], function (exports, _emberI18nInitializersEmberI18n) {
  exports['default'] = _emberI18nInitializersEmberI18n['default'];
});
define('cornerstone/initializers/export-application-global', ['exports', 'ember', 'cornerstone/config/environment'], function (exports, _ember, _cornerstoneConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_cornerstoneConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _cornerstoneConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_cornerstoneConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('cornerstone/initializers/flash-messages', ['exports', 'ember', 'cornerstone/config/environment'], function (exports, _ember, _cornerstoneConfigEnvironment) {
  exports.initialize = initialize;
  var deprecate = _ember['default'].deprecate;

  var merge = _ember['default'].assign || _ember['default'].merge;
  var INJECTION_FACTORIES_DEPRECATION_MESSAGE = '[ember-cli-flash] Future versions of ember-cli-flash will no longer inject the service automatically. Instead, you should explicitly inject it into your Route, Controller or Component with `Ember.inject.service`.';
  var addonDefaults = {
    timeout: 3000,
    extendedTimeout: 0,
    priority: 100,
    sticky: false,
    showProgress: false,
    type: 'info',
    types: ['success', 'info', 'warning', 'danger', 'alert', 'secondary'],
    injectionFactories: ['route', 'controller', 'view', 'component'],
    preventDuplicates: false
  };

  function initialize() {
    var application = arguments[1] || arguments[0];

    var _ref = _cornerstoneConfigEnvironment['default'] || {};

    var flashMessageDefaults = _ref.flashMessageDefaults;

    var _ref2 = flashMessageDefaults || [];

    var injectionFactories = _ref2.injectionFactories;

    var options = merge(addonDefaults, flashMessageDefaults);
    var shouldShowDeprecation = !(injectionFactories && injectionFactories.length);

    application.register('config:flash-messages', options, { instantiate: false });
    application.inject('service:flash-messages', 'flashMessageDefaults', 'config:flash-messages');

    deprecate(INJECTION_FACTORIES_DEPRECATION_MESSAGE, shouldShowDeprecation, {
      id: 'ember-cli-flash.deprecate-injection-factories',
      until: '2.0.0'
    });

    options.injectionFactories.forEach(function (factory) {
      application.inject(factory, 'flashMessages', 'service:flash-messages');
    });
  }

  exports['default'] = {
    name: 'flash-messages',
    initialize: initialize
  };
});
define('cornerstone/initializers/global/helpers', ['exports'], function (exports) {
  exports.initialize = initialize;
  // import Ember from 'ember';

  function initialize() /* application */{
    // application.inject('route', 'foo', 'service:foo');

  }

  exports['default'] = {
    name: 'global/helpers',
    initialize: initialize
  };
});
define('cornerstone/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('cornerstone/initializers/link-to', ['exports', 'ember', 'cornerstone/mixins/link-to'], function (exports, _ember, _cornerstoneMixinsLinkTo) {
  exports.initialize = initialize;

  function initialize() /* application */{
    _ember['default'].LinkComponent.reopen(_cornerstoneMixinsLinkTo['default']);
  }

  exports['default'] = {
    name: 'link-to',
    initialize: initialize
  };
});
define('cornerstone/initializers/polyfills', ['exports', 'npm:svg4everybody'], function (exports, _npmSvg4everybody) {
  exports.initialize = initialize;

  function initialize() /* application */{
    (0, _npmSvg4everybody['default'])();
  }

  exports['default'] = {
    name: 'polyfills',
    initialize: initialize
  };
});
define('cornerstone/initializers/router', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(application) {
    // application.inject('route', 'foo', 'service:foo');
    application.inject('component', 'router', 'router:main');
  }

  exports['default'] = {
    name: 'router',
    initialize: initialize
  };
});
define('cornerstone/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: _ember['default'].K
  };
});
define('cornerstone/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: _ember['default'].K
  };
});
define('cornerstone/initializers/ui', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(app) {
    app.inject('controller', 'ui', 'service:ui');
    app.inject('component', 'ui', 'service:ui');
    app.inject('route', 'ui', 'service:ui');
  }

  exports['default'] = {
    name: 'ui',
    initialize: initialize
  };
});
define('cornerstone/instance-initializers/app-view', ['exports'], function (exports) {
  exports.initialize = initialize;
  // instance-initializers/app-view.js
  // With an instance initializer, we can register a component for Ember to use at the top level.
  // Not ideal, but it works in the meantime until routable components drop.

  // import Ember from 'ember';

  // const AppView = Ember.Component.extend({

  //   browser: Ember.inject.service(),
  //   ui: Ember.inject.service(),
  //   classNames: ['cs-app'],
  //   classNameBindings: ['browser.browserClass', 'ui.transitioning:cs-transitioning']

  // });

  function initialize() /* appInstance */{
    // appInstance.register('view:toplevel', AppView);
  }

  exports['default'] = {
    name: 'app-view',
    initialize: initialize
  };
});
define("cornerstone/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define('cornerstone/instance-initializers/ember-i18n', ['exports', 'ember-i18n/instance-initializers/ember-i18n'], function (exports, _emberI18nInstanceInitializersEmberI18n) {
  exports['default'] = _emberI18nInstanceInitializersEmberI18n['default'];
});
define('cornerstone/instance-initializers/global', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(appInstance) {
    window.cornerstoneApp = appInstance;

    appInstance.lookup('service:continuity');
  }

  exports['default'] = {
    name: 'global',
    initialize: initialize
  };
});
define('cornerstone/instance-initializers/i18n', ['exports'], function (exports) {
  exports.initialize = initialize;

  function initialize(appInstance) {
    appInstance.inject('route', 'i18n', 'service:i18n');
    appInstance.inject('component', 'i18n', 'service:i18n');
  }

  exports['default'] = {
    name: 'i18n',
    after: ['ember-i18n'],
    initialize: initialize
  };
});
define('cornerstone/lab4/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    textContent: '<span>Hello World</span>'
  });
});
define('cornerstone/lab4/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("cornerstone/lab4/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/lab4/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["iframe-loaders/options"], [], ["loc", [null, [1, 0], [1, 36]]], 0, 0], ["content", "outlet", ["loc", [null, [2, 0], [2, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/mixins/async-batch', ['exports', 'ember', 'npm:uuid'], function (exports, _ember, _npmUuid) {
  exports['default'] = _ember['default'].Mixin.create({

    asyncBatchQueue: {},
    asyncBatchPending: {},
    asyncBatchTimeout: 10000,
    asyncBatchDefaultQueue: 'default',

    asyncBatchRequest: function asyncBatchRequest(data, queue) {

      queue = 'string' === typeof queue ? queue : this.get('asyncBatchDefaultQueue');

      return new _ember['default'].RSVP.Promise((function (resolve, reject) {

        if (_ember['default'].isNone(this.get('asyncBatchQueue.' + queue))) {
          this.set('asyncBatchQueue.' + queue, _ember['default'].A());
        }

        this.get('asyncBatchQueue.' + queue).push({
          jobID: _npmUuid['default'].v4(),
          data: data,
          resolve: resolve,
          reject: reject
        });

        _ember['default'].run.debounce(this, this.flushRequests, 10);
      }).bind(this));
    },

    flushRequests: function flushRequests() {
      var _this = this;

      Object.keys(this.get('asyncBatchQueue')).map(function (queue) {
        var batch = _this.get('asyncBatchQueue.' + queue).map(function (_ref) {
          var data = _ref.data;
          var jobID = _ref.jobID;
          var resolve = _ref.resolve;
          var reject = _ref.reject;

          var timer = _ember['default'].run.later(_this, function () {
            _this.set('asyncBatchPending.' + jobID, null);
            reject({
              jobID: jobID,
              error: true,
              message: 'Render request timeout for job ' + jobID
            });
          }, _this.get('asyncBatchTimeout'));

          _this.set('asyncBatchPending.' + jobID, function (response) {
            _ember['default'].run.cancel(timer);
            resolve(response);
            _this.set('asyncBatchPending.' + jobID, null);
          });

          return { jobID: jobID, data: data, resolve: resolve };
        });

        _this.get('asyncBatchQueue.' + queue).clear();

        _this.asyncBatchProcess(batch, queue).then(function (completedJobs) {
          completedJobs.forEach(function (job) {
            var cb = _this.get('asyncBatchPending.' + job.jobID);
            if ('function' === typeof cb) {
              cb.call(_this, job.response);
            }
          });
        });
      });
    },

    // Override in implementing class. Should return a promise that resolves
    // a new batch array where each object has a response key
    asyncBatchProcess: function asyncBatchProcess(batch /*, queue*/) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve) {
        _ember['default'].run.later(_this2, function () {
          resolve(batch.map(function (job) {
            job.response = job;
            return job;
          }));
        }, 500);
      });
    }

  });
});
define('cornerstone/mixins/controls/placeholder', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    placeholder: _ember['default'].computed('control.options', function () {
      var placeholder = this.get('control.options.placeholder');
      return placeholder ? placeholder : '';
    })
  });
});
define('cornerstone/mixins/debug/component', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({});
});
define('cornerstone/mixins/fadeable', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    showing: true,
    complete: false,
    incomplete: _ember['default'].computed('complete', function () {
      return !this.get('complete');
    }),

    completeChanged: _ember['default'].observer('complete', function () {
      this.debounceFade = _ember['default'].run.debounce(this, this.updateFade, 1000);
    }),

    willDestroyElement: function willDestroyElement() {
      _ember['default'].run.cancel(this.debounceFade);
    },

    updateFade: function updateFade() {
      this.set('showing', !this.get('complete'));
      this.get('onComplete')();
    }

  });
});
define('cornerstone/mixins/forms/assign-default', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    assignDefaultMulti: false,
    assignDefaultMultiDelimeter: ' ',
    assignDefaultOptionsPath: 'options',
    assignDefaultValuePath: 'value',
    assignDefaultLocator: null,

    actions: {
      assignDefaultOption: function assignDefaultOption() {
        var _this = this;

        if (this.isDestroyed) {
          return;
        }

        var current = this.get('value');
        if (this.get('assignDefaultMulti')) {
          current = current.split(this.get('assignDefaultMultiDelimeter'));
        }

        if (_ember['default'].isNone(current) || !_ember['default'].isPresent(this.get(this.get('assignDefaultOptionsPath')).find(function (item) {
          if (_ember['default'].isArray(current)) {
            // console.log('default', current, current.includes(item.value) || current.includes(item) ? item : false );
            return current.includes(item.value) || current.includes(item);
          }
          return current === item.value || current === item;
        }))) {
          this.set('value', (function () {

            var customLocator = _this.get('assignDefaultLocator');
            if (!_ember['default'].isNone(customLocator)) {
              var locatedValue = _this.get(_this.get('assignDefaultOptionsPath')).find(function (item) {
                return customLocator(current, item);
              });
              if (!_ember['default'].isNone(locatedValue)) {
                return locatedValue.value ? locatedValue.value : locatedValue;
              }
            }

            var customPath = _this.get('assignDefaultSourcePath');
            if (!_ember['default'].isNone(customPath)) {
              return _this.get(customPath);
            }

            var basePath = _this.get('assignDefaultOptionsPath') + '.firstObject';
            return _this.getWithDefault(basePath + '.' + _this.get('assignDefaultValuePath'), _this.get(basePath));
          })());
        }
      }
    }

  });
});
define('cornerstone/mixins/forms/visibility-observation', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    didInsertElement: function didInsertElement() {
      if (_ember['default'].isPresent('visibilityObservation')) {
        this.visibilityCheck();
      }
    },

    observeVisibility: _ember['default'].observer('visibilityObservation', function () {
      this.visibilityCheck();
    }),

    observeVisibilityShouldUpdate: function observeVisibilityShouldUpdate() {
      return false === this.get('visibilityObservation');
    },

    visibilityCheck: function visibilityCheck() {
      _ember['default'].run.scheduleOnce('afterRender', (function () {
        if (this.observeVisibilityShouldUpdate()) {
          this.send('isVisible');
        } else {
          this.send('isNotVisible');
        }
      }).bind(this));
    },

    actions: {
      isVisible: function isVisible() {},
      isNotVisible: function isNotVisible() {}
    }

  });
});
define('cornerstone/mixins/hover-state', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    classNameBindings: ['isHovering:cs-hover'],
    isHovering: false,

    mouseEnter: function mouseEnter() {
      this.set('isHovering', true);
    },

    mouseLeave: function mouseLeave() {
      this.set('isHovering', false);
    }

  });
});
define('cornerstone/mixins/keyboard-shortcuts/base', ['exports', 'ember', 'mousetrap'], function (exports, _ember, _mousetrap) {
  var _slice = Array.prototype.slice;

  exports['default'] = function (bindEvent, unbindEvent) {

    return _ember['default'].Mixin.create({

      shouldBindKeyboardShortcuts: true,

      bindShortcuts: _ember['default'].on(bindEvent, function () {
        var _this = this;

        // Get this component/route's bindings
        var shortcuts = this.get('keyboardShortcuts');

        if ('object' !== _ember['default'].typeOf(shortcuts) || !this.get('shouldBindKeyboardShortcuts')) {
          return;
        }

        var keybindings = [];

        // Expand shortcuts to use configured Mousetrap bindings and
        Object.keys(shortcuts).forEach(function (key) {

          if (!window.csAppData.keybindings[key]) {
            return;
          }

          var binding = shortcuts[key];

          // Expand shorthand into an object with default properties
          if ('string' === typeof binding) {
            binding = {
              action: binding,
              preventDefault: true
            };
          }

          binding.key = window.csAppData.keybindings[key];

          // Expand inline keystroke modifiers to alter the eventType
          ['keypress', 'keyup', 'keydown'].forEach(function (type) {
            if (0 === binding.key.indexOf(type + ':')) {
              binding.eventType = type;
              binding.key = binding.key.replace(type + ':', '');
            }
          });

          keybindings.push(binding);
        });

        this.mousetraps = keybindings.map(function (binding) {

          var mousetrapTarget = document.body;
          var actionType = _ember['default'].typeOf(binding.action);

          if (false === binding.global) {
            mousetrapTarget = document;
          }

          if (binding.scoped) {
            if ('string' === _ember['default'].typeOf(binding.scoped)) {
              mousetrapTarget = document.querySelector(binding.scoped);
            } else {
              mousetrapTarget = _this.get('element');
            }
          }

          if (binding.targetElement) {
            mousetrapTarget = binding.targetElement;
          }

          var mousetrap = new _mousetrap['default'](mousetrapTarget);

          if ('string' === actionType) {
            mousetrap.bind(binding.key, (function () {
              this.send.apply(this, [binding.action].concat(_slice.call(arguments)));
              return binding.preventDefault !== true;
            }).bind(_this), binding.eventType);
          } else if ('function' === actionType) {
            mousetrap.bind(binding.shortcut, binding.action.bind(_this), binding.eventType);
          } else {
            console.warn('Invalid keybinding action', binding);
          }

          return mousetrap;
        });
      }),

      unbindShortcuts: _ember['default'].on(unbindEvent, function () {
        this.mousetraps.forEach(function (mousetrap) {
          return mousetrap.reset();
        });
      })

    });
  };
});
// https://github.com/Skalar/ember-keyboard-shortcuts
define('cornerstone/mixins/keyboard-shortcuts/component', ['exports', 'cornerstone/mixins/keyboard-shortcuts/base'], function (exports, _cornerstoneMixinsKeyboardShortcutsBase) {
  exports['default'] = (0, _cornerstoneMixinsKeyboardShortcutsBase['default'])('didInsertElement', 'willDestroyElement');
});
define('cornerstone/mixins/keyboard-shortcuts/route', ['exports', 'cornerstone/mixins/keyboard-shortcuts/base'], function (exports, _cornerstoneMixinsKeyboardShortcutsBase) {
  exports['default'] = (0, _cornerstoneMixinsKeyboardShortcutsBase['default'])('activate', 'deactivate');
});
define('cornerstone/mixins/link-to', ['exports', 'ember'], function (exports, _ember) {

  //https://github.com/Kuzirashi/ember-link-action/blob/master/addon/mixins/link-action.js

  exports['default'] = _ember['default'].Mixin.create({

    activeClass: 'cs-active',

    _sendInvokeAction: function _sendInvokeAction() {
      this.sendAction('invokeAction');
    },

    init: function init() {
      this._super.apply(this, arguments);

      // Map desired event name to invoke function
      var eventName = this.get('eventName');

      if (this.get('invokeAction')) {
        this.on(eventName, this, this._sendInvokeAction);
      }
    },

    willDestroyElement: function willDestroyElement() {
      if (this.get('invokeAction')) {
        this.off(this.get('eventName'), this, this._sendInvokeAction);
      }
    }

  });
});
define('cornerstone/mixins/listen-to', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    listenToEvented: this,
    _listenToRegistrations: {},

    componentListenTo: function componentListenTo(signal, callback, eventd) {
      this.listenTo(signal, (function () {
        if (this.isDestroyed) {
          return;
        }
        callback.apply(this, arguments); // Using bind is needed to grab arguments
      }).bind(this), eventd);
    },

    listenTo: function listenTo(signal, callback, eventd) {

      if (!eventd) {
        eventd = this.get('listenToEvented');
        if ('string' === typeof eventd) {
          eventd = this.get(eventd);
        }
      }

      if ('function' !== typeof eventd.on || 'string' !== typeof signal) {
        return;
      }

      var registration = { cb: callback, e: eventd };
      eventd.on(signal, this, registration.cb);
      this.set('_listenToRegistrations.' + signal, registration);
    },

    willDestroy: function willDestroy() {
      var registrations = this.get('_listenToRegistrations');
      for (var key in registrations) {
        if (registrations.hasOwnProperty(key)) {
          registrations[key].e.off(key, this, registrations[key].cb);
        }
      }
    }

  });
});
define('cornerstone/mixins/options/model-condition', ['exports', 'ember', 'cornerstone/util/control-conditions'], function (exports, _ember, _cornerstoneUtilControlConditions) {
  exports['default'] = _ember['default'].Mixin.create({

    optionService: _ember['default'].inject.service('options'),
    virtualValues: _ember['default'].computed.alias('optionService.virtualValues'),

    conditionIndex: {},
    conditionStates: false,

    conditionsLoad: function conditionsLoad() {

      // Ensure conditionIndex is generated
      if (false === this.get('conditionStates')) {
        this.set('conditionStates', {});
        this.notifyPropertyChange('conditions');
      }
    },

    conditionsHaveUpdated: _ember['default'].observer('conditions', function () {
      var _this = this;

      this.conditionsClearObservers();
      var conditionIndex = {};
      this.set('conditionStates', {});
      var conditions = this.get('conditions');
      if (_ember['default'].isArray(conditions)) {

        conditions.forEach(function (unnormalized) {

          var condition = (0, _cornerstoneUtilControlConditions.normalizeControlCondition)(unnormalized);

          if (!condition.key || _ember['default'].isNone(condition.value) || !condition.op) {
            return;
          }

          var virtual = false;

          if (0 === condition.key.indexOf('virtual:')) {
            virtual = true;
            condition.key = _ember['default'].String.camelize(condition.key.replace('virtual:', ''));
          }

          var index = {
            listener: _this,
            listenerKey: 'conditionStates',
            condition: condition,
            target: virtual ? _this : _this.store.peekRecord('options/value', condition.key),
            targetKey: virtual ? 'virtualValues.' + condition.key : 'value',
            callback: function callback() {
              this.listener.set(this.listenerKey + '.' + this.condition.key, (0, _cornerstoneUtilControlConditions.controlConditionChecker)(this.condition.value, _ember['default'].get(this.target, this.targetKey), this.condition.op));
              this.listener.notifyPropertyChange(this.listenerKey);
            }
          };

          conditionIndex[condition.key] = index;
          index.callback.call(index);
          _ember['default'].addObserver(index.target, index.targetKey, index, index.callback);
        });
      }

      this.set('conditionIndex', conditionIndex);
    }),

    visibilityConditionsMet: _ember['default'].computed('conditionStates', function () {

      var condition = true;
      var states = this.get('conditionStates');

      for (var key in states) {
        condition = condition && states[key];
      }

      return condition;
    }),

    conditionsClearObservers: function conditionsClearObservers() {
      var conditionIndex = this.get('conditionIndex') || {};

      for (var key in conditionIndex) {
        var index = conditionIndex[key];
        _ember['default'].removeObserver(index.target, index.targetKey, index, index.callback);
      }
    }

  });
});
define('cornerstone/mixins/preview-listener', ['exports', 'ember', 'cornerstone/mixins/listen-to'], function (exports, _ember, _cornerstoneMixinsListenTo) {
  exports['default'] = _ember['default'].Mixin.create(_cornerstoneMixinsListenTo['default'], {
    listenToEvented: 'xfr',
    xfr: _ember['default'].inject.service()
  });
});
define('cornerstone/mixins/route-authorization', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({
    acl: [],
    permissionCheck: function permissionCheck() {

      var currentUser = this.get('currentUser');

      var allowed = this.get('acl').reduce(function (prev, current) {
        return prev && currentUser.get(current);
      }, true);

      if (!allowed) {
        this.transitionTo('unauthorized');
      }
    }
  });
});
define('cornerstone/objects/dynamic-property', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Object.extend({

    source: null,
    subpath: null,

    dynamicProperty: _ember['default'].computed('source', 'subpath', function () {
      var subpath = this.get('subpath');

      if (subpath) {
        var DynamicClass = _ember['default'].Object.extend({
          value: _ember['default'].computed.alias('source.' + subpath)
        });

        return DynamicClass.create({ source: this.get('source') });
      } else {
        return _ember['default'].Object.create({});
      }
    }),

    value: _ember['default'].computed.alias('dynamicProperty.value')

  });
});
// https://gist.github.com/schickm/08ec48667a4d43e59d91
define('cornerstone/objects/search', ['exports', 'ember', 'npm:fuse.js'], function (exports, _ember, _npmFuseJs) {
  exports['default'] = _ember['default'].Object.extend({
    query: '',
    isSearching: false,
    fuseOptions: {},
    results: [],

    queryChanged: _ember['default'].observer('query', function () {
      this.debounce = _ember['default'].run.debounce(this, 'updateQuery', 250);
    }),

    updateQuery: function updateQuery() {
      var _this = this;

      var q = this.get('query');
      var hasQuery = !!q;

      if (hasQuery !== this.get('isSearching')) {
        this.set('isSearching', hasQuery);
      }

      var fuse = this.get('fuse');

      if (hasQuery && fuse) {
        (function () {
          var results = fuse.search(q);
          _ember['default'].run.scheduleOnce('afterRender', _this, function () {
            _this.set('results', results);
          });
        })();
      } else {
        this.set('results', []);
      }
    },

    setup: function setup(options, index) {
      if (index) {
        this.updateIndex(index);
      }
      this.setOptions(options);
    },

    setOptions: function setOptions(options) {
      var defaults = {};
      this.set('fuseOptions', _ember['default'].merge(defaults, options || {}));
    },

    updateIndex: function updateIndex(index) {
      this.set('fuse', new _npmFuseJs['default'](index, this.get('fuseOptions')));
    }

  });
});
define('cornerstone/option/adapter', ['exports', 'cornerstone/adapters/cs-adapter'], function (exports, _cornerstoneAdaptersCsAdapter) {
  exports['default'] = _cornerstoneAdaptersCsAdapter['default'].extend({});
});
// import Ember from 'ember';
define('cornerstone/option/model', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({
    value: (0, _emberDataAttr['default'])()
  });
});
// import Ember from 'ember';
define('cornerstone/options/control/adapter', ['exports', 'cornerstone/adapters/cs-longevity-adapter'], function (exports, _cornerstoneAdaptersCsLongevityAdapter) {
  exports['default'] = _cornerstoneAdaptersCsLongevityAdapter['default'].extend({});
});
// import Ember from 'ember';
define('cornerstone/options/control/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr', 'cornerstone/mixins/options/model-condition', 'ember-data/relationships'], function (exports, _ember, _emberDataModel, _emberDataAttr, _cornerstoneMixinsOptionsModelCondition, _emberDataRelationships) {
  exports['default'] = _emberDataModel['default'].extend(_cornerstoneMixinsOptionsModelCondition['default'], {

    service: _ember['default'].inject.service('controls'),

    title: (0, _emberDataAttr['default'])(),
    label: _ember['default'].computed.alias('title'),
    type: (0, _emberDataAttr['default'])(),
    options: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return {};
      } }),
    conditions: (0, _emberDataAttr['default'])(),
    section: (0, _emberDataRelationships.belongsTo)('options/section'),
    values: (0, _emberDataRelationships.hasMany)('options/value', { inverse: null }),

    keyValue: _ember['default'].computed.alias('values.firstObject.value'),

    loadedAt: _ember['default'].on('didLoad', function () {
      this.set('loadedAt', new Date());
      this.conditionsLoad();
    }),

    searchable: _ember['default'].computed('section', function () {

      var index = { title: this.get('title') };
      var parent = this.get('section');

      if ('root' !== parent.get('id')) {
        index.parent = parent.get('title');

        var grandparent = parent.get('parent');
        if (grandparent && 'root' !== grandparent.get('id')) {
          index.grandparent = grandparent.get('title');
        }
      }

      return index;
    }),

    isHidden: _ember['default'].computed.not('visibilityConditionsMet'),

    choices: _ember['default'].computed('options.choices.[]', 'filteredChoices', function () {

      var filtered = this.get('filteredChoices');

      if (filtered) {
        return filtered;
      }

      return this.get('options.choices');
    }),

    init: function init() {
      this._super.apply(this, arguments);
      this.setupReferences();
      this.setupControlFilter();
    },

    setupReferences: function setupReferences() {
      var _this = this;

      this.getWithDefault('options.references', []).forEach(function (ref) {

        var key = _ember['default'].String.camelize('key-' + ref.key);
        var source = _this.store.peekRecord('options/value', ref.source);
        var other = _this;
        _this.set(key, source.get('value'));

        _ember['default'].addObserver(source, 'value', function () {
          other.set(key, this.get('value'));
        });
      });
    },

    updateControlFiltering: _ember['default'].observer('options.filter', function () {
      this.setupControlFilter();
    }),

    setupControlFilter: function setupControlFilter(params) {

      params = params || {};

      if (this.controlFilter) {
        _ember['default'].removeObserver(this.controlFilter.source, 'value', this, 'updateFilterCb');
      }

      if (params.teardown) {
        return;
      }

      var filter = this.get('options.filter');

      if (filter && filter.source && this.validateFilter(filter.key)) {

        var source = this.store.peekRecord('options/value', filter.source);

        if (source) {

          this.controlFilter = {
            source: source,
            key: filter.key,
            method: filter.method
          };

          _ember['default'].addObserver(this.controlFilter.source, 'value', this, 'updateFilterCb');
          this.updateFilterCb();
        }
      }
    },

    updateFilterCb: function updateFilterCb() {
      this.set(_ember['default'].String.camelize('filtered-' + this.controlFilter.key), this.get('service').controlFilter(this.controlFilter.method, this.controlFilter.source.get('value')));
    },

    validateFilter: function validateFilter(check) {
      return ['choices'].includes(check);
    },

    willDestroy: function willDestroy() {
      this._super.apply(this, arguments);
      this.conditionsClearObservers();
      this.setupControlFilter({ teardown: true });
    }

  });
});
define('cornerstone/options/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({

    service: _ember['default'].inject.service('options'),
    config: _ember['default'].inject.service(),
    queryParams: ['url'],
    url: null,

    previewURL: _ember['default'].computed('url', function () {
      var url = this.get('url');
      if (url) {
        return url;
      }
      return this.get('ui.defaultPreviewUrl');
    }),

    observePreviewUrl: _ember['default'].observer('previewURL', function () {
      this.set('ui.viewSiteURL', this.get('previewURL'));
    }),

    previewState: _ember['default'].computed.alias('service.optionsPreviewState'),

    actions: {
      runCustomJs: function runCustomJs() {
        this.get('ui').notify('Updating preview.');
        this.incrementProperty('previewState.inc');
      }
    }

  });
});
define('cornerstone/options/index/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    config: _ember['default'].inject.service(),
    i18n: _ember['default'].inject.service(),

    isSearching: _ember['default'].computed.alias('searchData.isSearching'),
    searchResults: _ember['default'].computed('searchData.results', function () {

      var results = this.get('searchData.results');

      var filtered = this.model.controls.filter(function (item) {
        return results.includes(item.get('id')) && !item.get('isHidden') && item.get('section.isSearchable');
      });

      filtered.sort(function (a, b) {
        return results.indexOf(a.get('id')) > results.indexOf(b.get('id'));
      });

      return filtered;
    }),

    init: function init() {
      this._super.apply(this, arguments);
      this.set('searchData', this.get('ui.search').getTarget('options'));
    }

  });
});
define('cornerstone/options/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      controller.set('title', this.get('i18n').t('common.title.options-' + model.config.title));
    }

  });
});
define("cornerstone/options/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "cornerstone/options/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("h2");
          dom.setAttribute(el1, "class", "cs-workspace-title");
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-workspace-search");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createComment("");
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [1]), 0, 0);
          morphs[1] = dom.createMorphAt(dom.childAt(fragment, [3]), 1, 1);
          return morphs;
        },
        statements: [["content", "title", ["loc", [null, [2, 33], [2, 42]]], 0, 0, 0, 0], ["inline", "common/search-bar", [], ["target", "options", "placeholder", "Search Options", "autoFocus", true], ["loc", [null, [4, 4], [4, 87]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 9,
                  "column": 4
                },
                "end": {
                  "line": 11,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/options/index/template.hbs"
            },
            isEmpty: false,
            arity: 1,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
              return morphs;
            },
            statements: [["inline", "options/option-search-result", [], ["control", ["subexpr", "@mut", [["get", "result", ["loc", [null, [10, 45], [10, 51]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 6], [10, 53]]], 0, 0]],
            locals: ["result"],
            templates: []
          };
        })();
        var child1 = (function () {
          var child0 = (function () {
            return {
              meta: {
                "revision": "Ember@2.8.0",
                "loc": {
                  "source": null,
                  "start": {
                    "line": 12,
                    "column": 6
                  },
                  "end": {
                    "line": 14,
                    "column": 6
                  }
                },
                "moduleName": "cornerstone/options/index/template.hbs"
              },
              isEmpty: false,
              arity: 0,
              cachedFragment: null,
              hasRendered: false,
              buildFragment: function buildFragment(dom) {
                var el0 = dom.createDocumentFragment();
                var el1 = dom.createTextNode("        ");
                dom.appendChild(el0, el1);
                var el1 = dom.createElement("p");
                var el2 = dom.createTextNode("Try refining your search to locate your desired control.");
                dom.appendChild(el1, el2);
                dom.appendChild(el0, el1);
                var el1 = dom.createTextNode("\n");
                dom.appendChild(el0, el1);
                return el0;
              },
              buildRenderNodes: function buildRenderNodes() {
                return [];
              },
              statements: [],
              locals: [],
              templates: []
            };
          })();
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 11,
                  "column": 4
                },
                "end": {
                  "line": 15,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/options/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createComment("");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
              var morphs = new Array(1);
              morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
              dom.insertBoundary(fragment, 0);
              dom.insertBoundary(fragment, null);
              return morphs;
            },
            statements: [["block", "workspace/workspace-message", [], ["title", "No Controls Found"], 0, null, ["loc", [null, [12, 6], [14, 38]]]]],
            locals: [],
            templates: [child0]
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "cornerstone/options/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "each", [["get", "searchResults", ["loc", [null, [9, 12], [9, 25]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [9, 4], [15, 13]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "cornerstone/options/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/workspace-content", [], [], 0, null, ["loc", [null, [8, 2], [16, 34]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    var child2 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 18,
                "column": 2
              },
              "end": {
                "line": 20,
                "column": 2
              }
            },
            "moduleName": "cornerstone/options/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "options/option-section", [], ["section", ["subexpr", "@mut", [["get", "model.activeSection", ["loc", [null, [19, 37], [19, 56]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [19, 4], [19, 58]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 21,
                  "column": 4
                },
                "end": {
                  "line": 23,
                  "column": 4
                }
              },
              "moduleName": "cornerstone/options/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("      ");
              dom.appendChild(el0, el1);
              var el1 = dom.createElement("p");
              var el2 = dom.createTextNode("It looks like something went wrong here. Try refreshing your browser.");
              dom.appendChild(el1, el2);
              dom.appendChild(el0, el1);
              var el1 = dom.createTextNode("\n");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 20,
                "column": 2
              },
              "end": {
                "line": 24,
                "column": 2
              }
            },
            "moduleName": "cornerstone/options/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["block", "workspace/workspace-message", [], ["title", "No Options Available"], 0, null, ["loc", [null, [21, 4], [23, 36]]]]],
          locals: [],
          templates: [child0]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 17,
              "column": 0
            },
            "end": {
              "line": 25,
              "column": 0
            }
          },
          "moduleName": "cornerstone/options/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "model.activeSection", ["loc", [null, [18, 8], [18, 27]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [18, 2], [24, 9]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 0
          }
        },
        "moduleName": "cornerstone/options/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n\n\n\n\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "workspace/workspace-header", [], [], 0, null, ["loc", [null, [1, 0], [6, 31]]]], ["block", "if", [["get", "isSearching", ["loc", [null, [7, 6], [7, 17]]], 0, 0, 0, 0]], [], 1, 2, ["loc", [null, [7, 0], [25, 7]]]]],
      locals: [],
      templates: [child0, child1, child2]
    };
  })());
});
define('cornerstone/options/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], {

    service: _ember['default'].inject.service('options'),
    acl: ['canManageOptions'],

    routeUI: {
      bar: ['preview-sizer', 'view-site', 'collapse', 'cheatsheet', 'save']
    },

    beforeModel: function beforeModel() {
      this.permissionCheck();
    },

    model: function model() {
      var _this = this;

      var values = this.store.findAll('options/value');
      var self = this;
      var config = this.get('config').fetch('options-manager');

      config.then(function (c) {

        if (c.customCSSKey) {
          _this.set('service.customCSSKey', c.customCSSKey);
        }

        if (c.customJSKey) {
          _this.set('service.customJSKey', c.customJSKey);
        }
      });

      var customCSS = new _ember['default'].RSVP.Promise(function (resolve /* , reject */) {
        values.then(function () {
          if (config.then && 'function' === typeof config.then) {
            config.then(cb);
          } else {
            cb(config);
          }
          function cb(c) {
            resolve(c.customCSSKey ? self.store.peekRecord('options/value', c.customCSSKey) : false);
          }
        });
      });

      var customJS = new _ember['default'].RSVP.Promise(function (resolve /*, reject */) {
        values.then(function () {
          if (config.then && 'function' === typeof config.then) {
            config.then(cb);
          } else {
            cb(config);
          }
          function cb(c) {
            resolve(c.customJSKey ? self.store.peekRecord('options/value', c.customJSKey) : false);
          }
        });
      });

      return _ember['default'].RSVP.hash({
        config: config,
        values: values,
        controls: this.store.findAll('options/control'),
        activeSection: this.store.findRecord('options/section', 'root'),
        customCSS: customCSS,
        customJS: customJS,
        headerAssignments: this.store.findRecord('option', 'cornerstone_header_assignments'),
        footerAssignments: this.store.findRecord('option', 'cornerstone_footer_assignments')
      });
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      this.get('ui').setRouteUI(this);
      this.set('service.virtualValues.classicHeaders', !model.headerAssignments.getWithDefault('value', {}).hasOwnProperty('global'));
      this.set('service.virtualValues.classicFooters', !model.footerAssignments.getWithDefault('value', {}).hasOwnProperty('global'));
      this.set('ui.viewSiteURL', controller.get('previewURL'));
    },

    afterModel: function afterModel(model) {

      var search = this.get('ui.search').getTarget('options');

      search.setOptions({
        id: 'id',
        threshold: 0.15,
        distance: 100,
        tokenize: true,
        keys: [{ name: 'title', weight: 0.1 }, { name: 'parent', weight: 0.3 }, { name: 'grandparent', weight: 0.5 }]
      });

      search.updateIndex(model.controls.map(function (control) {
        return _ember['default'].merge({ id: control.get('id') }, control.get('searchable'));
      }));

      this.set('ui.unsavedData', false);
    },

    renderTemplate: function renderTemplate() {

      this.render('partials/bar/options', {
        outlet: 'bar',
        into: 'application',
        model: this.modelFor(this.routeName)
      });

      this.render('partials/global/options', {
        outlet: 'global',
        into: 'application',
        model: this.modelFor(this.routeName)
      });

      this._super(this, arguments); // use default template rendering
    },

    actions: {

      save: function save() {
        var _this2 = this;

        var ui = this.get('ui');
        ui.beginSaveProgress();

        this.get('service').save().then(function (data) {
          console.log('Options saved.', data);
          ui.endSaveProgress();
          ui.notify('Options saved!', 'success');
          _this2.set('ui.unsavedData', false);
          _this2.controllerFor(_this2.routeName).set('lastSave', new Date());
        })['catch'](function (reason) {
          console.warn('Options failed to save', reason);
          ui.endSaveProgress();
          ui.notify('Options failed to save', 'error');
        });
      },

      navigatePreview: function navigatePreview(params) {

        if (!params.url) {
          return;
        }

        var home = this.get('config.global.home_url');

        // TODO: Output notice if user tries to visit external link

        function trailingslashit(url) {
          if ('string' !== typeof url) {
            return url;
          }
          return url + ('/' === url.charAt(url.length - 1) ? '' : '/');
        }

        var transition = trailingslashit(params.url) === trailingslashit(home) ? null : params.url;

        this.transitionTo({ queryParams: { url: transition } });
      },

      willTransition: function willTransition(transition) {
        var _this3 = this;

        if (this.get('ui.unsavedData') && !transition.targetName.includes('options')) {

          transition.abort();

          this.get('ui').confirm({
            noSkip: true,
            message: this.get('i18n').t('app.unsaved-warning'),
            accept: function accept() {
              _this3.set('ui.unsavedData', false);
              transition.retry();
            },
            acceptClass: 'sad'
          });
        }
      }
    }

  });
});
define('cornerstone/options/section/adapter', ['exports', 'cornerstone/adapters/cs-longevity-adapter'], function (exports, _cornerstoneAdaptersCsLongevityAdapter) {
  exports['default'] = _cornerstoneAdaptersCsLongevityAdapter['default'].extend({});
});
// import Ember from 'ember';
define('cornerstone/options/section/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr', 'cornerstone/mixins/options/model-condition', 'ember-data/relationships'], function (exports, _ember, _emberDataModel, _emberDataAttr, _cornerstoneMixinsOptionsModelCondition, _emberDataRelationships) {
  exports['default'] = _emberDataModel['default'].extend(_cornerstoneMixinsOptionsModelCondition['default'], {
    title: (0, _emberDataAttr['default'])(),
    description: (0, _emberDataAttr['default'])(),
    order: (0, _emberDataAttr['default'])('number'),
    panel: (0, _emberDataAttr['default'])('boolean'),
    conditions: (0, _emberDataAttr['default'])(),
    children: (0, _emberDataRelationships.hasMany)('options/section', { inverse: 'parent' }),
    parent: (0, _emberDataRelationships.belongsTo)('options/section', { inverse: 'children' }),
    controls: (0, _emberDataRelationships.hasMany)('options/control'),

    loadedAt: _ember['default'].on('didLoad', function () {
      this.set('loadedAt', new Date());
      this.conditionsLoad();
    }),

    ancestry: _ember['default'].computed('parent', function () {

      var ancestry = [];
      var parent = this.get('parent');

      while (parent && 'root' !== parent.get('id')) {

        ancestry.push({
          route: 'options.section',
          id: parent.get('id'),
          label: parent.get('title')
        });

        parent = parent.get('parent');
      }

      return ancestry;
    }),

    isHidden: _ember['default'].computed('visibilityConditionsMet', 'noVisibleControls', 'noVisibleSections', function () {
      if (['x-header', 'x-footer'].includes(this.get('id'))) {
        return false;
      }
      return !this.get('visibilityConditionsMet') || this.get('noVisibleControls') && this.get('noVisibleSections');
    }),

    isSearchable: _ember['default'].computed('visibilityConditionsMet', 'parent.visibilityConditionsMet', function () {
      return this.get('visibilityConditionsMet') && this.get('parent.visibilityConditionsMet');
    }),

    noVisibleControls: _ember['default'].computed('controls.@each.isHidden', function () {
      return this.get('controls').every(function (control) {
        return control.get('isHidden');
      });
    }),

    noVisibleSections: _ember['default'].computed('children.@each.isHidden', function () {
      return this.get('children').every(function (child) {
        return child.get('isHidden');
      });
    }),

    willDestroy: function willDestroy() {
      this._super();
      this.conditionsClearObservers();
    }

  });
});
define('cornerstone/options/section/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model(params) {
      return _ember['default'].RSVP.hash({
        activeSection: this.store.findRecord('options/section', params.section_id)
      });
    },

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      controller.set('openTo', this.get('ui').oneTimeValue('options/search-goto-sub-heading'));
    }
  });
});
define("cornerstone/options/section/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 1,
            "column": 68
          }
        },
        "moduleName": "cornerstone/options/section/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "options/option-section", [], ["section", ["subexpr", "@mut", [["get", "model.activeSection", ["loc", [null, [1, 33], [1, 52]]], 0, 0, 0, 0]], [], [], 0, 0], "openTo", ["subexpr", "@mut", [["get", "openTo", ["loc", [null, [1, 60], [1, 66]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [1, 0], [1, 68]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/options/service', ['exports', 'ember'], function (exports, _ember) {

  // NOTE: This pub/sub method of model change tracking risks getting out of sync
  // if the store is pushed to

  exports['default'] = _ember['default'].Service.extend({

    virtualValues: {},

    ui: _ember['default'].inject.service(),
    csAjax: _ember['default'].inject.service(),

    optionsPreviewState: {
      route: 'options',
      inc: 0
    },

    radio: _ember['default'].inject.service('global/radio'),

    listen: _ember['default'].on('init', function () {
      this.get('radio').on('option.value.changed', this, 'updateState');
    }),

    updateState: function updateState() {
      var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

      var state = this.get('optionsPreviewState');

      if (!state.updates) {
        state.updates = {};
      }

      if (params.id) {
        state.updates[params.id] = params.value;

        // Removing this. Dirty doesn't actually correspond to
        // what's saved because we're using a custom save instead of the models
        // so this ends up messing up the state. It would be nice to only send
        // changed values, but we'll need to track that somehow first.

        // if ( params.dirty ) {
        //   state.updates[params.id] = params.value;
        // } else {
        //   delete state.updates[params.id];
        // }
      }

      this.set('ui.unsavedData', true);
      this.set('optionsPreviewState', state);

      if ([this.get('customCSSKey'), this.get('customJSKey')].includes(params.id)) {
        return;
      }

      this.incrementProperty('optionsPreviewState.inc');
    },

    save: function save() {
      return this.get('csAjax').request('options::save', this.get('optionsPreviewState'));
    },

    cleanup: _ember['default'].on('willDestroy', function () {
      this.get('radio').off('option.value.changed', this, 'updateState');
    }),

    customCSSKey: 'x_custom_styles',
    customJSKey: 'x_custom_scripts'

  });
});
define("cornerstone/options/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "cornerstone/options/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["content", "outlet", ["loc", [null, [3, 4], [3, 14]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 15,
                "column": 2
              }
            },
            "moduleName": "cornerstone/options/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "common/preview-frame", [], ["src", ["subexpr", "@mut", [["get", "previewURL", ["loc", [null, [7, 10], [7, 20]]], 0, 0, 0, 0]], [], [], 0, 0], "state", ["subexpr", "@mut", [["get", "previewState", ["loc", [null, [8, 12], [8, 24]]], 0, 0, 0, 0]], [], [], 0, 0], "navigate", ["subexpr", "route-action", ["navigatePreview"], [], ["loc", [null, [9, 15], [9, 47]]], 0, 0], "preloader", "options", "package", ["subexpr", "hash", [], ["customCSS", ["get", "model.customCSS.value", ["loc", [null, [12, 18], [12, 39]]], 0, 0, 0, 0]], ["loc", [null, [11, 14], [13, 7]]], 0, 0]], ["loc", [null, [6, 4], [14, 6]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 16,
              "column": 0
            }
          },
          "moduleName": "cornerstone/options/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/cs-workspace", [], [], 0, null, ["loc", [null, [2, 2], [4, 29]]]], ["block", "global/cs-canvas", [], [], 1, null, ["loc", [null, [5, 2], [15, 23]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 17,
            "column": 0
          }
        },
        "moduleName": "cornerstone/options/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "options"], 0, null, ["loc", [null, [1, 0], [16, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/options/value/model', ['exports', 'ember', 'ember-data/model', 'ember-data/attr'], function (exports, _ember, _emberDataModel, _emberDataAttr) {
  exports['default'] = _emberDataModel['default'].extend({

    'default': (0, _emberDataAttr['default'])(),
    value: (0, _emberDataAttr['default'])(),

    radio: _ember['default'].inject.service('global/radio'),

    modifiedObserver: _ember['default'].observer('value', function () {

      this.get('radio').trigger('option.value.changed', {
        id: this.get('id'),
        dirty: this.get('hasDirtyAttributes'),
        value: this.get('value'),
        model: this
      });
    })

  });
});
define('cornerstone/preview/bar-modules/service', ['exports', 'ember', 'cornerstone/mixins/async-batch', 'npm:htmlhint'], function (exports, _ember, _cornerstoneMixinsAsyncBatch, _npmHtmlhint) {
  var HTMLHint = _npmHtmlhint['default'].HTMLHint;

  function stripScripts(string) {

    var html = _ember['default'].$.parseHTML(string);

    var buffer = '';

    html.forEach(function (node) {
      if (!_ember['default'].isNone(node.nodeValue)) {
        buffer += html[0].nodeValue;
      }
      if (!_ember['default'].isNone(node.outerHTML)) {
        buffer += html[0].outerHTML;
      }
    });

    return buffer;
  }

  exports['default'] = _ember['default'].Service.extend(_cornerstoneMixinsAsyncBatch['default'], {
    htmlhintConfig: { 'tagname-lowercase': false, 'attr-lowercase': false, 'attr-value-double-quotes': false, 'doctype-first': false, 'tag-pair': true, 'spec-char-escape': true, 'id-unique': false, 'src-not-empty': false, 'attr-no-duplication': false, 'title-require': false },
    csAjax: _ember['default'].inject.service(),
    cache: _ember['default'].Object.create(),
    preview: _ember['default'].inject.service(),
    scriptExtractions: _ember['default'].Object.create(),
    styleExtractions: _ember['default'].Object.create(),
    scriptLoaderQueue: {},

    updateMarkup: function updateMarkup(model) {
      var _this = this;

      if (!model) {
        return;
      }

      var serialized = model.getCleanAtts();

      this.asyncBatchRequest({
        action: 'markup',
        model: serialized
      }).then(function (response) {

        _this.get('preview').removePreloader(true);

        var errors = HTMLHint.verify(stripScripts(response.template), _this.get('htmlhintConfig'));
        // console.log('RENDER', response);
        if (_ember['default'].isEmpty(errors)) {

          // let scriptLoaders = response.extractions.scripts.map( handle => this.requireScript( handle ) );
          // let styleLoaders = response.extractions.styles.map( handle => this.requireStyle( handle ) );
          // Ember.RSVP.allSettled( scriptLoaders.concat( styleLoaders ) ).then( () => {
          _this.set('cache.markup-' + serialized._id, response.template);
          // });
        } else {
            _this.get('preview').message('status-indicator', { show: true, mode: 'error' });
            console.log('Ignoring invalid markup for ' + serialized._type + ':' + serialized._id, errors, response);
          }

        _ember['default'].run.next(function () {
          _ember['default'].run.scheduleOnce('afterRender', function () {
            _this.afterRender();
          });
        });
      });
    },

    asyncBatchProcess: function asyncBatchProcess(batch, queue) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve) {

        _this2.get('preview').message('status-indicator', {
          show: true,
          mode: 'loading'
        });

        _this2.get('csAjax').request('render::bar_module', {
          batch: batch,
          queue: queue
        }).then(function (response) {

          var promises = [];
          for (var handle in response.extractions.scripts) {
            if (response.extractions.scripts.hasOwnProperty(handle)) {
              promises.push(_this2.requireScript(handle, response.extractions.scripts[handle]));
            }
          }

          for (var handle in response.extractions.styles) {
            if (response.extractions.styles.hasOwnProperty(handle)) {
              promises.push(_this2.requireStyle(handle, response.extractions.styles[handle]));
            }
          }

          _ember['default'].RSVP.allSettled(promises).then(function () {
            resolve(response.batch);
          });

          _this2.get('preview').message('status-indicator', { show: false, mode: 'loading' });
        });
      });
    },

    afterRender: function afterRender() {

      if (this.get('preview.shouldScrollToBottom')) {
        // console.log('AFTER3');
        this.get('preview').scrollToBottom();
      }
    },

    requireStyle: function requireStyle(handle, style) {
      return new _ember['default'].RSVP.Promise(function (resolve) {
        console.warn('Requested style (' + handle + ') not loaded.', style);
        resolve();
        // let script = this.get(`styleExtractions.${handle}`);
        //
        // if ( ! script ) {
        //   console.warn(`Requested style (${handle}) does not exist.`);
        //   return resolve();
        // }
      });
    },

    requireScript: function requireScript(handle, script) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve) {

        var $existingScript = _ember['default'].$('script[data-cs-handle="' + handle + '"]');
        if (0 !== $existingScript.length) {
          if ($existingScript.hasAttribute('data-cs-script-loaded')) {
            console.log('Requested runtime script (' + handle + ') already loaded.');
            resolve();
          } else {
            _this3.get('scriptLoaderQueue.' + handle).then(function () {
              resolve();
            });
          }
          return;
        }

        if (script.before) {
          var $before = _ember['default'].$('<script data-cs-script-extra="' + handle + '">' + script.before + '</script>');
          _ember['default'].$('body').append($before);
        }

        var scriptEl = document.createElement('script');
        var $script = _ember['default'].$(scriptEl);
        _ember['default'].$(scriptEl).attr('data-cs-handle', handle);
        _ember['default'].$('body').append(scriptEl);

        var promise = new _ember['default'].RSVP.Promise(function (resolveSource) {

          var timeout = _ember['default'].run.later(function () {
            console.warn('Requested script (' + handle + ') could not be loaded after waiting 10 seconds.');
            return resolveSource();
          }, 10000);

          scriptEl.onload = function () {
            _ember['default'].run.next(function () {
              $script.attr('data-cs-script-loaded', true);
              _ember['default'].run.cancel(timeout);
              console.log('Runtime script loaded: ' + handle);
              resolveSource();
            });
          };
        });

        promise.then(function () {
          return resolve();
        });
        _this3.set('scriptLoaderQueue.' + handle, promise);
        scriptEl.src = script.src;
      });
    }

  });
});
define('cornerstone/preview/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    preview: _ember['default'].inject.service()
  });
});
define('cornerstone/preview/options/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    model: function model() {
      return _ember['default'].RSVP.hash({
        config: this.get('config').fetch('options-manager')
      });
    }
  });
});
define("cornerstone/preview/options/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/preview/options/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0], ["inline", "preview/options/options-preview", [], ["config", ["subexpr", "@mut", [["get", "model.config", ["loc", [null, [2, 41], [2, 53]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 0], [2, 55]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/preview/regions-index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("cornerstone/preview/regions-index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 0
          }
        },
        "moduleName": "cornerstone/preview/regions-index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0], ["content", "preview/link-targeting", ["loc", [null, [2, 0], [2, 26]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/preview/regions/controller', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Controller.extend({
    preview: _ember['default'].inject.service()
  });
});
define('cornerstone/preview/regions/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    preview: _ember['default'].inject.service(),
    colors: _ember['default'].inject.service('templates/colors'),
    beforeModel: function beforeModel() {
      this.set('preview.canRemovePreloader', false);
    },
    model: function model() {
      return _ember['default'].RSVP.hash({
        colors: this.store.findAll('templates/colors/selection'),
        root: this.store.findRecord('element', 'root')
      });
    },
    afterModel: function afterModel(model) {

      var totalBars = model.root.get('children').reduce(function (total, region) {
        total += region.get('children.length');
        return total;
      }, 0);

      if (totalBars <= 0) {
        this.get('preview').removePreloader(true);
      }
    }
  });
});
define("cornerstone/preview/regions/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/preview/regions/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "preview/region-manager", [], ["model", ["subexpr", "@mut", [["get", "model.root", ["loc", [null, [3, 33], [3, 43]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [3, 2], [3, 45]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/preview/regions/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 3, 3, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0], ["block", "if", [["get", "preview.loader.zonesLoaded", ["loc", [null, [2, 6], [2, 32]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [4, 7]]]], ["content", "preview/link-targeting", ["loc", [null, [5, 0], [5, 26]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/preview/route', ['exports', 'ember', 'cornerstone/mixins/keyboard-shortcuts/route'], function (exports, _ember, _cornerstoneMixinsKeyboardShortcutsRoute) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsKeyboardShortcutsRoute['default'], {

    keyboardShortcuts: {
      'save': 'propogateSave',
      'find': 'propogateFind',
      'esc': 'propogateCancel'
    },

    preview: _ember['default'].inject.service(),
    beforeModel: function beforeModel() {},
    model: function model() {
      return _ember['default'].RSVP.hash({
        elementDefinitions: this.store.findAll('element/definition'),
        fontConfig: this.store.findRecord('option', 'cornerstone_font_config'),
        fontSelections: this.store.findAll('templates/fonts/selection')
      });
    },

    actions: {
      loading: function loading(transition /*, originRoute  */) {
        //console.log('loading start', originRoute);
        this.set('preview.transitioning', true);
        transition.promise['finally']((function () {

          //console.log('loading complete');
          this.set('preview.transitioning', false);
          this.get('preview').removePreloader();
        }).bind(this));
      },

      propogateSave: function propogateSave() {
        this.get('preview').message('preview:action-propagation', { action: 'save' });
      },

      propogateFind: function propogateFind() {
        // console.log('propogateFind')
      },

      propogateCancel: function propogateCancel() {
        // console.log('propogateCancel')
      }

    }
  });
});
define('cornerstone/preview/service', ['exports', 'ember', 'cornerstone/xfr/mixins/agent', 'cornerstone/mixins/preview-listener'], function (exports, _ember, _cornerstoneXfrMixinsAgent, _cornerstoneMixinsPreviewListener) {

  var propagationEvents = ['click', 'mouseup', 'mousedown', 'keydown', 'keypress', 'keyup'];
  var validEventKeys = ['altKey', 'button', 'buttons', 'charCode', 'code', 'clientX', 'clientY', 'ctrlKey', 'composed', 'isComposing', 'isTrusted', 'key', 'keyCode', 'layerX', 'layerY', 'metaKey', 'movementX', 'movementY', 'offsetX', 'offsetY', 'pageX', 'pageY', 'screenX', 'screenY', 'shiftKey', 'timeStamp', 'type', 'which', 'x', 'y'];

  exports['default'] = _ember['default'].Service.extend(_cornerstoneXfrMixinsAgent['default'], _cornerstoneMixinsPreviewListener['default'], {
    ready: false,
    xfrOrigin: 'preview',
    radio: _ember['default'].inject.service('global/radio'),
    missingZones: [],
    isPreview: _ember['default'].computed(function () {
      return window.csAppData.isPreview && 'false' !== window.csAppData.isPreview;
    }),

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);

      this.set('handleEvent', this.get('handleEvent').bind(this));
      this.setupInitialRoute();

      _ember['default'].$(document.body).on('cs-preview', function (e, _ref) {
        var type = _ref.type;

        if (['tp-wc-cart-dropdown', 'tp-wc-cart-modal', 'tp-wc-cart-off-canvas'].includes(type)) {
          _ember['default'].$(document.body).trigger('wc_fragment_refresh');
        }
      });

      this.listenTo('preview:package:update', function (data) {
        return _this.packageUpdate(data);
      });

      this.listenTo('preview:new:element', function (id) {
        return _this.set('scrollToNewElement', id);
      });
      this.listenTo('preview:observe-start', function (id) {
        return _this.observeStart(id);
      });
      this.listenTo('preview:observe-end', function (id) {
        return _this.observeEnd(id);
      });
    },

    setupPort: function setupPort() {
      var _this2 = this;

      if (this.get('ready') || !this.get('isPreview')) {
        return;
      }

      if (window.csAppData.previewData.timestamp) {
        window.parent.postMessage('cs-preview-port-request::' + window.csAppData.previewData.timestamp, '*');
      } else {
        _ember['default'].Logger.warn('Cornerstone preview window has loaded with a corrupt state');
      }

      var receivePort = function receivePort(e) {

        if ('cs-preview-port' === e.data) {
          window.removeEventListener('message', receivePort, false);
          var port = e.ports[0];
          port.addEventListener('message', _this2.get('xfrOnMessage'), false);
          port.start();
          _this2.set('xfrMessagePort', port);
          _this2.set('ready', true);
          _this2.setupEventPropogation();
          _this2.request('preview:package:setup').then(function (response) {
            return _this2.packageUpdate(response);
          });
        }
      };

      window.addEventListener('message', receivePort, true);
    },

    packageUpdate: function packageUpdate(data) {
      var _this3 = this;

      this.set('previewPackage', data);
      if (!'object' === _ember['default'].typeOf(data) || _ember['default'].isEmpty(data)) {
        return;
      }
      Object.keys(data).forEach(function (key) {
        return _this3.notifyPropertyChange('previewPackage.' + key);
      });
    },

    setupInitialRoute: function setupInitialRoute() {
      var route = 'preview';
      var routeConfig = document.querySelector('[data-cs-preview-route]');

      if (routeConfig) {

        route = 'preview.' + routeConfig.getAttribute('data-cs-preview-route');

        var config = {};
        try {
          if (routeConfig.innerHTML) {
            config = JSON.parse(routeConfig.innerHTML);
          }
        } catch (e) {}

        this.set('initialRouteConfig', config);
      }

      this.set('initialRoute', route);
    },

    preLoaderActive: true,
    canRemovePreloader: true,
    removePreloader: function removePreloader() {
      var force = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

      if (force) {
        this.set('canRemovePreloader', true);
      }

      if (this.get('preLoaderActive') && this.get('canRemovePreloader')) {
        this.set('preLoaderActive', false);
        this.message('pre-loader-state', { show: false });
        this.afterPreloader();
      }
    },

    showPreloader: function showPreloader() {
      if (!this.get('preLoaderActive')) {
        this.set('preLoaderActive', true);
        this.message('pre-loader-state', { show: true });
      }
    },

    afterPreloader: function afterPreloader() {
      var _this4 = this;

      _ember['default'].run.next(function () {
        var mode = _this4.get('initialRouteConfig.mode');
        if ('footers' === mode) {
          _this4.scrollToBottom(0);
        }
      });
    },

    scrollToElement: function scrollToElement(element) {
      var rate = arguments.length <= 1 || arguments[1] === undefined ? 700 : arguments[1];

      _ember['default'].$('html,body').animate({
        scrollTop: _ember['default'].$(element).offset().top
      }, rate, 'swing');
    },

    scrollToBottom: function scrollToBottom() {
      var rate = arguments.length <= 0 || arguments[0] === undefined ? 700 : arguments[0];

      var top = document.body.scrollHeight;

      var $firstbar = _ember['default'].$('.x-colophon .x-bar').first();
      if ($firstbar.length) {
        top = $firstbar.offset().top;
      }

      _ember['default'].$('html,body').animate({ scrollTop: top }, rate, 'swing');
    },

    scrollToBottomAfterRender: function scrollToBottomAfterRender() {
      var _this5 = this;

      // console.log('scroll to bottom');
      this.set('shouldScrollToBottom', true);
      _ember['default'].run.later(function () {
        if (_this5.get('shouldScrollToBottom')) {
          _this5.scrollToBottom();
        }
      }, 100);
    },

    setupEventPropogation: function setupEventPropogation() {
      var _this6 = this;

      propagationEvents.forEach(function (eventType) {
        return window.document.addEventListener(eventType, _this6.handleEvent, false);
      });
    },

    willDestroy: function willDestroy() {
      var _this7 = this;

      propagationEvents.forEach(function (eventType) {
        return window.document.removeEventListener(eventType, _this7.handleEvent);
      });
    },

    handleEvent: function handleEvent(e) {

      // Event synthesization
      // We're going to send keyboard and mouse events back up to the parent

      var summary = {};

      validEventKeys.forEach(function (validKey) {
        if (!_ember['default'].isNone(e[validKey])) {
          summary[validKey] = e[validKey];
        }
      });

      this.message('preview:event-propagation', { event: summary });
    },

    observeStart: function observeStart(id) {
      this.get('radio').trigger('element:remote:query', {
        type: 'observer:start',
        element: id
      });
    },

    observeEnd: function observeEnd(id) {
      this.get('radio').trigger('element:remote:query', {
        type: 'observer:end',
        element: id
      });
    },

    notateMissingZone: function notateMissingZone(zone) {

      var missing = this.get('missingZones');
      if (!missing.contains(zone)) {
        missing.push(zone);
      }

      _ember['default'].run.debounce(this, this.missingZoneNotification, 1000);
    },

    missingZoneNotification: function missingZoneNotification() {
      var _this8 = this;

      this.removePreloader(true);
      this.get('missingZones').forEach(function (zone) {
        _this8.message('preview:error-message', { key: 'missing-zone.' + zone });
      });
    }

  });
});
define("cornerstone/preview/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 4,
              "column": 0
            }
          },
          "moduleName": "cornerstone/preview/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
          return morphs;
        },
        statements: [["content", "preview/preview-loader", ["loc", [null, [2, 2], [2, 28]]], 0, 0, 0, 0], ["content", "preview/cs-observer", ["loc", [null, [3, 2], [3, 25]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/preview/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "if", [["get", "preview.ready", ["loc", [null, [1, 6], [1, 19]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [4, 7]]]], ["content", "outlet", ["loc", [null, [5, 0], [5, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define('cornerstone/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {

  function genericResolver(parsedName) {
    var resolvedTransform = this.resolveOther(parsedName);
    if (resolvedTransform) {
      return resolvedTransform;
    }
    return null;
  }

  exports['default'] = _emberResolver['default'].extend({
    resolveTransform: genericResolver,
    resolveIcon: genericResolver
  });
});
define('cornerstone/router', ['exports', 'ember'], function (exports, _ember) {
  //import config from './config/environment';

  var routeConfig = {};

  if ('true' === window.csAppData.validPermalinks && 'false' === window.csAppData.isPreview) {
    routeConfig.location = 'hash'; //'auto';
    routeConfig.rootURL = window.csAppData.rootURL;
  } else {
    routeConfig.location = 'none';
  }

  var Router = _ember['default'].Router.extend(routeConfig);

  Router.map(function () {
    this.route('unauthorized');
    this.route('not-found', { path: '/*not_found' });

    this.route('options', function () {
      this.route('section', { path: '/:section_id' });
    });

    this.route('templates', function () {
      this.route('fonts');
      this.route('colors');
    });

    this.route('headers');
    this.route('headers.header', { path: '/headers/:header_id' }, function () {
      this.route('layout');
      this.route('inspector');
    });

    this.route('content', function () {
      this.route('page', { path: '/:post_id' });
    });

    this.route('footers');
    this.route('footers.footer', { path: '/footers/:footer_id' }, function () {
      this.route('layout');
      this.route('inspector');
    });

    this.route('preview', function () {
      this.route('regions');
      this.route('options');
      this.route('regions-index');
    });

    this.route('lab4');
  });

  exports['default'] = Router;
});
define('cornerstone/routes/index', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({
    beforeModel: function beforeModel() {
      var initialRoute = this.get('config.global.initialRoute');
      if (initialRoute) {
        this.set('config.global.initialRoute', false);
        this.transitionTo(initialRoute);
      }
    }

  });
});
define('cornerstone/routes/not-found', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    afterModel: function afterModel(params) {

      var path = window.csAppData.rootURL.substr(1, window.csAppData.rootURL.length - 1);

      if (-1 !== params.not_found.indexOf(path)) {
        this.transitionTo(params.not_found.replace(path, ''));
      }
    }
  });
});
define('cornerstone/routes/unauthorized', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define('cornerstone/services/browser', ['exports', 'ember', 'npm:bowser'], function (exports, _ember, _npmBowser) {
  exports['default'] = _ember['default'].Service.extend({

    init: function init() {

      this._super.apply(this, arguments);
      this.set('browserName', _ember['default'].String.dasherize(_npmBowser['default'].name));
      this.set('browserVersion', _ember['default'].String.dasherize(parseInt(_npmBowser['default'].version).toString()));
    },

    isIE: _ember['default'].computed(function () {
      return _npmBowser['default'].msie;
    }),

    isEdge: _ember['default'].computed(function () {
      return _npmBowser['default'].msedge;
    }),

    browserClass: _ember['default'].computed('browserName', 'browserVersion', function () {
      var version = this.get('browserVersion');
      var name = this.get('browserName');
      return 'cs-browser-' + name + ' cs-browser-' + name + '-' + version;
    })

  });
});
define('cornerstone/services/config', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({
    store: _ember['default'].inject.service(),
    i18nGroups: [],

    global: _ember['default'].computed(function () {
      return _ember['default'].Object.create(this.prepareData(window.csAppData));
    }),

    init: function init() {
      this._super.apply(this, arguments);
      this.addI18n('app', this.get('global.app_i18n'));
      this.addI18n('common', this.get('global.common_i18n'));
    },

    fetch: function fetch(namespace) {
      return new _ember['default'].RSVP.Promise((function (resolve, reject) {
        this.get('store').findRecord('fragment', namespace + '::config').then((function (record) {
          var value = record.get('value');
          if (value && value.i18n) {
            this.addI18n(namespace, value.i18n);
          }
          this.set(namespace, _ember['default'].Object.create(value));
          resolve(value);
        }).bind(this), reject);
      }).bind(this));
    },

    prepareData: function prepareData(data) {

      for (var key in data) {

        if ('true' === data[key]) {
          data[key] = true;
        }

        if ('false' === data[key]) {
          data[key] = false;
        }
      }

      return data;
    },

    addI18n: function addI18n(namespace, strings) {

      var i18nGroups = this.get('i18nGroups');

      if (i18nGroups.includes(namespace)) {
        return;
      }

      i18nGroups.push(namespace);
      this.set('i18nGroups', i18nGroups);

      this.get('i18n').addTranslations('en', strings);
    }

  });
});
define('cornerstone/services/cs-ajax', ['exports', 'ember', 'npm:pako', 'cornerstone/util/base64'], function (exports, _ember, _npmPako, _cornerstoneUtilBase64) {
  exports['default'] = _ember['default'].Service.extend({

    ui: _ember['default'].inject.service(),
    debugLogging: _ember['default'].computed.alias('ui.debugEnabled'),

    nonce: '',
    legacy: false,
    noPhpInput: false,
    batch: {},
    batchDebounce: 15,
    canGzip: true,

    endpointURL: _ember['default'].computed('legacy', function () {
      var path = this.get('legacy') ? 'fallbackAjaxUrl' : 'ajaxUrl';
      return this.get('config.global.' + path);
    }),

    init: function init() {
      var _this = this;

      this._super.apply(this, arguments);
      this.set('nonce', this.get('config.global._cs_nonce'));
      this.set('legacy', this.get('config.global.useLegacyAjax'));
      this.set('canGzip', this.get('config.global.canGzip'));

      _ember['default'].$(document).on('heartbeat-tick', function (e, data) {
        if (data._cs_nonce) {
          delete window.adminpage;
          _this.set('nonce', data._cs_nonce);
        }
      });

      _ember['default'].$(document).on('heartbeat-send', function (e, data) {
        data['_cs_nonce'] = _this.get('nonce');
      });
    },

    modelRequest: function modelRequest(model, request) {
      return this.request('adapter::' + model, _ember['default'].assign({ action: 'query', params: {} }, request));
    },

    request: function request(action, _request) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {

        var batch = _this2.get('batch');
        if (!batch) {
          batch = {};
        }
        action = action + '::' + Object.keys(batch).length;

        batch[action] = { params: _request, resolve: resolve, reject: reject };
        _this2.set('batch', batch);

        _ember['default'].run.debounce(_this2, _this2.requestBatch, _this2.get('batchDebounce'));
      });
    },

    // Useful for making a request that gets a dedicated PHP response.
    requestOne: function requestOne(action, request) {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {

        _this3.promise('controllers', { actions: [{ name: action, params: request || {} }] }).then(function (res) {
          if (res[0].success) {
            resolve(res[0].data);
          } else {
            reject(res[0].data);
          }
        }, reject);
      });
    },

    promise: function promise(action, request) {
      var _this4 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _this4.submitRequest(action, request || {}, resolve, reject);
      });
    },

    //
    // INTERNAL
    //

    requestBatch: function requestBatch() {
      var _this5 = this;

      var batch = this.get('batch');
      var actions = [];

      for (var action in batch) {
        actions.push({
          name: action,
          params: batch[action].params || {}
        });
      }

      this.set('batch', {});

      this.promise('controllers', { actions: actions }).then(function (results) {

        results.forEach(function (result) {

          if (result.success) {
            if (batch[result.name].resolve) {
              (function () {
                var data = result.gzip ? uncompress(result.data) : result.data;
                _ember['default'].run(function () {
                  if (_this5.get('debugLogging')) {
                    console.log('Resolving AJAX Job', result.name, data);
                  }
                  batch[result.name].resolve(data);
                });
              })();
            }
          } else {
            _ember['default'].Logger.warn('Rejecting Controller promise', result);
            if (window.console) {
              window.console.trace();
            }
            if (batch[result.name].reject) {
              _ember['default'].run(function () {
                batch[result.name].reject(result.data);
              });
            }
          }
        });
      }, function (reason) {
        _ember['default'].run(function () {
          for (var action in batch) {
            if (batch[action].reject) {
              batch[action].reject(reason);
            }
          }
        });
      });

      function uncompress(data) {

        try {
          return JSON.parse(_npmPako['default'].inflate(_cornerstoneUtilBase64['default'].decodeToByteArray(data), { to: 'string' }));
        } catch (e) {
          console.warn('Failed to inflate gzip response', e);
        }

        return data;
      }
    },

    handleResponse: function handleResponse(action, request, response, resolve, reject) {

      if (response.responseJSON.debug) {
        this.errorBubbling(response.responseJSON.debug);
      }

      if (!this.get('noPhpInput') && response.responseJSON.failed_php_input) {
        this.set('noPhpInput', true);
        this.submitRequest(action, request, resolve, reject);
        return;
      }

      var data = response.responseJSON.data || {};

      if (response.responseJSON.success) {
        if (this.get('debugLogging')) {
          console.log('AJAX Response', response.responseJSON, request);
        }
        resolve(data);
      } else {
        if (data.invalid_user && window.wp && window.wp.heartbeat) {
          window.wp.heartbeat.connectNow();
        }
        _ember['default'].Logger.warn('Rejecting AJAX promise', data);
        if (window.console && this.get('debugLogging')) {
          window.console.trace();
        }
        reject(data);
      }
    },

    errorBubbling: function errorBubbling(debug) {

      if (debug.extraneous) {
        _ember['default'].Logger.warn('Cornerstone has recovered from extraneous output found in an AJAX response. Logging original response.', { original: debug.extraneous });
      }

      if (debug.php_errors) {
        _ember['default'].Logger.warn('Cornerstone detected PHP Errors while generating an AJAX response. Logging errors...');
        if (_ember['default'].isArray(debug.php_errors)) {
          _ember['default'].Logger.info(debug.php_errors.reduce(function (acc, value) {
            return acc + value + '\n';
          }, ''));
        } else {
          _ember['default'].Logger.info(debug.php_errors);
        }
      }
    },

    //
    // Attempt to recover JSON when output is sent
    // prior to the Cornerstone response.
    //

    failOver: function failOver(action, request, response, resolve, reject) {
      var _this6 = this;

      // Look for a JSON in the response text, extract it, then reparse it.
      if (response.responseText) {

        var matches = response.responseText.match(/{"success":\w*?,"data.*/);
        var recovery = {};

        try {
          recovery = JSON.parse(matches[0]);
        } catch (e) {
          _ember['default'].Logger.warn('Failed to recover from malformed AJAX response: ', response);
        }

        if ('object' === typeof recovery.data && (true === recovery.success || false === recovery.success)) {
          _ember['default'].Logger.warn('Recovered from malformed AJAX response: ', response);
          response.responseJSON = recovery;
          this.handleResponse(action, request, response, resolve, reject);
          return;
        }
      }

      // Nothing left to do if we're failing in legacy mode.
      if (this.get('legacy')) {
        _ember['default'].Logger.warn('Unhandled AJAX error. Expecting valid JSON from response.', response);
        reject({});
        return;
      }

      _ember['default'].Logger.warn('Failed AJAX request. Switching to fallback.', response);

      // Switch to legacy AJAX and start over...
      this.set('legacy', true);
      var options = this.makeAjaxOptions('legacy_ajax');
      options.data.enable = true;
      options.complete = function () {
        _this6.submitRequest(action, request, resolve, reject);
      };

      _ember['default'].$.ajax(options);
    },

    submitRequest: function submitRequest(action, request, resolve, reject) {
      var _this7 = this;

      var normalizejqXHR = function normalizejqXHR(jqXHR) {
        if (jqXHR.responseJSON) {
          _this7.handleResponse(action, request, jqXHR, resolve, reject);
        } else {
          _this7.failOver(action, request, jqXHR, resolve, reject);
        }
      };

      // Add AJAX request to run loop
      _ember['default'].$.ajax(this.makeAjaxOptions(action, request)).then(function (r, textStatus, jqXHR) {
        _ember['default'].run(null, normalizejqXHR, jqXHR);
      }, function (jqXHR) {
        if (0 === jqXHR.readyState) {
          if (_this7.get('debugLogging')) {
            console.log('AJAX request cancelled', jqXHR);
          }
          return;
        }
        _ember['default'].run(null, normalizejqXHR, jqXHR);
      });
    },

    makeAjaxOptions: function makeAjaxOptions(action, request) {
      return {
        type: 'POST',
        url: this.get('endpointURL'),
        context: this,
        data: this.formatRequest(action, request),
        dataType: 'json'
      };
    },

    formatRequest: function formatRequest(action, request) {

      var data = {
        _cs_nonce: this.get('nonce'),
        action: 'cs_' + action,
        request: request || {}
      };

      if (!_ember['default'].isPresent(request)) {
        return data;
      }

      if (this.get('canGzip')) {
        data.gzip = true;
        data.request = _cornerstoneUtilBase64['default'].encodeFromByteArray(_npmPako['default'].gzip(JSON.stringify(request)));
      }

      if (this.get('legacy') || this.get('noPhpInput')) {
        if (!this.get('canGzip')) {
          data.request = _cornerstoneUtilBase64['default'].encode(JSON.stringify(request));
        }
        return data;
      }

      return JSON.stringify(data);
    }

  });
});
define('cornerstone/services/current-user', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({

    init: function init() {
      this._super.apply(this, arguments);
      this.setProperties(this.get('config.global.permissions'));
    }

  });
});
define('cornerstone/services/flash-messages', ['exports', 'ember-cli-flash/services/flash-messages'], function (exports, _emberCliFlashServicesFlashMessages) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberCliFlashServicesFlashMessages['default'];
    }
  });
});
define('cornerstone/services/i18n', ['exports', 'ember-i18n/services/i18n'], function (exports, _emberI18nServicesI18n) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nServicesI18n['default'];
    }
  });
});
define('cornerstone/services/inspector', ['exports', 'ember'], function (exports, _ember) {

  // This service should never be instantiated directly.
  // Some of this could be moved into a component, which would also help us avoid
  // redundancys in the [header/footer]/inspector/template.hbs files

  exports['default'] = _ember['default'].Service.extend({

    // isAbstract: Ember.on('init', function() {
    // We could introduce a warning here to ensure this service is only used via inheritance
    // }),

    store: _ember['default'].inject.service(),
    ui: _ember['default'].inject.service(),
    i18n: _ember['default'].inject.service(),
    inspecting: null,
    controlGroups: _ember['default'].computed.alias('inspecting.definition.controlGroupTiers'),

    breadcrumbs: _ember['default'].computed('inspecting', function () {

      var breadcrumbs = [];
      var current = this.get('inspecting');

      while (current && 'region' !== current.get('atts._type')) {
        breadcrumbs.push(current);
        current = current.get('parent');
      }
      breadcrumbs.reverse();
      return breadcrumbs;
    }),

    presets: _ember['default'].computed('inspecting', function () {
      var _this = this;

      var type = this.get('inspecting.definition.id');

      return new _ember['default'].RSVP.Promise(function (resolve) {
        if (!type) {
          resolve([]);
          return;
        }
        _this.get('store').query('element/preset', { element: type }).then(function (success) {
          resolve(success.map(function (item) {
            return { value: item.get('id'), label: item.get('title') };
          }));
        }, function (error) {
          console.log('Unable to load presets for ' + type, error);
          resolve([]);
        });
      });
    }),

    controlProxies: _ember['default'].computed('inspecting', 'inspecting.definition.controlFactory', function () {

      var source = this.get('inspecting');

      if (!source || !this.get('inspecting.definition.controlFactory')) {
        return _ember['default'].A();
      }

      return this.get('inspecting.definition.controlFactory')(source);
    }),

    inspect: function inspect(element, after) {
      var _this2 = this;

      if (this.isInspecting(element)) {
        return;
      }

      this.set('inspecting', null);
      this.set('transitioning', true);

      _ember['default'].run.later(function () {
        _this2.set('inspecting', element);
        _this2.set('transitioning', false);
        if (after) {
          after.call();
        }
      }, 15);
    },

    applyPreset: function applyPreset(presetId) {

      var preset = this.get('store').peekRecord('element/preset', presetId);
      if (preset) {
        var update = preset.getScopedPropertyUpdate('atts');
        this.get('inspecting').setProperties(update);
      }
    },

    isInspecting: function isInspecting(element) {
      return element && element.get('id') === this.get('inspecting.id');
    },

    clearInspecting: function clearInspecting() {
      this.set('inspecting', null);
    }

  });
});
define('cornerstone/services/search', ['exports', 'ember', 'cornerstone/objects/search'], function (exports, _ember, _cornerstoneObjectsSearch) {
  exports['default'] = _ember['default'].Service.extend({
    targets: {},

    getTarget: function getTarget(name) {
      var target = this.get('targets.' + name);
      if (!target) {
        target = new _cornerstoneObjectsSearch['default']();
        target.set('name', name);
        this.set('targets.' + name, target);
      }
      return target;
    }

  });
});
define('cornerstone/services/ui', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({

    i18n: _ember['default'].inject.service(),
    preview: _ember['default'].inject.service(),
    previewSize: 'xl',
    showPreviewSizer: false,
    showCustomCSS: false,
    showCustomJS: false,
    showFontConfig: false,
    isCollapsed: false,
    isRTL: false,
    primaryRoute: false,
    debugEnabled: false,
    confirmHandlers: {},
    unsavedData: false,
    previewDelayed: 0,
    horizontalScrollSupport: false,

    contentLogoPath: _ember['default'].computed('isPro', function () {
      return this.get('isPro') ? 'interface/logo-content-flat-original' : 'interface/logo-flat-original';
    }),

    preloaderLogoClass: _ember['default'].computed('isX', 'isPro', function () {
      if (this.get('isPro') || this.get('isX')) {
        return 'logo-x';
      }
      return 'logo-cs';
    }),

    optionsLogoPath: _ember['default'].computed('isX', 'isPro', function () {
      if (this.get('isPro')) {
        return 'interface/logo-pro';
      }

      if (this.get('isX')) {
        return 'interface/logo-x';
      }

      return 'interface/logo-flat-original';
    }),

    optionsLogoExtra: _ember['default'].computed('isPro', function () {
      // if ( this.get('isPro') ) {
      //   return '<defs><radialGradient cx="51.6966164%" cy="50%" fx="51.6966164%" fy="50%" r="49.2436623%" id="pro-background"><stop stop-color="#49A1EB" offset="0%"></stop><stop stop-color="#3D79C0" offset="100%"></stop></radialGradient></defs>';
      // }
      return '';
    }),

    isPro: _ember['default'].computed(function () {
      return 'pro' === window.csAppData.integration_mode;
    }),

    isX: _ember['default'].computed(function () {
      return 'x' === window.csAppData.integration_mode;
    }),

    dashboardUrl: _ember['default'].computed(function () {
      return window.csAppData.dashboardUrl;
    }),

    defaultPreviewUrl: _ember['default'].computed(function () {
      return window.csAppData.home_url || '/';
    }),

    devTools: _ember['default'].computed(function () {
      return !!window.csAppData.devTools;
    }),

    windowOrientation: 'horizontal',
    workspaceOrientation: _ember['default'].computed('windowOrientation', function () {
      return 'horizontal' === this.get('windowOrientation') ? 'vertical' : 'horizontal';
    }),

    // Service Lookups
    store: _ember['default'].inject.service(),
    search: _ember['default'].inject.service(),
    radio: _ember['default'].inject.service('global/radio'),

    onInit: _ember['default'].on('init', function () {
      var _this = this;

      this.set('isRTL', window.csAppData.isRTL);
      this._oneTimeValues = {};

      this.get('radio').on('continuity.update', this, 'continuityUpdate');

      window.onbeforeunload = function () {
        if (_this.get('unsavedData')) {
          return _this.get('i18n').t('app.unsaved-warning');
        }
      };
    }),

    continuityUpdate: function continuityUpdate(type) {
      if (['element'].includes(type)) {
        this.set('unsavedData', true);
      }
    },

    willDestroy: function willDestroy() {
      this.get('radio').off('continuity.update', this, 'continuityUpdate');
    },

    observeShowPreviewSizer: _ember['default'].observer('showPreviewSizer', function () {
      if (this.get('showPreviewSizer')) {
        // this.setProperties({
        //   showCustomCSS: false,
        //   showCustomJS: false
        // });
      }
    }),

    observeShowCustomCSS: _ember['default'].observer('showCustomCSS', function () {
      if (this.get('showCustomCSS')) {
        this.setProperties({
          showCustomJS: false
        });
      }
    }),

    observeShowCustomJS: _ember['default'].observer('showCustomJS', function () {
      if (this.get('showCustomJS')) {
        this.setProperties({
          showCustomCSS: false
        });
      }
    }),

    observeIsCollapsed: _ember['default'].observer('isCollapsed', function () {
      if (this.get('isCollapsed')) {
        this.setProperties({
          showCustomCSS: false,
          showCustomJS: false
        });
      }
    }),

    actions: {

      toggle: function toggle(property) {
        this.set(property, !this.get(property));
      }

    },

    getFaIcons: function getFaIcons() {
      var _this2 = this;

      if (!this.get('fetchedIcons')) {

        var promise = new _ember['default'].RSVP.Promise(function (resolve, reject) {
          return _this2.get('store').findRecord('fragment', 'app::font_awesome').then(function (record) {
            var icons = record.get('value');
            var reduced = {};

            // Flip from name:hex to hex:[name,aliases...]
            for (var key in icons) {
              if (icons.hasOwnProperty(key)) {
                if (_ember['default'].isNone(reduced[icons[key]])) {
                  reduced[icons[key]] = [];
                }
                reduced[icons[key]].push(key);
              }
            }

            resolve(reduced);
          }, reject);
        });
        this.set('fetchedIcons', promise);
      }

      return this.get('fetchedIcons');
    },

    setRouteUI: function setRouteUI(primaryRoute) {

      this.set('primaryRoute', primaryRoute);

      var states = ['preview-sizer', 'view-site', 'collapse', 'cheatsheet', 'save'];
      var props = {
        showPreviewSizer: false,
        previewSize: 'xl',
        showCustomCSS: false,
        showCustomJS: false,
        showFontConfig: false,
        isCollapsed: false
      };

      var enabled = _ember['default'].getWithDefault(primaryRoute, 'routeUI.bar', []);

      states.forEach(function (item) {
        var key = _ember['default'].String.camelize('route-enabled-' + item);
        props[key] = enabled.includes(item);
      });

      this.set('windowOrientation', _ember['default'].getWithDefault(primaryRoute, 'routeUI.orientation', 'horizontal'));
      this.set('viewSiteURL', _ember['default'].getWithDefault(primaryRoute, 'routeUI.viewSiteURL', null));

      this.setProperties(props);
    },

    canViewSite: _ember['default'].computed('routeEnabledViewSite', 'viewSiteURL', function () {
      return this.get('routeEnabledViewSite') && this.get('viewSiteURL');
    }),

    oneTimeValue: function oneTimeValue() {

      if (1 === arguments.length) {
        var val = _ember['default'].copy(this._oneTimeValues[arguments[0]]);
        delete this._oneTimeValues[arguments[0]];
        return val;
      }

      if (2 === arguments.length) {
        this._oneTimeValues[arguments[0]] = arguments[1];
      }
    },

    //
    // Builder
    //

    builderIndexSelectedEntry: false,

    selectBuilderIndex: function selectBuilderIndex(entry) {
      if (!entry.get('id') || entry.get('id') === this.get('builderIndexSelectedEntry.id')) {
        this.set('builderIndexSelectedEntry', false);
        return;
      }

      this.set('builderIndexSelectedEntry', entry);
    },

    builderIndexPreviewURL: _ember['default'].computed('builderIndexSelectedEntry', function () {
      if (false === this.get('builderIndexSelectedEntry')) {
        return false;
      }

      return this.get('builderIndexSelectedEntry.permalink');
    }),

    //
    // Misc
    //

    scrollBarWidth: _ember['default'].computed(function () {
      var outer = document.createElement('div');
      outer.style.visibility = 'hidden';
      outer.style.width = '100px';
      outer.style.msOverflowStyle = 'scrollbar';
      document.body.appendChild(outer);
      var widthNoScroll = outer.offsetWidth;
      outer.style.overflow = 'scroll';
      var inner = document.createElement('div');
      inner.style.width = '100%';
      outer.appendChild(inner);
      var widthWithScroll = inner.offsetWidth;
      outer.parentNode.removeChild(outer);
      return widthNoScroll - widthWithScroll;
    }),

    scrollBarWidthRightStyle: _ember['default'].computed('scrollBarWidth', function () {
      var w = this.get('scrollBarWidth');
      return _ember['default'].String.htmlSafe('right: ' + w + 'px;');
    }),

    //
    // Notify
    //

    flashMessages: _ember['default'].inject.service(),

    notify: function notify(params) {

      if ('string' === typeof params) {
        params = {
          message: params
        };
      }

      if (arguments[1]) {
        if ('object' === typeof arguments[1]) {
          params = _ember['default'].merge(params, arguments[1]);
        } else {
          params.type = arguments[1];
        }
      }

      params = _ember['default'].merge({
        type: 'notice',
        message: '',
        timeout: 3000,
        extendedTimeout: 650,
        canClose: null
      }, params);

      if ('boolean' !== typeof params.canClose) {
        params.canClose = params.timeout > 3000;
      }

      if (!params.title) {
        switch (params.type) {
          case 'error':
            params.title = this.get('i18n').t('app.notification-error');
            break;
          case 'success':
            params.title = this.get('i18n').t('app.notification-success');
            break;
          default:
            params.title = this.get('i18n').t('app.notification-notice');
        }
      }

      this.get('flashMessages').add(params);
    },

    //
    // Saving
    //

    saving: false,

    beginSaveProgress: function beginSaveProgress() {
      this.set('saving', true);
    },

    endSaveProgress: function endSaveProgress() {
      this.set('saving', false);
    },

    //
    // Confirm
    //

    confirm: function confirm(params) {

      if (!params.noSkip && this.get('deleteConfirm')) {
        return 'function' === _ember['default'].typeOf(params.accept) ? params.accept() : null;
      }

      if (!params.screen) {
        params.screen = 'global';
      }

      var cb = this.get('confirmHandlers.' + params.screen);
      if ('function' === _ember['default'].typeOf(cb)) {
        cb(params);
      }
    },

    //
    // Cheatsheet
    //

    cheatsheetItems: _ember['default'].computed(function () {
      return _ember['default'].A([{
        name: 'keyboard-shortcuts',
        label: 'Keyboard Shortcuts',
        content: '<h3>Global</h3>' + '<dl class="cs-keys">' + '<dt>Save</dt>' + '<dd><span class="cs-key-l">Cmd/Ctrl</span><span>S</span></dd>' + '<dt>Find (focus available search)</dt>' + '<dd><span class="cs-key-l">Cmd/Ctrl</span><span>F</span></dd>' + '<dt>Close Open Windows</dt>' + '<dd><span class="cs-key-m">Esc</span></dd>' + '<dt>Enable "Quick Actions"</dt>' + '<dd><span class="cs-key-m">Shift</span></dd>' + '</dl>'
      }, {
        name: 'terminologies',
        label: 'Terminologies',
        content: '<h3>Global</h3>' + '<dl>' + '<dt>The Bar</dt>' + '<dd>The skinny vertical bar that is your way of getting around. The icons at the bottom are contextually relevant to the screen you are on.</dd>' + '<dt>Header Builder</dt>' + '<dd>The place you create and customize headers for your site. Labeled "Headers" in The Bar.</dd>' + '<dt>Content Builder</dt>' + '<dd>The place you create and customize the page content of your site (the space between your header and footer). Labeled "Content" in The Bar.</dd>' + '<dt>Footer Builder</dt>' + '<dd>The place you create and customize footers for your site. Labeled "Footers" in The Bar.</dd>' + '<dt>Elements</dt>' + '<dd>Each of the above builders have Elements. There are some Elements that only work in a particular context (for example, in the header), and you&apos;ll notice that the Elements in Headers and Footers have significant customization options. Over time, we will be adding these same advanced controls to Elements in the Content Builder.</dd>' + '<dt>Templates</dt>' + '<dd>Starting points for your header, content, or footers. We are working on a new "Library" that will bring management of all templates together in one place. There will be no Expanded Demos in Pro, but you can think of Templates as a demo of sorts for the respective builders. We have native ones built-in, and you can create your own.</dd>' + '<dt>Presets</dt>' + '<dd>Customized styles for individual Elements. Once the new "Library" is launched under Templates you&apos;ll be able to manage all your presets, templates, and more in one place.</dd>' + '<dt>Font Manager</dt>' + '<dd>Under Templates, this is the place to manage all native, TypeKit, and custom fonts. You can create families and then update in only one place and have it instantly push out to all uses of that font throughout your site!</dd>' + '<dt>Cheatsheet</dt>' + '<dd>What you&apos;re looking at right now! This is opened by clicking the question mark icon in "The Bar." This will house quick blurbs of information in different tabs.</dd>' + '</dl>'
      }]);
    })
  });
});
define('cornerstone/services/wp-media', ['exports', 'ember', 'cornerstone/util/custom-media-manager'], function (exports, _ember, _cornerstoneUtilCustomMediaManager) {
  exports['default'] = _ember['default'].Service.extend({

    proxy: null,

    uploader: _ember['default'].computed(function () {

      (0, _cornerstoneUtilCustomMediaManager['default'])();

      var uploader = new window.wp.media.view.MediaFrame.Cornerstone({
        className: 'media-frame cs-media-frame',
        multiple: false,
        library: { type: 'image' },
        button: { text: 'Insert Image' }
      });

      var self = this;

      uploader.on('insert', function () {
        self.update(uploader.state().get('selection').first().toJSON().url);
      });

      uploader.on('select', function () {

        var state = uploader.state();

        if (state && 'embed' === state.get('id')) {
          self.update(state.props.get('url'));
        }

        self.cleanup();
      });

      return uploader;
    }),

    update: function update(value) {

      var proxy = this.get('proxy');

      if (!proxy) {
        return;
      }

      proxy.source.set(proxy.key, value);
      this.cleanup();
    },

    cleanup: function cleanup() {
      this.set('proxy', null);
    },

    request: function request(source, key) {

      this.set('proxy', {
        source: source,
        key: key
      });

      this.get('uploader').open();
    }

  });
});
define('cornerstone/templates/colors/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], {

    acl: ['canManageOptions'],
    routeUI: {
      bar: ['cheatsheet', 'save']
    },
    service: _ember['default'].inject.service('templates/colors'),

    deactivate: function deactivate() {
      this.store.unloadAll('templates/colors/selection');
      this.incrementProperty('service.paletteItemsUpdated');
    },

    beforeModel: function beforeModel() {
      this.permissionCheck();
    },

    model: function model() {
      return _ember['default'].RSVP.hash({
        items: this.store.findAll('templates/colors/selection')
      });
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      this.get('ui').setRouteUI(this);
      this.set('previousContent', this.getContentString(model));
    },

    getContentString: function getContentString(model) {
      return JSON.stringify({
        items: model.items.sortBy('order').map(function (item) {
          return item.serialize();
        })
      });
    },

    actions: {

      willTransition: function willTransition(transition) {
        var _this = this;

        var content = this.getContentString(this.modelFor(this.routeName));
        if (content !== this.get('previousContent')) {

          transition.abort();

          this.get('ui').confirm({
            noSkip: true,
            message: this.get('i18n').t('app.unsaved-warning'),
            accept: function accept() {
              _this.set('previousContent', content);
              transition.retry();
            },
            acceptClass: 'sad'
          });
        }
      },

      save: function save() {
        var _this2 = this;

        var ui = this.get('ui');
        ui.beginSaveProgress();

        var model = this.modelFor(this.routeName);

        var fail = function fail(error) {
          ui.endSaveProgress();
          ui.notify('Could not save Colors.', 'error');
          _ember['default'].Logger.warn('Could not save colors', error);
        };

        var first = model.items.get('firstObject');

        if (first) {
          _ember['default'].RSVP.allSettled([first.save()]).then(function (array) {

            if (array.find(function (item) {
              return 'rejected' === item.state;
            })) {
              return fail(array);
            }
            _this2.set('previousContent', _this2.getContentString(_this2.modelFor(_this2.routeName)));
            ui.notify('Colors saved!', 'success');
            _ember['default'].Logger.info('Colors saved.');
            ui.endSaveProgress();
          }, fail);
        } else {
          ui.notify('Colors saved!', 'success');
          ui.endSaveProgress();
        }
      }
    }

  });
});
define('cornerstone/templates/colors/selection/adapter', ['exports', 'cornerstone/adapters/cs-option-list-adapter', 'cornerstone/util/hex-encode'], function (exports, _cornerstoneAdaptersCsOptionListAdapter, _cornerstoneUtilHexEncode) {
  exports['default'] = _cornerstoneAdaptersCsOptionListAdapter['default'].extend({
    option: 'cornerstone_color_items',

    // Don't load entries from the DB that already exist.
    filterResponse: function filterResponse(store, type, response) {

      var existing = store.peekAll(type.modelName).map(function (record) {
        return record.serialize()._id;
      });

      return response.reject(function (item) {
        return existing.includes(item._id) || existing.includes((0, _cornerstoneUtilHexEncode['default'])(item.title));
      });
    }
  });
});
// import Ember from 'ember';
define('cornerstone/templates/colors/selection/model', ['exports', 'ember', 'ember-data', 'ember-data/attr', 'cornerstone/util/hex-encode'], function (exports, _ember, _emberData, _emberDataAttr, _cornerstoneUtilHexEncode) {
  exports['default'] = _emberData['default'].Model.extend({
    title: (0, _emberDataAttr['default'])(),
    value: (0, _emberDataAttr['default'])(),
    order: (0, _emberDataAttr['default'])(),

    selectable: _ember['default'].computed('title', function () {
      return !this.get('isDeleted') && this.get('title');
    }),

    _id: _ember['default'].computed('title', function () {
      return (0, _cornerstoneUtilHexEncode['default'])(this.get('title'));
    }),

    sortableTitle: _ember['default'].computed('title', 'order', function () {
      return this.get('order') + ' ' + this.get('title');
    })

  });
});
define('cornerstone/templates/colors/selection/serializer', ['exports', 'ember-data/serializers/json-api', 'npm:uuid', 'cornerstone/util/hex-encode'], function (exports, _emberDataSerializersJsonApi, _npmUuid, _cornerstoneUtilHexEncode) {
  exports['default'] = _emberDataSerializersJsonApi['default'].extend({

    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload) {

      var order = 0;

      var items = payload.map(function (item) {
        item.order = order++;
        var id = item.id ? item.id : _npmUuid['default'].v4();
        delete item._id;
        return {
          id: id,
          type: primaryModelClass.modelName,
          attributes: item
        };
      });

      return { data: items };
    },

    serialize: function serialize() /* snapshot, options */{
      var serialized = this._super.apply(this, arguments);
      delete serialized.data.attributes.order;
      serialized.data.attributes._id = (0, _cornerstoneUtilHexEncode['default'])(serialized.data.attributes.title);
      return serialized.data.attributes;
    }

  });
});
// import Ember from 'ember';
define('cornerstone/templates/colors/service', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend({

    store: _ember['default'].inject.service(),

    makeRandomColor: function makeRandomColor() {
      return '#' + ("000000" + Math.floor(Math.random() * 16777215).toString(16)).slice(-6);
    },

    paletteItemsUpdated: 0,
    paletteItemsPromise: _ember['default'].computed('paletteItemsUpdated', function () {
      var _this = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _this.get('store').unloadAll('templates/colors/selection');
        _this.get('store').findAll('templates/colors/selection').then(function (colors) {

          var options = _this.normalizeColors(colors);

          _this.set('paletteItems', options);
          resolve(options);
        }, reject);
      });
    }),

    normalizeColors: function normalizeColors(colors) {
      return colors.filter(function (choice) {
        return choice.get('selectable');
      }).map(function (choice) {
        return {
          id: choice.get('_id'),
          value: choice.get('value'),
          label: choice.get('title')
        };
      });
    },

    lookupColor: function lookupColor(value) {
      if ('undefined' !== _ember['default'].typeOf(value) && value.includes && value.includes('global-color:')) {
        var color = this.normalizeColors(this.get('store').peekAll('templates/colors/selection')).find(function (color) {
          return value.includes(_ember['default'].get(color, 'id'));
        });
        if (color) {
          return color.value;
        }
      }

      return value;
    }

  });
});
define("cornerstone/templates/colors/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/colors/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "templates/colors/color-list", [], ["colorItems", ["subexpr", "@mut", [["get", "model.items", ["loc", [null, [3, 15], [3, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "selectedItem", ["subexpr", "@mut", [["get", "selectedItem", ["loc", [null, [4, 17], [4, 29]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 2], [5, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 8,
                "column": 2
              },
              "end": {
                "line": 13,
                "column": 2
              }
            },
            "moduleName": "cornerstone/templates/colors/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "templates/colors/color-manager", [], ["colorItems", ["subexpr", "@mut", [["get", "model.items", ["loc", [null, [10, 17], [10, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "selectedItem", ["subexpr", "@mut", [["get", "selectedItem", ["loc", [null, [11, 19], [11, 31]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [9, 4], [12, 6]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 14,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/colors/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "common/scroll-box", [], [], 0, null, ["loc", [null, [8, 2], [13, 24]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/colors/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "workspace/cs-workspace", [], ["name", "color"], 0, null, ["loc", [null, [1, 0], [6, 27]]]], ["block", "global/cs-canvas", [], [], 1, null, ["loc", [null, [7, 0], [14, 21]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define('cornerstone/templates/fonts/route', ['exports', 'ember', 'cornerstone/mixins/route-authorization'], function (exports, _ember, _cornerstoneMixinsRouteAuthorization) {
  exports['default'] = _ember['default'].Route.extend(_cornerstoneMixinsRouteAuthorization['default'], {

    acl: ['canManageOptions'],
    routeUI: {
      bar: ['cheatsheet', 'save']
    },
    service: _ember['default'].inject.service('templates/fonts'),

    deactivate: function deactivate() {
      this.store.unloadRecord(this.modelFor(this.routeName).config);
      this.store.unloadAll('templates/fonts/selection');
      this.incrementProperty('service.fontsUpdated');
    },

    beforeModel: function beforeModel() {
      this.permissionCheck();
    },

    model: function model() {
      return _ember['default'].RSVP.hash({
        config: this.store.findRecord('option', 'cornerstone_font_config'),
        items: this.store.findAll('templates/fonts/selection')
      });
    },

    setupController: function setupController(controller, model) {
      this._super.apply(this, arguments);
      this.get('ui').setRouteUI(this);
      controller.set('selectedItem', model.items.get('firstObject'));
      this.set('previousContent', this.getContentString(model));
    },

    renderTemplate: function renderTemplate() {

      this.render('partials/bar/fonts', {
        outlet: 'bar',
        into: 'application'
      });

      this._super(this, arguments);
    },

    getContentString: function getContentString(model) {
      return JSON.stringify({
        items: model.items.sortBy('order').map(function (item) {
          return item.serialize();
        }),
        config: model.config.serialize()
      });
    },

    actions: {

      willTransition: function willTransition(transition) {
        var _this = this;

        var content = this.getContentString(this.modelFor(this.routeName));
        if (content !== this.get('previousContent')) {

          transition.abort();

          this.get('ui').confirm({
            noSkip: true,
            message: this.get('i18n').t('app.unsaved-warning'),
            accept: function accept() {
              _this.set('previousContent', content);
              transition.retry();
            },
            acceptClass: 'sad'
          });
        }
      },

      save: function save() {
        var _this2 = this;

        var ui = this.get('ui');
        ui.beginSaveProgress();

        var model = this.modelFor(this.routeName);

        var fail = function fail(error) {
          ui.endSaveProgress();
          ui.notify('Could not save Fonts.', 'error');
          _ember['default'].Logger.warn('Could not save fonts', error);
        };

        _ember['default'].RSVP.allSettled([model.items.get('firstObject').save(), model.config.save()]).then(function (array) {

          if (array.find(function (item) {
            return 'rejected' === item.state;
          })) {
            return fail(array);
          }
          _this2.set('previousContent', _this2.getContentString(_this2.modelFor(_this2.routeName)));
          ui.notify('Fonts saved!', 'success');
          _ember['default'].Logger.info('Fonts saved.');
          ui.endSaveProgress();
        }, fail);
      }
    }

  });
});
define('cornerstone/templates/fonts/selection/adapter', ['exports', 'cornerstone/adapters/cs-option-list-adapter'], function (exports, _cornerstoneAdaptersCsOptionListAdapter) {
  exports['default'] = _cornerstoneAdaptersCsOptionListAdapter['default'].extend({
    option: 'cornerstone_font_items',

    // Don't load entries from the DB that already exist.
    filterResponse: function filterResponse(store, type, response) {

      var existing = store.peekAll(type.modelName).map(function (record) {
        return record.serialize()._id;
      });

      return response.reject(function (item) {
        return existing.includes(item._id);
      });
    }
  });
});
// import Ember from 'ember';
define('cornerstone/templates/fonts/selection/model', ['exports', 'ember', 'ember-data', 'ember-data/attr', 'cornerstone/util/hex-encode'], function (exports, _ember, _emberData, _emberDataAttr, _cornerstoneUtilHexEncode) {
  exports['default'] = _emberData['default'].Model.extend({
    title: (0, _emberDataAttr['default'])(),
    family: (0, _emberDataAttr['default'])(),
    stack: (0, _emberDataAttr['default'])(),
    source: (0, _emberDataAttr['default'])(),
    order: (0, _emberDataAttr['default'])(),

    weights: (0, _emberDataAttr['default'])({ defaultValue: function defaultValue() {
        return _ember['default'].A();
      } }),

    selectable: _ember['default'].computed('title', 'weights.[]', function () {
      return !this.get('isDeleted') && this.get('title') && 0 < this.get('weights.length');
    }),

    _id: _ember['default'].computed('title', function () {
      return (0, _cornerstoneUtilHexEncode['default'])(this.get('title'));
    }),

    sortableTitle: _ember['default'].computed('title', 'order', function () {
      return this.get('order') + ' ' + this.get('title');
    })

  });
});
define('cornerstone/templates/fonts/selection/serializer', ['exports', 'ember-data/serializers/json-api', 'npm:uuid', 'cornerstone/util/hex-encode'], function (exports, _emberDataSerializersJsonApi, _npmUuid, _cornerstoneUtilHexEncode) {
  exports['default'] = _emberDataSerializersJsonApi['default'].extend({

    normalizeResponse: function normalizeResponse(store, primaryModelClass, payload) {

      var order = 0;

      var items = payload.map(function (item) {
        item.order = order++;
        var id = item.id ? item.id : _npmUuid['default'].v4();
        delete item._id;
        return {
          id: id,
          type: primaryModelClass.modelName,
          attributes: item
        };
      });

      return { data: items };
    },

    serialize: function serialize() /* snapshot, options */{
      var serialized = this._super.apply(this, arguments);
      delete serialized.data.attributes.order;
      serialized.data.attributes._id = (0, _cornerstoneUtilHexEncode['default'])(serialized.data.attributes.title);
      return serialized.data.attributes;
    }

  });
});
// import Ember from 'ember';
define('cornerstone/templates/fonts/service', ['exports', 'ember', 'npm:webfontloader'], function (exports, _ember, _npmWebfontloader) {

  // https://github.com/typekit/webfontloader

  exports['default'] = _ember['default'].Service.extend({

    store: _ember['default'].inject.service(),
    config: _ember['default'].inject.service(),
    allWeights: ['100', '100i', '200', '200i', '300', '300i', '400', '400i', '500', '500i', '600', '600i', '700', '700i', '800', '800i', '900', '900i'],

    init: function init() {
      var _this = this;

      this.get('store').findRecord('option', 'cornerstone_font_config').then(function (record) {
        _this.set('fontConfig', record);
      });
    },

    fallbackFont: _ember['default'].computed(function () {
      return _ember['default'].assign({}, this.get('config.global.fallbackFont'));
    }),

    locateFont: function locateFont(_id) {

      var lookup = this.get('store').peekAll('templates/fonts/selection').find(function (font) {
        return _id === _ember['default'].get(font, '_id');
      });

      if (!lookup) {
        lookup = {
          family: 'inherit',
          stack: 'inherit',
          weights: ['inherit'],
          source: 'system'
        };
      }

      return lookup;
    },

    normalizeWeight: function normalizeWeight(value) {
      if (!value) {
        return 'inherit:inherit';
      }
      return value.indexOf(':') ? value : 'inherit:' + value;
    },

    resolveFontWeight: function resolveFontWeight(value) {

      var parts = this.normalizeWeight(value).split(':');

      if ('inherit' === parts[0]) {
        return parts[1];
      }

      var font = this.locateFont(parts[0]);

      return _ember['default'].get(font, 'weights').includes(parts[1]) ? parts[1] : _ember['default'].get(font, 'weights')[0];
    },

    resolveFontFamilyStack: function resolveFontFamilyStack(value) {
      var load = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

      if ('inherit' === value) {
        return 'inherit';
      }

      var font = this.locateFont(value);
      if (load) {
        this.loadFont(font);
      }
      return _ember['default'].get(font, 'stack');
    },

    loadFont: function loadFont(font) {
      var _this2 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {

        var config = {};
        switch (_ember['default'].get(font, 'source')) {
          case "custom":
            config = _this2.loadCustom(font);
            break;
          case "typekit":
            config = _this2.loadTypekit(font);
            break;
          case "google":
            config = _this2.loadGoogle(font);
            break;
        }

        if (_ember['default'].isEmpty(Object.keys(config))) {
          resolve();
          return;
        }

        _npmWebfontloader['default'].load(_ember['default'].assign({
          active: function active() {
            resolve();
          },
          inactive: function inactive(errors) {
            reject(errors);
          }
        }, config));
      });
    },

    loadCustom: function loadCustom() /* font */{
      // Load Custom CSS
      return { custom: { families: ['My Font'] } };
    },

    loadGoogle: function loadGoogle(font) {

      var family = _ember['default'].get(font, 'family') + ':' + _ember['default'].get(font, 'weights').join(',') + ':latin,latin-ext';
      var subsets = this.getWithDefault('fontConfig.value.googleSubsets', []).join(',');
      if (subsets) {
        family += ',' + subsets;
      }

      return { google: { families: [family] } };
    },

    loadTypekit: function loadTypekit() /* font */{
      return { typekit: { id: this.get('fontConfig.value.typekitKitID') } };
    },

    fontsUpdated: 0,
    fontFamilyOptions: _ember['default'].computed('fontsUpdated', function () {
      var _this3 = this;

      return new _ember['default'].RSVP.Promise(function (resolve, reject) {
        _this3.get('store').unloadAll('templates/fonts/selection');
        _this3.get('store').findAll('templates/fonts/selection').then(function (fonts) {

          var options = fonts.filter(function (choice) {
            return choice.get('selectable');
          }).map(function (choice) {
            return { value: choice.get('_id'), label: choice.get('title') };
          });

          options.unshift({
            value: 'inherit',
            label: 'Inherit'
          });

          resolve(options);
        }, reject);
      });
    })

  });
});
define("cornerstone/templates/fonts/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/fonts/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "templates/fonts/font-list", [], ["fontItems", ["subexpr", "@mut", [["get", "model.items", ["loc", [null, [3, 14], [3, 25]]], 0, 0, 0, 0]], [], [], 0, 0], "selectedItem", ["subexpr", "@mut", [["get", "selectedItem", ["loc", [null, [4, 17], [4, 29]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 2], [5, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 7,
              "column": 0
            },
            "end": {
              "line": 12,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/fonts/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "templates/fonts/font-manager", [], ["selectedItem", ["subexpr", "@mut", [["get", "selectedItem", ["loc", [null, [9, 17], [9, 29]]], 0, 0, 0, 0]], [], [], 0, 0], "fontConfig", ["subexpr", "@mut", [["get", "model.config.value", ["loc", [null, [10, 15], [10, 33]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [8, 2], [11, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/fonts/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["block", "workspace/cs-workspace", [], ["name", "fonts"], 0, null, ["loc", [null, [1, 0], [6, 27]]]], ["block", "global/cs-canvas", [], [], 1, null, ["loc", [null, [7, 0], [12, 21]]]], ["inline", "templates/fonts/config-modal", [], ["config", ["subexpr", "@mut", [["get", "model.config", ["loc", [null, [13, 38], [13, 50]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [13, 0], [13, 52]]], 0, 0]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("cornerstone/templates/iframe-loaders/content", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 6
          }
        },
        "moduleName": "cornerstone/templates/iframe-loaders/content.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-pre-loader-logo");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "cs-icon", [["get", "ui.contentLogoPath", ["loc", [null, [2, 12], [2, 30]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 2], [2, 32]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/iframe-loaders/default", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 6
          }
        },
        "moduleName": "cornerstone/templates/iframe-loaders/default.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createAttrMorph(element0, 'class');
        morphs[1] = dom.createMorphAt(element0, 1, 1);
        return morphs;
      },
      statements: [["attribute", "class", ["concat", ["cs-pre-loader-logo ", ["get", "ui.preloaderLogoClass", ["loc", [null, [1, 33], [1, 54]]], 0, 0, 0, 0]], 0, 0, 0, 0, 0], 0, 0, 0, 0], ["inline", "cs-icon", [["get", "ui.optionsLogoPath", ["loc", [null, [2, 12], [2, 30]]], 0, 0, 0, 0], ["get", "ui.optionsLogoExtra", ["loc", [null, [2, 31], [2, 50]]], 0, 0, 0, 0]], [], ["loc", [null, [2, 2], [2, 52]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/iframe-loaders/footers", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 6
          }
        },
        "moduleName": "cornerstone/templates/iframe-loaders/footers.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-pre-loader-logo");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "cs-icon", ["interface/logo-footers-flat-original"], [], ["loc", [null, [2, 2], [2, 52]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/iframe-loaders/headers", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/iframe-loaders/headers.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-pre-loader-logo");
        var el2 = dom.createTextNode("\n  ");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0]), 1, 1);
        return morphs;
      },
      statements: [["inline", "cs-icon", ["interface/logo-headers-flat-original"], [], ["loc", [null, [2, 2], [2, 52]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/iframe-loaders/options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/iframe-loaders/options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["inline", "partial", ["iframe-loaders/default"], [], ["loc", [null, [1, 0], [1, 36]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/index.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "global/launch-screen", ["loc", [null, [1, 0], [1, 24]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/templates/index/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({});
});
define("cornerstone/templates/index/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "cornerstone/templates/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("h2");
            dom.setAttribute(el1, "class", "cs-workspace-title");
            var el2 = dom.createTextNode("Templates");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        var child0 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 6,
                  "column": 4
                },
                "end": {
                  "line": 6,
                  "column": 74
                }
              },
              "moduleName": "cornerstone/templates/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Fonts");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        var child1 = (function () {
          return {
            meta: {
              "revision": "Ember@2.8.0",
              "loc": {
                "source": null,
                "start": {
                  "line": 7,
                  "column": 4
                },
                "end": {
                  "line": 7,
                  "column": 76
                }
              },
              "moduleName": "cornerstone/templates/index/template.hbs"
            },
            isEmpty: false,
            arity: 0,
            cachedFragment: null,
            hasRendered: false,
            buildFragment: function buildFragment(dom) {
              var el0 = dom.createDocumentFragment();
              var el1 = dom.createTextNode("Colors");
              dom.appendChild(el0, el1);
              return el0;
            },
            buildRenderNodes: function buildRenderNodes() {
              return [];
            },
            statements: [],
            locals: [],
            templates: []
          };
        })();
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 5,
                "column": 2
              },
              "end": {
                "line": 8,
                "column": 2
              }
            },
            "moduleName": "cornerstone/templates/index/template.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(2);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            morphs[1] = dom.createMorphAt(fragment, 3, 3, contextualElement);
            return morphs;
          },
          statements: [["block", "link-to", ["templates.fonts"], ["class", "cs-workspace-section-goto"], 0, null, ["loc", [null, [6, 4], [6, 86]]]], ["block", "link-to", ["templates.colors"], ["class", "cs-workspace-section-goto"], 1, null, ["loc", [null, [7, 4], [7, 88]]]]],
          locals: [],
          templates: [child0, child1]
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(2);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "workspace/workspace-header", [], [], 0, null, ["loc", [null, [2, 2], [4, 33]]]], ["block", "workspace/workspace-content", [], [], 1, null, ["loc", [null, [5, 2], [8, 34]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 11,
                "column": 2
              },
              "end": {
                "line": 12,
                "column": 2
              }
            },
            "moduleName": "cornerstone/templates/index/template.hbs"
          },
          isEmpty: true,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 10,
              "column": 0
            },
            "end": {
              "line": 13,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/index/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "common/welcome-message", [], ["title", ["subexpr", "t", ["app.templates.welcome"], [], ["loc", [null, [11, 34], [11, 61]]], 0, 0]], 0, null, ["loc", [null, [11, 2], [12, 29]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 14,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/index/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "workspace/cs-workspace", [], [], 0, null, ["loc", [null, [1, 0], [9, 27]]]], ["block", "global/cs-canvas", [], [], 1, null, ["loc", [null, [10, 0], [13, 21]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("cornerstone/templates/not-found", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/not-found.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/partials/bar/builder-page", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 3,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/bar/builder-page.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "fa-icon", ["object-group"], [], ["loc", [null, [5, 2], [5, 28]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 7,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/bar/builder-page.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(3);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        morphs[2] = dom.createMorphAt(fragment, 4, 4, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", ["partials/bar/css"], [], ["loc", [null, [1, 0], [1, 30]]], 0, 0], ["inline", "partial", ["partials/bar/js"], [], ["loc", [null, [2, 0], [2, 29]]], 0, 0], ["block", "global/bar-button", [], ["class", "cs-action-toggle-skeleton-mode", "active", ["subexpr", "@mut", [["get", "ui.skeletonModeActive", ["loc", [null, [3, 67], [3, 88]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "skeletonModeActive"], ["target", ["get", "ui", ["loc", [null, [3, 141], [3, 143]]], 0, 0, 0, 0]], ["loc", [null, [3, 96], [3, 144]]], 0, 0]], 0, null, ["loc", [null, [3, 0], [6, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/bar/css", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/bar/css.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  CSS\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes() {
          return [];
        },
        statements: [],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/bar/css.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/bar-button", [], ["class", "cs-action-toggle-custom-css", "active", ["subexpr", "@mut", [["get", "ui.showCustomCSS", ["loc", [null, [1, 64], [1, 80]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "showCustomCSS"], ["target", ["get", "ui", ["loc", [null, [1, 128], [1, 130]]], 0, 0, 0, 0]], ["loc", [null, [1, 88], [1, 131]]], 0, 0]], 0, null, ["loc", [null, [1, 0], [3, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/bar/fonts", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/bar/fonts.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "cs-icon", ["interface/action-btn-fonts"], [], ["loc", [null, [2, 2], [2, 42]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/bar/fonts.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/bar-button", [], ["class", "cs-action-toggle-font-config", "active", ["subexpr", "@mut", [["get", "ui.showFontConfig", ["loc", [null, [1, 65], [1, 82]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "showFontConfig"], ["target", ["get", "ui", ["loc", [null, [1, 131], [1, 133]]], 0, 0, 0, 0]], ["loc", [null, [1, 90], [1, 134]]], 0, 0]], 0, null, ["loc", [null, [1, 0], [3, 22]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/bar/footer", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "moduleName": "cornerstone/templates/partials/bar/footer.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", ["partials/bar/css"], [], ["loc", [null, [1, 0], [1, 30]]], 0, 0], ["inline", "partial", ["partials/bar/js"], [], ["loc", [null, [2, 0], [2, 29]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/partials/bar/header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 29
          }
        },
        "moduleName": "cornerstone/templates/partials/bar/header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 2, 2, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["inline", "partial", ["partials/bar/css"], [], ["loc", [null, [1, 0], [1, 30]]], 0, 0], ["inline", "partial", ["partials/bar/js"], [], ["loc", [null, [2, 0], [2, 29]]], 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define("cornerstone/templates/partials/bar/js", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 4,
                "column": 2
              }
            },
            "moduleName": "cornerstone/templates/partials/bar/js.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "icon", ["interface/js"], [], ["loc", [null, [3, 4], [3, 27]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/bar/js.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "global/bar-button", [], ["class", "cs-action-toggle-custom-js", "active", ["subexpr", "@mut", [["get", "ui.showCustomJS", ["loc", [null, [2, 65], [2, 80]]], 0, 0, 0, 0]], [], [], 0, 0], "action", ["subexpr", "action", ["toggle", "showCustomJS"], ["target", ["get", "ui", ["loc", [null, [2, 127], [2, 129]]], 0, 0, 0, 0]], ["loc", [null, [2, 88], [2, 130]]], 0, 0]], 0, null, ["loc", [null, [2, 2], [4, 24]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/bar/js.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "currentUser.useUnfilteredHTML", ["loc", [null, [1, 6], [1, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/bar/options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/bar/options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["partials/bar/css"], [], ["loc", [null, [2, 2], [2, 32]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 4,
              "column": 0
            },
            "end": {
              "line": 6,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/bar/options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "partial", ["partials/bar/js"], [], ["loc", [null, [5, 2], [5, 31]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 7
          }
        },
        "moduleName": "cornerstone/templates/partials/bar/options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.customCSS", ["loc", [null, [1, 6], [1, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 7]]]], ["block", "if", [["get", "model.customJS", ["loc", [null, [4, 6], [4, 20]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [4, 0], [6, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("cornerstone/templates/partials/controls/control-header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 5,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/controls/control-header.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-control-header");
          var el2 = dom.createTextNode("\n    ");
          dom.appendChild(el1, el2);
          var el2 = dom.createElement("label");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          var el2 = dom.createTextNode("\n  ");
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createUnsafeMorphAt(dom.childAt(fragment, [1, 1]), 0, 0);
          return morphs;
        },
        statements: [["content", "label", ["loc", [null, [3, 11], [3, 22]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 6,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/controls/control-header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "showHeader", ["loc", [null, [1, 6], [1, 16]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [5, 7]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/controls/input-list-item-header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 47
              },
              "end": {
                "line": 2,
                "column": 71
              }
            },
            "moduleName": "cornerstone/templates/partials/controls/input-list-item-header.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createUnsafeMorphAt(fragment, 0, 0, contextualElement);
            dom.insertBoundary(fragment, 0);
            dom.insertBoundary(fragment, null);
            return morphs;
          },
          statements: [["content", "label", ["loc", [null, [2, 60], [2, 71]]], 0, 0, 0, 0]],
          locals: [],
          templates: []
        };
      })();
      var child1 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 71
              },
              "end": {
                "line": 2,
                "column": 85
              }
            },
            "moduleName": "cornerstone/templates/partials/controls/input-list-item-header.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode(" ");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/controls/input-list-item-header.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createElement("div");
          dom.setAttribute(el1, "class", "cs-control-input-list-label");
          var el2 = dom.createElement("span");
          var el3 = dom.createComment("");
          dom.appendChild(el2, el3);
          dom.appendChild(el1, el2);
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(dom.childAt(fragment, [0, 0]), 0, 0);
          return morphs;
        },
        statements: [["block", "if", [["get", "label", ["loc", [null, [2, 53], [2, 58]]], 0, 0, 0, 0]], [], 0, 1, ["loc", [null, [2, 47], [2, 92]]]]],
        locals: [],
        templates: [child0, child1]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 3,
            "column": 11
          }
        },
        "moduleName": "cornerstone/templates/partials/controls/input-list-item-header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "unless", [["get", "deeplyNested", ["loc", [null, [1, 10], [1, 22]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [3, 11]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/global/footer", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/global/footer.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "global/code-editor", [], ["title", "Footer JS", "active", ["subexpr", "@mut", [["get", "ui.showCustomJS", ["loc", [null, [5, 11], [5, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "model.footer.settings.customJS", ["loc", [null, [6, 10], [6, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "run", ["subexpr", "action", ["runCustomJs"], [], ["loc", [null, [7, 8], [7, 30]]], 0, 0]], ["loc", [null, [3, 2], [8, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/global/footer.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-external");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 2, 2);
        return morphs;
      },
      statements: [["block", "if", [["get", "currentUser.useUnfilteredHTML", ["loc", [null, [2, 6], [2, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [9, 7]]]], ["inline", "global/code-editor", [], ["title", "Footer CSS", "active", ["subexpr", "@mut", [["get", "ui.showCustomCSS", ["loc", [null, [10, 47], [10, 63]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "model.footer.settings.customCSS", ["loc", [null, [10, 70], [10, 101]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 0], [10, 103]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/global/header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 2,
              "column": 0
            },
            "end": {
              "line": 9,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/global/header.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "global/code-editor", [], ["title", "Header JS", "active", ["subexpr", "@mut", [["get", "ui.showCustomJS", ["loc", [null, [5, 11], [5, 26]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "model.header.settings.customJS", ["loc", [null, [6, 10], [6, 40]]], 0, 0, 0, 0]], [], [], 0, 0], "run", ["subexpr", "action", ["runCustomJs"], [], ["loc", [null, [7, 8], [7, 30]]], 0, 0]], ["loc", [null, [3, 2], [8, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 12,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/global/header.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createElement("div");
        dom.setAttribute(el1, "class", "cs-external");
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createComment("");
        dom.appendChild(el1, el2);
        var el2 = dom.createTextNode("\n");
        dom.appendChild(el1, el2);
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var element0 = dom.childAt(fragment, [0]);
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(element0, 1, 1);
        morphs[1] = dom.createMorphAt(element0, 2, 2);
        return morphs;
      },
      statements: [["block", "if", [["get", "currentUser.useUnfilteredHTML", ["loc", [null, [2, 6], [2, 35]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [2, 0], [9, 7]]]], ["inline", "global/code-editor", [], ["title", "Header CSS", "active", ["subexpr", "@mut", [["get", "ui.showCustomCSS", ["loc", [null, [10, 47], [10, 63]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "model.header.settings.customCSS", ["loc", [null, [10, 70], [10, 101]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [10, 0], [10, 103]]], 0, 0]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/partials/global/options", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/global/options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["inline", "global/code-editor", [], ["title", "Global CSS", "active", ["subexpr", "@mut", [["get", "ui.showCustomCSS", ["loc", [null, [4, 11], [4, 27]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "model.customCSS.value", ["loc", [null, [5, 10], [5, 31]]], 0, 0, 0, 0]], [], [], 0, 0]], ["loc", [null, [2, 2], [6, 4]]], 0, 0]],
        locals: [],
        templates: []
      };
    })();
    var child1 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 9,
                "column": 2
              },
              "end": {
                "line": 16,
                "column": 2
              }
            },
            "moduleName": "cornerstone/templates/partials/global/options.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createComment("");
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
            var morphs = new Array(1);
            morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
            return morphs;
          },
          statements: [["inline", "global/code-editor", [], ["title", "Global JS", "active", ["subexpr", "@mut", [["get", "ui.showCustomJS", ["loc", [null, [12, 13], [12, 28]]], 0, 0, 0, 0]], [], [], 0, 0], "value", ["subexpr", "@mut", [["get", "model.customJS.value", ["loc", [null, [13, 12], [13, 32]]], 0, 0, 0, 0]], [], [], 0, 0], "run", ["subexpr", "action", ["runCustomJs"], [], ["loc", [null, [14, 10], [14, 32]]], 0, 0]], ["loc", [null, [10, 4], [15, 6]]], 0, 0]],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 8,
              "column": 0
            },
            "end": {
              "line": 17,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/partials/global/options.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "if", [["get", "currentUser.useUnfilteredHTML", ["loc", [null, [9, 8], [9, 37]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [9, 2], [16, 9]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 18,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/partials/global/options.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(2);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        morphs[1] = dom.createMorphAt(fragment, 1, 1, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "if", [["get", "model.customCSS", ["loc", [null, [1, 6], [1, 21]]], 0, 0, 0, 0]], [], 0, null, ["loc", [null, [1, 0], [7, 7]]]], ["block", "if", [["get", "model.customJS", ["loc", [null, [8, 6], [8, 20]]], 0, 0, 0, 0]], [], 1, null, ["loc", [null, [8, 0], [17, 7]]]]],
      locals: [],
      templates: [child0, child1]
    };
  })());
});
define("cornerstone/templates/redirect", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 2,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/redirect.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        var el1 = dom.createTextNode("\n");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        return morphs;
      },
      statements: [["content", "outlet", ["loc", [null, [1, 0], [1, 10]]], 0, 0, 0, 0]],
      locals: [],
      templates: []
    };
  })());
});
define('cornerstone/templates/route', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Route.extend({

    setupController: function setupController(controller, model) {
      this._super(controller, model);
      this.get('ui').setRouteUI(this);
    }

  });
});
define("cornerstone/templates/template", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 3,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/template.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createTextNode("  ");
          dom.appendChild(el0, el1);
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          var el1 = dom.createTextNode("\n");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 1, 1, contextualElement);
          return morphs;
        },
        statements: [["content", "outlet", ["loc", [null, [2, 2], [2, 12]]], 0, 0, 0, 0]],
        locals: [],
        templates: []
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 4,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/template.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "templates"], 0, null, ["loc", [null, [1, 0], [3, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/templates/unauthorized", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template((function () {
    var child0 = (function () {
      var child0 = (function () {
        return {
          meta: {
            "revision": "Ember@2.8.0",
            "loc": {
              "source": null,
              "start": {
                "line": 2,
                "column": 2
              },
              "end": {
                "line": 6,
                "column": 2
              }
            },
            "moduleName": "cornerstone/templates/unauthorized.hbs"
          },
          isEmpty: false,
          arity: 0,
          cachedFragment: null,
          hasRendered: false,
          buildFragment: function buildFragment(dom) {
            var el0 = dom.createDocumentFragment();
            var el1 = dom.createTextNode("    ");
            dom.appendChild(el0, el1);
            var el1 = dom.createElement("div");
            dom.setAttribute(el1, "class", "cs-welcome");
            var el2 = dom.createTextNode("\n      ");
            dom.appendChild(el1, el2);
            var el2 = dom.createElement("h3");
            dom.setAttribute(el2, "class", "cs-welcome-title");
            var el3 = dom.createElement("strong");
            var el4 = dom.createTextNode("Oops!");
            dom.appendChild(el3, el4);
            dom.appendChild(el2, el3);
            var el3 = dom.createTextNode(" Looks like you're trying to view something you're not allowed to access. Check your permissions in the plugin settings.");
            dom.appendChild(el2, el3);
            dom.appendChild(el1, el2);
            var el2 = dom.createTextNode("\n    ");
            dom.appendChild(el1, el2);
            dom.appendChild(el0, el1);
            var el1 = dom.createTextNode("\n");
            dom.appendChild(el0, el1);
            return el0;
          },
          buildRenderNodes: function buildRenderNodes() {
            return [];
          },
          statements: [],
          locals: [],
          templates: []
        };
      })();
      return {
        meta: {
          "revision": "Ember@2.8.0",
          "loc": {
            "source": null,
            "start": {
              "line": 1,
              "column": 0
            },
            "end": {
              "line": 7,
              "column": 0
            }
          },
          "moduleName": "cornerstone/templates/unauthorized.hbs"
        },
        isEmpty: false,
        arity: 0,
        cachedFragment: null,
        hasRendered: false,
        buildFragment: function buildFragment(dom) {
          var el0 = dom.createDocumentFragment();
          var el1 = dom.createComment("");
          dom.appendChild(el0, el1);
          return el0;
        },
        buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
          var morphs = new Array(1);
          morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
          dom.insertBoundary(fragment, 0);
          dom.insertBoundary(fragment, null);
          return morphs;
        },
        statements: [["block", "global/cs-canvas", [], [], 0, null, ["loc", [null, [2, 2], [6, 23]]]]],
        locals: [],
        templates: [child0]
      };
    })();
    return {
      meta: {
        "revision": "Ember@2.8.0",
        "loc": {
          "source": null,
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 8,
            "column": 0
          }
        },
        "moduleName": "cornerstone/templates/unauthorized.hbs"
      },
      isEmpty: false,
      arity: 0,
      cachedFragment: null,
      hasRendered: false,
      buildFragment: function buildFragment(dom) {
        var el0 = dom.createDocumentFragment();
        var el1 = dom.createComment("");
        dom.appendChild(el0, el1);
        return el0;
      },
      buildRenderNodes: function buildRenderNodes(dom, fragment, contextualElement) {
        var morphs = new Array(1);
        morphs[0] = dom.createMorphAt(fragment, 0, 0, contextualElement);
        dom.insertBoundary(fragment, 0);
        dom.insertBoundary(fragment, null);
        return morphs;
      },
      statements: [["block", "global/cs-window", [], ["screen", "unauthorized"], 0, null, ["loc", [null, [1, 0], [7, 21]]]]],
      locals: [],
      templates: [child0]
    };
  })());
});
define("cornerstone/transforms/control-mixins/menu", ["exports"], function (exports) {
  exports["default"] = function () /* mixin */{};
});
define('cornerstone/transforms/controls/atts', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (control.keys.id) {

      control.controls.push({
        key: control.keys.id,
        type: 'text',
        label: 'ID',
        options: {
          monospace: true
        }
      });
    }

    if (control.keys['class']) {

      control.controls.push({
        key: control.keys['class'],
        type: 'text',
        label: 'Class',
        options: {
          monospace: true
        }
      });
    }

    if (control.keys.style) {

      control.controls.push({
        key: control.keys.style,
        type: 'textarea',
        label: 'Inline CSS',
        options: {
          height: 5 - control.controls.length,
          monospace: true
        }
      });
    }

    return control;
  };
});
define('cornerstone/transforms/controls/audio', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (control.keys.url) {

      control.controls.push({
        key: control.keys.url,
        type: 'text',
        label: 'Audio URL',
        options: {
          placeholder: 'http://example.com/a.mp3'
        }
      });
    }

    if (control.keys.preload) {

      control.controls.push({
        key: control.keys.preload,
        type: 'select',
        label: 'Preload<br>Content',
        options: {
          choices: [{ value: 'none', label: 'None' }, { value: 'auto', label: 'Auto' }, { value: 'metadata', label: 'Metadata' }]
        }
      });
    }

    var allowed = ['advanced', 'loop', 'autoplay'];
    if (_ember['default'].A(Object.keys(control.keys)).any(function (key) {
      return allowed.includes(key);
    })) {

      var list = [];

      if (control.keys.advanced) {
        list.push({
          key: 'advanced',
          label: 'Advanced',
          half: true
        });
      }

      if (control.keys.loop) {
        list.push({
          key: 'loop',
          label: 'Loop',
          half: true
        });
      }

      if (control.keys.autoplay) {
        list.push({
          key: 'autoplay',
          label: 'Autoplay',
          half: true
        });
      }

      var keys = {};
      for (var key in control.keys) {
        if (allowed.includes(key)) {
          keys[key] = control.keys[key];
        }
      }

      control.controls.push({
        keys: keys,
        type: 'checkbox-list',
        label: 'Display &<br>Function',
        options: {
          list: list
        }
      });
    }

    delete control.keys;
    return control;
  };
});
define('cornerstone/transforms/controls/border-radius', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'dimensions';

    if (!control.options.labels) {
      control.options.labels = {
        top: 'Top<br>Left',
        right: 'Top<br>Right',
        bottom: 'Bttm<br>Right',
        left: 'Bttm<br>Left'
      };
    }

    var defaults = {
      valid_keywords: ['inherit', 'calc'],
      ranges: { em: { max: 10 }, rem: { max: 10 } }
    };

    control.default_options = {
      top: defaults,
      right: defaults,
      bottom: defaults,
      left: defaults
    };

    return control;
  };
});
define('cornerstone/transforms/controls/choose', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'choose-single';

    return control;
  };
});
define('cornerstone/transforms/controls/font-style', ['exports', 'ember'], function (exports, _ember) {
  var htmlSafe = _ember['default'].String.htmlSafe;

  exports['default'] = function (control) {

    control.type = 'choose';
    control.label = 'Font Style';
    control.options = {
      choices: [{
        value: 'normal',
        label: htmlSafe('Normal')
      }, {
        value: 'italic',
        label: htmlSafe('<i>Italic</i>')
      }]
    };

    return control;
  };
});
define('cornerstone/transforms/controls/info', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (control.keys.type) {

      control.controls.push({
        key: control.keys.type,
        type: 'choose',
        label: 'Type',
        options: {
          choices: [{
            value: 'tooltip',
            label: 'Normal'
          }, {
            value: 'popover',
            label: 'Popover'
          }]
        }
      });
    }

    if (control.keys.placement) {

      control.controls.push({
        key: control.keys.placement,
        type: 'choose',
        label: 'Placement',
        options: {
          choices: [{
            value: 'top',
            icon: 'arrow-up',
            tooltip: 'Top'
          }, {
            value: 'right',
            icon: 'arrow-right',
            tooltip: 'Right'
          }, {
            value: 'bottom',
            icon: 'arrow-down',
            tooltip: 'Bottom'
          }, {
            value: 'left',
            icon: 'arrow-left',
            tooltip: 'Left'
          }]
        }
      });
    }

    if (control.keys.trigger) {

      control.controls.push({
        key: control.keys.trigger,
        type: 'select',
        label: 'Trigger',
        options: {
          choices: [{
            value: 'hover',
            label: 'Hover'
          }, {
            value: 'focus',
            label: 'Focus'
          }, {
            value: 'click',
            label: 'Click'
          }]
        }
      });
    }

    if (control.keys.title) {

      control.controls.push({
        key: control.keys.title,
        type: 'text',
        label: 'Title',
        options: {
          placeholder: _ember['default'].isPresent(control.options.title_placeholder) ? control.options.title_placeholder : ''
        }
      });
    }

    if (control.keys.content) {

      control.controls.push({
        key: control.keys.content,
        type: 'text',
        label: 'Content',
        options: {
          placeholder: _ember['default'].isPresent(control.options.content_placeholder) ? control.options.content_placeholder : ''
        },
        condition: { key: control.keys.type, value: 'popover' }
      });
    }

    return control;
  };
});
define('cornerstone/transforms/controls/margin', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'dimensions';

    if (!control.options.labels) {
      control.options.labels = {
        bottom: 'Bttm'
      };
    }

    var defaults = {
      available_units: ['px', 'em', 'rem', '%', 'vw', 'vh'],
      valid_keywords: ['auto', 'calc'],
      ranges: {
        px: { min: -50, max: 50 },
        em: { min: -2.5 },
        rem: { min: -2.5 },
        '%': { min: -50, max: 50 },
        vw: { min: 1, max: 100 },
        vh: { min: 1, max: 100 }
      }
    };

    control.default_options = {
      top: defaults,
      right: defaults,
      bottom: defaults,
      left: defaults
    };

    return control;
  };
});
define('cornerstone/transforms/controls/menu', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'select';
    control.options = {
      choices: 'dynamic:menus'
    };

    return control;
  };
});
define('cornerstone/transforms/controls/multi-choose', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'choose-multi';

    return control;
  };
});
define('cornerstone/transforms/controls/omega', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.label = 'Setup';
    control.controls = [];

    if (control.keys.id) {

      control.controls.push({
        key: control.keys.id,
        type: 'text',
        label: 'ID'
      });
    }

    if (control.keys['class']) {

      control.controls.push({
        key: control.keys['class'],
        type: 'text',
        label: 'Class'
      });
    }

    if (control.keys.bp) {

      control.controls.push({
        key: control.keys.bp,
        type: 'multi-choose',
        label: 'Hide During<br>Breakpoints',
        options: {
          off_value: 'none',
          choices: [{ value: 'xl', icon: 'interface/preview-sizer-xl' }, { value: 'lg', icon: 'interface/preview-sizer-lg' }, { value: 'md', icon: 'interface/preview-sizer-md' }, { value: 'sm', icon: 'interface/preview-sizer-sm' }, { value: 'xs', icon: 'interface/preview-sizer-xs' }]
        }
      });
    }

    // if ( control.keys.login ) {
    //
    //   control.controls.push({
    //     key: control.keys.login,
    //     type: 'choose',
    //     label: 'Hide Per<br>User Status',
    //     options: {
    //       off_value: 'none',
    //       choices: [
    //         { value: 'logged_in',  label: 'Logged In'  },
    //         { value: 'logged_out', label: 'Logged Out' }
    //       ]
    //     }
    //   });
    //
    // }

    return control;
  };
});
define('cornerstone/transforms/controls/padding', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'dimensions';

    if (!control.options.labels) {
      control.options.labels = {
        bottom: 'Bttm'
      };
    }

    var defaults = {
      available_units: ['px', 'em', 'rem', '%', 'vw', 'vh'],
      valid_keywords: ['calc'],
      ranges: {
        '%': { max: 25 },
        vw: { min: 1, max: 100 },
        vh: { min: 1, max: 100 }
      }
    };

    control.default_options = {
      top: defaults,
      right: defaults,
      bottom: defaults,
      left: defaults
    };

    return control;
  };
});
define('cornerstone/transforms/controls/sidebar', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'select';
    control.options = {
      choices: 'dynamic:sidebars'
    };

    return control;
  };
});
define('cornerstone/transforms/controls/single-choose', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'choose-single';

    return control;
  };
});
define('cornerstone/transforms/controls/slider', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'unit-slider';

    return control;
  };
});
define('cornerstone/transforms/controls/text-align', ['exports'], function (exports) {
  // import Ember from 'ember';
  // const { htmlSafe } = Ember.String;

  exports['default'] = function (control) {

    control.type = 'choose';
    control.label = 'Text Align';
    control.options = {
      off_value: 'none',
      choices: [{
        value: 'left',
        icon: 'align-left',
        tooltip: 'Left'
      }, {
        value: 'center',
        icon: 'align-center',
        tooltip: 'Center'
      }, {
        value: 'right',
        icon: 'align-right',
        tooltip: 'Right'
      }, {
        value: 'justify',
        icon: 'align-justify',
        tooltip: 'Justify'
      }]
    };

    return control;
  };
});
define('cornerstone/transforms/controls/text-appearance', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'text-content';

    return control;
  };
});
define('cornerstone/transforms/controls/text-content', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (control.keys.tag) {

      control.controls.push({
        key: control.keys.tag,
        type: 'select',
        label: 'HTML Tag',
        options: {
          choices: control.options && control.options.tag ? control.options.tag : ['span', 'div', 'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']
        }
      });
    }

    if (control.keys.looks_like) {

      control.controls.push({
        key: control.keys.looks_like,
        type: 'select',
        label: 'Looks Like',
        options: {
          choices: control.options && control.options.looks_like ? control.options.looks_like : ['p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6']
        }
      });
    }

    if (control.keys.text) {

      control.controls.unshift({
        key: control.keys.text,
        type: 'textarea',
        label: 'Text',
        options: {
          height: 5 - control.controls.length
        }
      });
    }

    return control;
  };
});
define('cornerstone/transforms/controls/text-decoration', ['exports'], function (exports) {
  // import Ember from 'ember';
  // const { htmlSafe } = Ember.String;

  exports['default'] = function (control) {

    control.type = 'choose';
    control.label = 'Text Decoration';
    control.options = {
      off_value: 'none',
      choices: [{
        value: 'underline',
        icon: 'underline',
        tooltip: 'Underline'
      }, {
        value: 'line-through',
        icon: 'strikethrough',
        tooltip: 'Line Through'
      }]
      // choices: [ {
      //   value   : 'underline',
      //   icon    : 'underline',
      //   tooltip : 'Underline'
      // }, {
      //   value   : 'line-through',
      //   icon    : 'strikethrough',
      //   tooltip : 'Line Through'
      // }, {
      //   value   : 'overline',
      //   label   : htmlSafe( '<span class="ol">O</span>' ),
      //   tooltip : 'Overline'
      // } ]
    };

    return control;
  };
});
define('cornerstone/transforms/controls/text-format', ['exports', 'ember'], function (exports, _ember) {
  // const { htmlSafe } = Ember.String;

  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (control.keys.font_family) {

      control.controls.push({
        label: 'Font Family',
        key: control.keys.font_family,
        type: 'font-family'
      });

      if (control.keys.font_weight) {
        control.controls.push({
          label: 'Font Weight',
          keys: {
            value: control.keys.font_weight,
            font_family: control.keys.font_family
          },
          type: 'font-weight'
        });
      }
    }

    if (control.keys.font_size) {
      control.controls.push({
        label: 'Font Size',
        key: control.keys.font_size,
        type: 'unit-slider',
        options: _ember['default'].assign({
          available_units: ['px', 'em', 'rem'],
          valid_keywords: ['calc'],
          ranges: {
            px: { min: 0, max: 100, step: 1 },
            em: { min: 0, max: 5, step: 0.001 },
            rem: { min: 0, max: 5, step: 0.001 }
          }
        }, control.options.font_size)
      });
    }

    if (control.keys.letter_spacing) {
      control.controls.push({
        label: 'Letter Spacing',
        key: control.keys.letter_spacing,
        type: 'unit-slider',
        options: _ember['default'].assign({
          available_units: ['em', 'rem'],
          ranges: {
            em: { min: -0.15, max: 0.5, step: 0.001 },
            rem: { min: -0.15, max: 0.5, step: 0.001 }
          }
        }, control.options.letter_spacing)
      });
    }

    if (control.keys.line_height) {
      control.controls.push({
        label: 'Line Height',
        key: control.keys.line_height,
        type: 'unit-slider',
        options: _ember['default'].assign({
          unit_mode: 'unitless',
          min: 1,
          max: 2.5,
          step: 0.1
        }, control.options.line_height)
      });
    }

    return control;
  };
});
define('cornerstone/transforms/controls/text-style', ['exports', 'ember'], function (exports, _ember) {
  // const { htmlSafe } = Ember.String;

  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (control.keys.font_style) {
      control.controls.push({
        key: control.keys.font_style,
        type: 'font-style'
      });
    }

    if (control.keys.text_align) {
      control.controls.push({
        key: control.keys.text_align,
        type: 'text-align'
      });
    }

    if (control.keys.text_decoration) {
      control.controls.push({
        key: control.keys.text_decoration,
        type: 'text-decoration'
      });
    }

    if (control.keys.text_transform) {
      control.controls.push({
        key: control.keys.text_transform,
        type: 'text-transform'
      });
    }

    if (control.keys.text_color) {

      var keys = { value: control.keys.text_color };
      var options = {};

      if (control.keys.alt_color) {
        keys.alt = control.keys.alt_color;
        options.label = 'Base';
        options.alt_label = 'Hover';
      }

      if (control.options.color) {
        options = _ember['default'].merge(options, control.options.color);
      }

      control.controls.push({
        keys: keys,
        type: 'color',
        label: 'Text<br>Color',
        options: options
      });
    }

    return control;
  };
});
define('cornerstone/transforms/controls/text-transform', ['exports', 'ember'], function (exports, _ember) {
  var htmlSafe = _ember['default'].String.htmlSafe;

  exports['default'] = function (control) {

    control.type = 'choose';
    control.label = 'Text Transform';
    control.options = {
      off_value: 'none',
      choices: [{
        value: 'uppercase',
        label: htmlSafe('<span class="tt">TT</span>'),
        tooltip: 'Uppercase'
      }, {
        value: 'capitalize',
        label: htmlSafe('<span class="tt">Tt</span>'),
        tooltip: 'Capitalize'
      }, {
        value: 'lowercase',
        label: htmlSafe('<span class="tt">tt</span>'),
        tooltip: 'Lowercase'
      }]
    };

    return control;
  };
});
define('cornerstone/transforms/controls/video-embed', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (!control.keys.embed_code) {
      return false;
    }

    if (control.keys.aspect_ratio) {

      control.controls.push({
        key: control.keys.aspect_ratio,
        type: 'ratio',
        label: 'Aspect Ratio',
        options: {
          placeholder: '16:9'
        }
      });
    }

    if (control.keys.no_container) {

      control.controls.push({
        keys: {
          no_container: control.keys.no_container
        },
        type: 'checkbox-list',
        // label: '&nbsp;',
        options: {
          list: [{
            key: 'no_container',
            label: 'No Container'
          }]
        }
      });
    }

    if (control.keys.embed_code) {

      control.controls.unshift({
        key: control.keys.embed_code,
        type: 'textarea',
        label: 'Embed Code',
        options: {
          monospace: true,
          height: 5 - control.controls.length
        }
      });
    }

    return control;
  };
});
define('cornerstone/transforms/controls/video-options', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (control.keys.preload) {

      control.controls.push({
        key: control.keys.preload,
        type: 'select',
        label: 'Preload<br>Content',
        options: {
          choices: [{ value: 'none', label: 'None' }, { value: 'auto', label: 'Auto' }, { value: 'metadata', label: 'Metadata' }]
        }
      });
    }

    if (control.keys.aspect_ratio) {

      control.controls.push({
        key: control.keys.aspect_ratio,
        type: 'ratio',
        label: 'Aspect Ratio',
        options: {
          placeholder: '16:9'
        }
      });
    }

    var allowed = ['advanced', 'loop', 'no_controls', 'mute', 'autoplay', 'no_container'];
    if (_ember['default'].A(Object.keys(control.keys)).any(function (key) {
      return allowed.includes(key);
    })) {

      var list = [];

      if (control.keys.advanced) {
        list.push({
          key: 'advanced',
          label: 'Advanced',
          half: true
        });
      }

      if (control.keys.loop) {
        list.push({
          key: 'loop',
          label: 'Loop',
          half: true
        });
      }

      if (control.keys.no_controls) {
        list.push({
          key: 'no_controls',
          label: 'No Controls',
          half: true
        });
      }

      if (control.keys.mute) {
        list.push({
          key: 'mute',
          label: 'Mute',
          half: true
        });
      }

      if (control.keys.autoplay) {
        list.push({
          key: 'autoplay',
          label: 'Autoplay',
          half: true
        });
      }

      if (control.keys.no_container) {
        list.push({
          key: 'no_container',
          label: 'No Container',
          half: true
        });
      }

      var keys = {};
      for (var key in control.keys) {
        if (allowed.includes(key)) {
          keys[key] = control.keys[key];
        }
      }

      control.controls.push({
        keys: keys,
        type: 'checkbox-list',
        label: 'Display &<br>Function',
        options: {
          list: list
        }
      });
    }

    delete control.keys;
    return control;
  };
});
define('cornerstone/transforms/controls/video', ['exports'], function (exports) {
  exports['default'] = function (control) {

    control.type = 'group';
    control.controls = [];

    if (!control.keys.src || !control.keys.poster_img) {
      return null;
    }

    control.controls.push({
      key: control.keys.src,
      type: 'text',
      label: 'Video URL',
      options: {
        placeholder: 'http://example.com/v.mp4'
      }
    });

    control.controls.push({
      keys: {
        img_source: control.keys.poster_img
      },
      type: 'image',
      label: 'Poster<br>Image',
      options: {
        height: 4
      }
    });

    // debugger;
    return control;
  };
});
define("cornerstone/transforms/prefab", ["exports"], function (exports) {});
// import Ember from 'ember';
define('cornerstone/util/base64', ['exports', 'npm:base64-js', 'npm:js-base64'], function (exports, _npmBase64Js, _npmJsBase64) {
  // String operations

  var Base64 = {

    encode: function encode(str) {
      return _npmJsBase64['default'].Base64.encode(str);
    },

    decode: function decode(str) {
      return _npmJsBase64['default'].Base64.decode(str);
    },

    encodeFromByteArray: function encodeFromByteArray(str) {
      return _npmBase64Js['default'].fromByteArray(str);
    },

    decodeToByteArray: function decodeToByteArray(str) {
      return _npmBase64Js['default'].toByteArray(str);
    }
  };

  exports['default'] = Base64;
});
// Binary operations
define('cornerstone/util/coalescence-client', ['exports', 'ember', 'cornerstone/util/string-like'], function (exports, _ember, _cornerstoneUtilStringLike) {
  exports['default'] = compile;

  function stripUnit(val) {
    return val; // TODO: Implement here, and in coalescence
  }

  var operations = {
    eq: function eq(a, b) {
      return a == b; // eslint-disable-line eqeqeq
    },

    not_eq: function not_eq(a, b) {
      return a != b; // eslint-disable-line eqeqeq
    },

    strict_eq: function strict_eq(a, b) {
      return a === b;
    },

    not_strict_eq: function not_strict_eq(a, b) {
      return a !== b;
    },

    gt: function gt(a, b) {
      return stripUnit(a) > stripUnit(b);
    },

    lt: function lt(a, b) {
      return stripUnit(a) < stripUnit(b);
    },

    gte: function gte(a, b) {
      return stripUnit(a) >= stripUnit(b);
    },

    lte: function lte(a, b) {
      return stripUnit(a) <= stripUnit(b);
    },

    or: function or(a, b) {
      return a || b;
    },

    and: function and(a, b) {
      return a && b;
    },

    concat: function concat(a, b) {
      return '' + a + b;
    },

    nop: function nop(a) {
      return a;
    },

    like: _cornerstoneUtilStringLike['default'],

    empty: function empty(a) {

      // Cast to string
      a = !a ? '' : String(a);

      // Blank strings are considered empty
      if ('' === a) {
        return true;
      }

      // Assortment of CSS values considered empty
      return 0 === a.trim().split(' ').filter(function (val) {
        return !val.match(/^0[a-zA-Z%]+|0$|none$/);
      }).length;
    }

  };

  function compile(declarations, postProcessKeys, postProcess) {
    if (postProcessKeys === undefined) postProcessKeys = {};

    return function (data, classPrefix) {

      data = preProcess(data);
      data['_el'] = '' + classPrefix + data._id;

      function preProcess(data) {
        for (var key in data) {
          if (data.hasOwnProperty(key) && postProcessKeys[key]) {
            data[key] = '%%post ' + postProcessKeys[key] + '%%' + data[key] + '%%/post%%';
          }
        }
        return data;
      }

      function expand(template, keys) {
        return keys.reduce(function (output, key) {
          return output.replace(new RegExp('%%\\' + ('$' + key + '%%'), 'g'), data[key]);
        }, template);
      }

      function evaluate(_ref) {
        var a = _ref.a;
        var b = _ref.b;
        var op = _ref.op;

        function evaluateOperand(o, op) {

          if (o && (o.a || o.b) && o.op) {
            o = evaluate(o);
          }

          if (o && 'variable' === o.type) {

            if ('exists' === op) {
              return o.value;
            }

            o = _ember['default'].isNone(data[o.value]) ? false : data[o.value];
          }

          return o;
        }

        a = evaluateOperand(a, op);
        b = evaluateOperand(b, op);

        if ('exists' === op) {
          return !_ember['default'].isNone(data[a]);
        }

        op = operations[op] ? operations[op] : operations.nop;

        return op(a, b);
      }

      // Validate and process conditions
      var expanded = declarations.filter(function (dec) {

        if (!dec.selector || !dec.value) {
          return false;
        }

        if (!dec.conditions || _ember['default'].isEmpty(dec.conditions)) {
          return true;
        }

        // Evaluate expressions.
        // The filter return is inverted because we want successful conditions to return false
        return _ember['default'].isEmpty(dec.conditions.filter(function (_ref2) {
          var expression = _ref2.expression;
          var negate = _ref2.negate;

          var check = evaluate(expression);
          return negate ? check : !check;
        }));

        // Expand values into template
      }).map(function (dec) {
        return {
          selector: expand(dec.selector, dec.keys.selector),
          directive: dec.directive ? expand(dec.directive, dec.keys.directive) : 'root',
          value: expand(dec.value, dec.keys.value)
        };
      });

      // Group rules into their selectors
      var rules = { root: {} };
      expanded.forEach(function (dec) {

        if (!rules[dec.directive]) {
          rules[dec.directive] = {};
        }

        if (!rules[dec.directive][dec.selector]) {
          rules[dec.directive][dec.selector] = [];
        }

        rules[dec.directive][dec.selector].push(dec.value);
      });

      // Reduce into CSS string
      var cssOutput = Object.keys(rules).reduce(function (output, group) {

        if ('root' !== group) {
          output += group + ' {';
        }

        output += Object.keys(rules[group]).reduce(function (output, selector) {
          var properties = rules[group][selector].reduce(function (output, prop) {
            return output += prop + ';';
          }, '');
          return output += ' ' + selector + ' { ' + properties + ' }';
        }, '');

        if ('root' !== group) {
          output += group + '} ';
        }

        return output;
      }, '');

      if ('function' === typeof postProcess) {
        cssOutput = postProcess(cssOutput);
      }

      return cssOutput;
    };
  }
});
define('cornerstone/util/control-conditions', ['exports', 'ember'], function (exports, _ember) {
  exports.controlConditionChecker = controlConditionChecker;
  exports.normalizeControlCondition = normalizeControlCondition;
  exports.validateControlConditions = validateControlConditions;

  var ops = ['=', '==', '!=', '>', '>=', '<', '<=', 'LIKE', 'NOT LIKE', 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN'];

  function normalizeBool(a) {
    if ('' === a || !a) {
      return false;
    }
    return true;
  }

  function controlConditionChecker(a, b, op) {
    if ('boolean' === typeof a || 'boolean' === typeof b) {
      a = normalizeBool(a);
      b = normalizeBool(b);
    }

    if ('=' === op || '==' === op) {
      return a == b; // eslint-disable-line eqeqeq
    }

    if ('!=' === op) {
      return a != b; // eslint-disable-line eqeqeq
    }

    if ('IN' === op) {
      return a.includes(b);
    }

    if ('NOT IN' === op) {
      return !a.includes(b);
    }

    return true;
  }

  function normalizeControlCondition(_x) {
    var _again = true;

    _function: while (_again) {
      var condition = _x;
      _again = false;

      if (_ember['default'].isEmpty(condition)) {
        return {};
      }

      if (!_ember['default'].isNone(condition.option) && _ember['default'].isNone(condition.key)) {
        condition.key = condition.option;
      }

      if (_ember['default'].isPresent(condition.key) && _ember['default'].isPresent(condition.value)) {

        if (!_ember['default'].isPresent(condition.op) || !ops.includes(condition.op)) {
          condition.op = '==';
        }

        return {
          key: condition.key,
          value: condition.value,
          op: condition.op
        };
      } else {
        var key = Object.keys(condition)[0];
        _x = { key: key, value: condition[key] };
        _again = true;
        key = undefined;
        continue _function;
      }
    }
  }

  function validateControlConditions(condition) {
    return !_ember['default'].isNone(condition.key) && !_ember['default'].isNone(condition.value) && !_ember['default'].isNone(condition.op);
  }

  exports['default'] = controlConditionChecker;
});
define('cornerstone/util/control-proxy-builder', ['exports', 'ember', 'cornerstone/util/deep-assign', 'cornerstone/util/control-conditions', 'npm:uuid'], function (exports, _ember, _cornerstoneUtilDeepAssign, _cornerstoneUtilControlConditions, _npmUuid) {
  exports['default'] = controlProxyBuilder;

  function controlProxyBuilder(_ref) {
    var owner = _ref.owner;
    var sourcePath = _ref.sourcePath;
    var controls = _ref.controls;

    function normalize(item) {

      if (!item || !_ember['default'].isPresent(item.type)) {
        return false;
      }

      var control = {
        type: item.type,
        keys: _ember['default'].isPresent(item.keys) ? item.keys : {},
        label: '',
        conditions: _ember['default'].isPresent(item.conditions) ? item.conditions : [],
        options: _ember['default'].isPresent(item.options) ? item.options : {},
        group: _ember['default'].isPresent(item.group) ? item.group : ''
      };

      if (!Array.isArray(control.conditions)) {
        _ember['default'].Logger.warn('Control conditions must be an array', item);
        control.conditions = [];
      }

      if (_ember['default'].isPresent(item.key)) {
        // set 'value' to singular key
        control.keys.value = item.key;
      } else {
        // set 'value' to first available key
        var keys = Object.keys(control.keys);
        if (keys.length > 0) {
          control.keys.value = control.keys[keys[0]];
        }
      }

      if (_ember['default'].isPresent(item.default_options)) {
        control.options = (0, _cornerstoneUtilDeepAssign['default'])(_ember['default'].copy(item.default_options, true), control.options);
      }

      if (_ember['default'].isPresent(item.title)) {
        control.label = item.title;
      }

      if (_ember['default'].isPresent(item.label)) {
        control.label = item.label;
      }

      if (_ember['default'].isPresent(item.condition)) {
        control.conditions.push(item.condition);
      }

      if (_ember['default'].isPresent(item.controls)) {
        control._controls = item.controls;
      }

      if (_ember['default'].isPresent(item.index)) {
        control.searchIndex = item.index;
      }

      var internal = []; // formerly ['_region']

      control.conditions = control.conditions.map(_cornerstoneUtilControlConditions.normalizeControlCondition).filter(_cornerstoneUtilControlConditions.validateControlConditions).map(function (condition) {
        if (internal.includes(condition.key)) {
          condition.path = 'source.' + condition.key.substr(1);
        } else {
          condition.path = 'source.' + sourcePath + '.' + condition.key;
        }
        return condition;
      });

      var transform = owner.resolveRegistration('transform:controls/' + control.type);

      if ('function' === typeof transform && !control.originalType) {
        var originalType = control.type;
        control = normalize(transform(control));
        if (!control) {
          return false;
        }
        control.originalType = originalType;
      }

      return control;
    }

    function mapper(rawItem) {

      if (_ember['default'].isNone(rawItem)) {
        return null;
      }

      var item = normalize(rawItem);

      if (!item) {
        _ember['default'].Logger.warn('Invalid control mapping', rawItem);
        return null;
      }

      if (_ember['default'].isPresent(item._controls)) {
        item._controls = item._controls.map(mapper).filter(_ember['default'].isPresent);
      }

      var itemExcluded = false;

      if (item.conditions && item.conditions.length > 0) {

        var conditionKeys = item.conditions.map(function (condition) {
          return condition.path;
        });

        conditionKeys.push(function () {
          var _this = this;

          return item.conditions.filter(function (condition) {
            return !(0, _cornerstoneUtilControlConditions.controlConditionChecker)(condition.value, _this.get(condition.path), condition.op);
          }).length > 0;
        });

        itemExcluded = _ember['default'].computed.apply(_ember['default'], conditionKeys);
      }

      var properties = {
        id: _npmUuid['default'].v4(),
        itemExcluded: itemExcluded,
        excluded: _ember['default'].computed('itemExcluded', 'allChildrenHidden', function () {
          return this.get('itemExcluded') || this.get('allChildrenHidden');
        }),

        allChildrenHidden: _ember['default'].computed('controls.@each.excluded', function () {
          var controls = this.get('controls');
          if (_ember['default'].isNone(controls)) {
            return false;
          }

          return 0 >= controls.reduce(function (count, control) {
            if (control.get('excluded')) {
              count--;
            }
            return count;
          }, _ember['default'].get(controls, 'length'));
        }),

        indexLabel: _ember['default'].computed('excluded', 'controls.@each.excluded', function () {

          var search = this.getWithDefault('searchIndex', this.getWithDefault('label', false));

          if (this.get('excluded') || false === search) {
            return undefined;
          }

          return search + this.getWithDefault('controls', []).reduce(function (label, control) {
            return label + ' ' + control.getWithDefault('indexLabel', '');
          }, '');
        }),

        init: function init() {
          var _this2 = this;

          this._super.apply(this, arguments);
          var controls = this.get('_controls');
          if (controls) {
            (function () {
              var source = _this2.get('source');
              _this2.set('controls', controls.map(function (control) {
                return control.create({ source: source });
              }));
            })();
          }
        }
      };

      for (var key in item.keys) {
        if (item.keys.hasOwnProperty(key)) {
          var debounceRate = _ember['default'].getWithDefault(item, 'options.debounce.' + key, null);
          properties[_ember['default'].String.camelize('key-' + key)] = createPropertyBinding('source.' + sourcePath + '.' + item.keys[key], debounceRate);
        }
      }

      return _ember['default'].Object.extend(properties, item);

      function createPropertyBinding(path, debounceRate) {

        if (_ember['default'].isNone(debounceRate)) {
          return _ember['default'].computed.alias(path);
        }

        var rate = parseInt(debounceRate);
        rate = isNaN(rate) ? 10 : rate;

        return _ember['default'].computed(path, {
          get: function get() {
            return this.get(path);
          },
          set: function set(key, value) {
            _ember['default'].run.debounce(this, this.set, path, value, rate);
            return value;
          }
        });
      }
    }

    return function (source) {
      return controls.map(mapper).filter(_ember['default'].isPresent).map(function (factory) {
        return factory.create({ source: source });
      });
    };
  }
});
define('cornerstone/util/custom-media-manager', ['exports'], function (exports) {
  var setup = false;

  exports['default'] = function () {

    if (setup) {
      return;
    }
    setup = true;

    var media = window.wp.media;
    var l10n = media.view.l10n;

    window.wp.media.view.MediaFrame.Cornerstone = window.wp.media.view.MediaFrame.Post.extend({
      createStates: function createStates() {
        var options = this.options;

        this.states.add([

        // Main states.
        new media.controller.Library({
          id: 'insert',
          title: l10n.insertMediaTitle,
          priority: 20,
          toolbar: 'main-insert',
          filterable: 'all',
          library: media.query(options.library),
          multiple: options.multiple ? 'reset' : false,
          editable: true,

          // If the user isn't allowed to edit fields,
          // can they still edit it locally?
          allowLocalEdits: true,

          // Show the attachment display settings.
          displaySettings: false,

          // Update user settings when users adjust the
          // attachment display settings.
          displayUserSettings: true

        }),

        // new media.controller.Library({
        //   id:         'gallery',
        //   title:      l10n.createGalleryTitle,
        //   priority:   40,
        //   toolbar:    'main-gallery',
        //   filterable: 'uploaded',
        //   multiple:   'add',
        //   editable:   false,

        //   library:  media.query( _.defaults({
        //     type: 'image'
        //   }, options.library ) )
        // }),

        // Embed states.
        new media.controller.Embed({
          metadata: options.metadata
        }), // Adds "Insert From URL"

        new media.controller.EditImage({ model: options.editImage })]);

        // Gallery states.
        // new media.controller.GalleryEdit({
        //   library: options.selection,
        //   editing: options.editing,
        //   menu:    'gallery'
        // }),

        // new media.controller.GalleryAdd(),

        // new media.controller.Library({
        //   id:         'playlist',
        //   title:      l10n.createPlaylistTitle,
        //   priority:   60,
        //   toolbar:    'main-playlist',
        //   filterable: 'uploaded',
        //   multiple:   'add',
        //   editable:   false,

        //   library:  media.query( _.defaults({
        //     type: 'audio'
        //   }, options.library ) )
        // }),

        // // Playlist states.
        // new media.controller.CollectionEdit({
        //   type: 'audio',
        //   collectionType: 'playlist',
        //   title:          l10n.editPlaylistTitle,
        //   SettingsView:   media.view.Settings.Playlist,
        //   library:        options.selection,
        //   editing:        options.editing,
        //   menu:           'playlist',
        //   dragInfoText:   l10n.playlistDragInfo,
        //   dragInfo:       false
        // }),

        // new media.controller.CollectionAdd({
        //   type: 'audio',
        //   collectionType: 'playlist',
        //   title: l10n.addToPlaylistTitle
        // }),

        // new media.controller.Library({
        //   id:         'video-playlist',
        //   title:      l10n.createVideoPlaylistTitle,
        //   priority:   60,
        //   toolbar:    'main-video-playlist',
        //   filterable: 'uploaded',
        //   multiple:   'add',
        //   editable:   false,

        //   library:  media.query( _.defaults({
        //     type: 'video'
        //   }, options.library ) )
        // }),

        // new media.controller.CollectionEdit({
        //   type: 'video',
        //   collectionType: 'playlist',
        //   title:          l10n.editVideoPlaylistTitle,
        //   SettingsView:   media.view.Settings.Playlist,
        //   library:        options.selection,
        //   editing:        options.editing,
        //   menu:           'video-playlist',
        //   dragInfoText:   l10n.videoPlaylistDragInfo,
        //   dragInfo:       false
        // }),

        // new media.controller.CollectionAdd({
        //   type: 'video',
        //   collectionType: 'playlist',
        //   title: l10n.addToVideoPlaylistTitle
        // })
        if (media.view.settings.post.featuredImageId) {
          this.states.add(new media.controller.FeaturedImage());
        }
      }

    });

    //   initialize: function() {
    //     wp.media.view.MediaFrame.prototype.initialize.apply( this, arguments );

    //     _.defaults( this.options, {
    //       multiple:  true,
    //       editing:   false,
    //       state:  'insert'
    //     });

    //     this.createSelection();
    //     this.createStates();
    //     this.bindHandlers();
    //     this.createIframeStates();
    //   },

    //   createStates: function() {
    //   var options = this.options;

    //   // Add the default states.
    //   this.states.add([
    //     // Main states.
    //     new wp.media.controller.Library({
    //     id:   'insert',
    //     title:  'Insert Media',
    //     priority:   20,
    //     toolbar:  'main-insert',
    //     filterable: 'image',
    //     library:  wp.media.query( options.library ),
    //     multiple:   options.multiple ? 'reset' : false,
    //     editable:   true,

    //     // If the user isn't allowed to edit fields,
    //     // can they still edit it locally?
    //     allowLocalEdits: true,

    //     // Show the attachment display settings.
    //     displaySettings: true,
    //     // Update user settings when users adjust the
    //     // attachment display settings.
    //     displayUserSettings: true
    //     }),

    //     // Embed states.
    //     new wp.media.controller.Embed(),
    //   ]);

    //   if ( wp.media.view.settings.post.featuredImageId ) {
    //     this.states.add( new wp.media.controller.FeaturedImage() );
    //   }
    //   },

    //   bindHandlers: function() {
    //   // from Select
    //   this.on( 'router:create:browse', this.createRouter, this );
    //   this.on( 'router:render:browse', this.browseRouter, this );
    //   this.on( 'content:create:browse', this.browseContent, this );
    //   this.on( 'content:render:upload', this.uploadContent, this );
    //   this.on( 'toolbar:create:select', this.createSelectToolbar, this );
    //   //

    //   this.on( 'menu:create:gallery', this.createMenu, this );
    //   this.on( 'toolbar:create:main-insert', this.createToolbar, this );
    //   this.on( 'toolbar:create:main-gallery', this.createToolbar, this );
    //   this.on( 'toolbar:create:featured-image', this.featuredImageToolbar, this );
    //   this.on( 'toolbar:create:main-embed', this.mainEmbedToolbar, this );

    //   var handlers = {
    //     menu: {
    //       'default': 'mainMenu'
    //     },

    //     content: {
    //       'embed':    'embedContent',
    //       'edit-selection': 'editSelectionContent'
    //     },

    //     toolbar: {
    //       'main-insert':  'mainInsertToolbar'
    //     }
    //     };

    //   _.each( handlers, function( regionHandlers, region ) {
    //     _.each( regionHandlers, function( callback, handler ) {
    //     this.on( region + ':render:' + handler, this[ callback ], this );
    //     }, this );
    //   }, this );
    //   },

    //   // Menus
    //   mainMenu: function( view ) {
    //   view.set({
    //     'library-separator': new wp.media.View({
    //     className: 'separator',
    //     priority: 100
    //     })
    //   });
    //   },

    //   // Content
    //   embedContent: function() {
    //   var view = new wp.media.view.Embed({
    //     controller: this,
    //     model:  this.state()
    //   }).render();

    //   this.content.set( view );
    //   view.url.focus();
    //   },

    //   editSelectionContent: function() {
    //   var state = this.state(),
    //     selection = state.get('selection'),
    //     view;

    //   view = new wp.media.view.AttachmentsBrowser({
    //     controller: this,
    //     collection: selection,
    //     selection:  selection,
    //     model:  state,
    //     sortable:   true,
    //     search:   false,
    //     dragInfo:   true,

    //     AttachmentView: wp.media.view.Attachment.EditSelection
    //   }).render();

    //   view.toolbar.set( 'backToLibrary', {
    //     text:   'Return to Library',
    //     priority: -100,

    //     click: function() {
    //     this.controller.content.mode('browse');
    //     }
    //   });

    //   // Browse our library of attachments.
    //   this.content.set( view );
    //   },

    //   // Toolbars
    //   selectionStatusToolbar: function( view ) {
    //   var editable = this.state().get('editable');

    //   view.set( 'selection', new wp.media.view.Selection({
    //     controller: this,
    //     collection: this.state().get('selection'),
    //     priority:   -40,

    //     // If the selection is editable, pass the callback to
    //     // switch the content mode.
    //     editable: editable && function() {
    //     this.controller.content.mode('edit-selection');
    //     }
    //   }).render() );
    //   },

    //   mainInsertToolbar: function( view ) {
    //   var controller = this;

    //   this.selectionStatusToolbar( view );

    //   view.set( 'insert', {
    //     style:  'primary',
    //     priority: 80,
    //     text:   'Select Image',
    //     requires: { selection: true },

    //     click: function() {
    //     var state = controller.state(),
    //       selection = state.get('selection');

    //     controller.close();
    //     state.trigger( 'insert', selection ).reset();
    //     }
    //   });
    //   },

    //   featuredImageToolbar: function( toolbar ) {
    //   this.createSelectToolbar( toolbar, {
    //     text:  'Set Featured Image',
    //     state: this.options.state || 'upload'
    //   });
    //   },

    //   mainEmbedToolbar: function( toolbar ) {
    //   toolbar.view = new wp.media.view.Toolbar.Embed({
    //     controller: this,
    //     text: 'Insert Image'
    //   });
    //   }

    // });
  };
});
define('cornerstone/util/deep-assign', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = deepAssign;

  var hasOwnProp = Object.prototype.hasOwnProperty;
  var _propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function assignKey(to, from, key) {

    var val = from[key];

    if (_ember['default'].isNone(val)) {
      return;
    }

    var has = hasOwnProp.call(to, key);

    if (has && _ember['default'].isNone(to[key])) {
      throw new TypeError('Cannot convert undefined or null to object (' + key + ')');
    }

    to[key] = has && null !== val && ['object', 'function'].includes(typeof val) ? assign(Object(to[key]), from[key]) : val;
  }

  function assign(to, from) {
    if (to === from) {
      return to;
    }

    from = Object(from);

    for (var key in from) {
      if (hasOwnProp.call(from, key)) {
        assignKey(to, from, key);
      }
    }

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (_propIsEnumerable.call(from, symbols[i])) {
          assignKey(to, from, symbols[i]);
        }
      }
    }

    return to;
  }

  function deepAssign(target) {

    if (_ember['default'].isNone(target)) {
      throw new TypeError('Cannot convert undefined or null to object');
    }

    for (var s = 1; s < arguments.length; s++) {
      assign(Object(target), arguments[s]);
    }

    return target;
  }
});
//https://github.com/sindresorhus/deep-assign/blob/master/index.js
define('cornerstone/util/flatten-assignments', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = function (contexts) {
    var copy = _ember['default'].copy(contexts, true);
    if (!copy.reduce) {
      debugger;
    }
    return copy.reduce(function (memo, group) {

      var groupDivider = true;

      if (group.title) {
        // add group top level item
        memo[group.name] = {
          title: group.title,
          url: group.url,
          highlight: true,
          divider: true
        };
      } else {
        groupDivider = false;
      }

      if (group.items) {
        group.items.forEach(function (item, index) {

          var row = {
            group: group.name,
            title: item.title,
            url: item.url,
            tag: group.tag
          };

          if (0 === index && !groupDivider) {
            row.divider = true;
          }

          memo[group.name + '::' + item.value] = row;
        });
      }

      return memo;
    }, {});
  };
});
define('cornerstone/util/hex-encode', ['exports'], function (exports) {
  exports['default'] = function (value) {
    return value.split('').reduce(function (hex, char) {
      hex += char.charCodeAt(0).toString(16);
      return hex;
    }, '');
  };
});
define('cornerstone/util/split-on-whitespace', ['exports', 'ember'], function (exports, _ember) {

  // This works like value.split(' ') but allowing whitespace inside parentheses
  // Example: ["calc( 10px - 100% )", "10px", 10px", 10px" ]

  exports['default'] = function (value) {
    if (!value) {
      return [];
    }
    if ('string' !== _ember['default'].typeOf(value)) {
      return [value];
    }
    return value.match(/(?:[^\s]+\(.*?\))|[^\s]+/g);
  };
});
define('cornerstone/util/string-like', ['exports'], function (exports) {
  exports['default'] = stringLike;

  function stringLike(a, b) {

    // Cast to string
    a = !a ? '' : String(a);
    b = !b ? '' : String(b);

    var wildBefore = false;
    var wildAfter = false;

    if (0 === b.indexOf('%')) {
      wildBefore = true;
      b = b.substr(1);
    }

    if (b.length - 1 === b.indexOf('%')) {
      wildAfter = true;
      b = b.substr(0, b.length - 1);
    }

    if (wildBefore && wildAfter) {
      return -1 !== a.indexOf(b);
    }

    if (wildAfter) {
      return 0 === a.indexOf(b);
    }

    if (wildBefore) {
      return a.length - b.length === a.indexOf(b);
    }

    return a === b;
  }
});
define('cornerstone/utils/i18n/compile-template', ['exports', 'ember-i18n/utils/i18n/compile-template'], function (exports, _emberI18nUtilsI18nCompileTemplate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nCompileTemplate['default'];
    }
  });
});
define('cornerstone/utils/i18n/missing-message', ['exports', 'ember-i18n/utils/i18n/missing-message'], function (exports, _emberI18nUtilsI18nMissingMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberI18nUtilsI18nMissingMessage['default'];
    }
  });
});
define('cornerstone/utils/titleize', ['exports', 'ember-composable-helpers/utils/titleize'], function (exports, _emberComposableHelpersUtilsTitleize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersUtilsTitleize['default'];
    }
  });
});
define('cornerstone/vendor/dragula/classes', ['exports'], function (exports) {
  'use strict';

  var cache = {};
  var start = '(?:^|\\s)';
  var end = '(?:\\s|$)';

  function lookupClass(className) {
    var cached = cache[className];
    if (cached) {
      cached.lastIndex = 0;
    } else {
      cache[className] = cached = new RegExp(start + className + end, 'g');
    }
    return cached;
  }

  function addClass(el, className) {
    var current = el.className;
    if (!current.length) {
      el.className = className;
    } else if (!lookupClass(className).test(current)) {
      el.className += ' ' + className;
    }
  }

  function rmClass(el, className) {
    el.className = el.className.replace(lookupClass(className), ' ').trim();
  }

  var classes = {
    add: addClass,
    rm: rmClass
  };

  exports['default'] = classes;
});
define('cornerstone/vendor/dragula/dragula', ['exports', 'npm:contra/emitter', 'npm:crossvent', 'cornerstone/vendor/dragula/classes'], function (exports, _npmContraEmitter, _npmCrossvent, _cornerstoneVendorDragulaClasses) {
  'use strict';

  var doc = document;
  var documentElement = doc.documentElement;
  var global = window;

  function dragula(initialContainers, options) {
    var len = arguments.length;
    if (len === 1 && Array.isArray(initialContainers) === false) {
      options = initialContainers;
      initialContainers = [];
    }
    var _mirror; // mirror image
    var _source; // source container
    var _item; // item being dragged
    var _offsetX; // reference x
    var _offsetY; // reference y
    var _moveX; // reference move x
    var _moveY; // reference move y
    var _initialSibling; // reference sibling when grabbed
    var _currentSibling; // reference sibling now
    var _copy; // item used for copying
    var _renderTimer; // timer for setTimeout renderMirrorImage
    var _lastDropTarget = null; // last container item was over
    var _grabbed; // holds mousedown context until first mousemove

    var o = options || {};
    if (o.moves === void 0) {
      o.moves = always;
    }
    if (o.accepts === void 0) {
      o.accepts = always;
    }
    if (o.invalid === void 0) {
      o.invalid = invalidTarget;
    }
    if (o.containers === void 0) {
      o.containers = initialContainers || [];
    }
    if (o.isContainer === void 0) {
      o.isContainer = never;
    }
    if (o.copy === void 0) {
      o.copy = false;
    }
    if (o.copySortSource === void 0) {
      o.copySortSource = false;
    }
    if (o.revertOnSpill === void 0) {
      o.revertOnSpill = false;
    }
    if (o.removeOnSpill === void 0) {
      o.removeOnSpill = false;
    }
    if (o.direction === void 0) {
      o.direction = 'vertical';
    }
    if (o.ignoreInputTextSelection === void 0) {
      o.ignoreInputTextSelection = true;
    }
    if (o.mirrorContainer === void 0) {
      o.mirrorContainer = doc.body;
    }
    if (o.offset === void 0) {
      o.offset = thru;
    }

    var drake = (0, _npmContraEmitter['default'])({
      containers: o.containers,
      start: manualStart,
      end: end,
      cancel: cancel,
      remove: remove,
      destroy: destroy,
      canMove: canMove,
      dragging: false
    });

    if (o.removeOnSpill === true) {
      drake.on('over', spillOver).on('out', spillOut);
    }

    events();

    return drake;

    function isContainer(el) {
      return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
    }

    function events(remove) {
      var op = remove ? 'remove' : 'add';
      touchy(documentElement, op, 'mousedown', grab);
      touchy(documentElement, op, 'mouseup', release);
    }

    function eventualMovements(remove) {
      var op = remove ? 'remove' : 'add';
      touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
    }

    function movements(remove) {
      var op = remove ? 'remove' : 'add';
      _npmCrossvent['default'][op](documentElement, 'selectstart', preventGrabbed); // IE8
      _npmCrossvent['default'][op](documentElement, 'click', preventGrabbed);
    }

    function destroy() {
      events(true);
      release({});
    }

    function preventGrabbed(e) {
      if (_grabbed) {
        e.preventDefault();
      }
    }

    function grab(e) {
      _moveX = e.clientX;
      _moveY = e.clientY;

      var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;
      if (ignore) {
        return; // we only care about honest-to-god left clicks and touch events
      }
      var item = e.target;
      var context = canStart(item);
      if (!context) {
        return;
      }
      _grabbed = context;
      eventualMovements();
      if (e.type === 'mousedown') {
        if (isInput(item)) {
          // see also: https://github.com/bevacqua/dragula/issues/208
          item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
        } else {
            e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
          }
      }
    }

    function startBecauseMouseMoved(e) {
      if (!_grabbed) {
        return;
      }
      if (whichMouseButton(e) === 0) {
        release({});
        return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
      }
      // truthy check fixes #239, equality fixes #207
      if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
        return;
      }
      if (o.ignoreInputTextSelection) {
        var clientX = getCoord('clientX', e);
        var clientY = getCoord('clientY', e);
        var elementBehindCursor = doc.elementFromPoint(clientX, clientY);
        if (isInput(elementBehindCursor)) {
          return;
        }
      }

      var grabbed = _grabbed; // call to end() unsets _grabbed
      eventualMovements(true);
      movements();
      end();
      start(grabbed);

      var offset = getOffset(_item);
      var calculatedOffset = o.offset({
        x: getCoord('pageX', e) - offset.left,
        y: getCoord('pageY', e) - offset.top
      }, e, _item);

      _offsetX = calculatedOffset.x;
      _offsetY = calculatedOffset.y;

      _cornerstoneVendorDragulaClasses['default'].add(_copy || _item, 'gu-transit');
      renderMirrorImage();
      drag(e);
    }

    function canStart(item) {
      if (drake.dragging && _mirror) {
        return;
      }
      if (isContainer(item)) {
        return; // don't drag container itself
      }
      var handle = item;
      while (getParent(item) && isContainer(getParent(item)) === false) {
        if (o.invalid(item, handle)) {
          return;
        }
        item = getParent(item); // drag target should be a top element
        if (!item) {
          return;
        }
      }
      var source = getParent(item);
      if (!source) {
        return;
      }
      if (o.invalid(item, handle)) {
        return;
      }

      var movable = o.moves(item, source, handle, nextEl(item));
      if (!movable) {
        return;
      }

      return {
        item: item,
        source: source
      };
    }

    function canMove(item) {
      return !!canStart(item);
    }

    function manualStart(item) {
      var context = canStart(item);
      if (context) {
        start(context);
      }
    }

    function start(context) {
      if (isCopy(context.item, context.source)) {
        _copy = context.item.cloneNode(true);
        drake.emit('cloned', _copy, context.item, 'copy');
      }

      _source = context.source;
      _item = context.item;
      _initialSibling = _currentSibling = nextEl(context.item);

      drake.dragging = true;
      drake.emit('drag', _item, _source);
    }

    function invalidTarget() {
      return false;
    }

    function end() {
      if (!drake.dragging) {
        return;
      }
      var item = _copy || _item;
      drop(item, getParent(item));
    }

    function ungrab() {
      _grabbed = false;
      eventualMovements(true);
      movements(true);
    }

    function release(e) {
      ungrab();

      if (!drake.dragging) {
        return;
      }
      var item = _copy || _item;
      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
      var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
      if (dropTarget && (_copy && o.copySortSource || !_copy || dropTarget !== _source)) {
        drop(item, dropTarget);
      } else if (o.removeOnSpill) {
        remove();
      } else {
        cancel();
      }
    }

    function drop(item, target) {
      var parent = getParent(item);
      if (_copy && o.copySortSource && target === _source) {
        parent.removeChild(_item);
      }
      if (isInitialPlacement(target)) {
        drake.emit('cancel', item, _source, _source);
      } else {
        drake.emit('drop', item, target, _source, _currentSibling);
      }
      cleanup();
    }

    function remove() {
      if (!drake.dragging) {
        return;
      }
      var item = _copy || _item;
      var parent = getParent(item);
      if (parent) {
        parent.removeChild(item);
      }
      drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
      cleanup();
    }

    function cancel(revert) {
      if (!drake.dragging) {
        return;
      }
      var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
      var item = _copy || _item;
      var parent = getParent(item);
      var initial = isInitialPlacement(parent);
      if (initial === false && reverts) {
        if (_copy) {
          if (parent) {
            parent.removeChild(_copy);
          }
        } else {
          _source.insertBefore(item, _initialSibling);
        }
      }
      if (initial || reverts) {
        drake.emit('cancel', item, _source, _source);
      } else {
        drake.emit('drop', item, parent, _source, _currentSibling);
      }
      cleanup();
    }

    function cleanup() {
      var item = _copy || _item;
      ungrab();
      removeMirrorImage();
      if (item) {
        _cornerstoneVendorDragulaClasses['default'].rm(item, 'gu-transit');
      }
      if (_renderTimer) {
        clearTimeout(_renderTimer);
      }
      drake.dragging = false;
      if (_lastDropTarget) {
        drake.emit('out', item, _lastDropTarget, _source);
      }
      drake.emit('dragend', item);
      _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
    }

    function isInitialPlacement(target, s) {
      var sibling;
      if (s !== void 0) {
        sibling = s;
      } else if (_mirror) {
        sibling = _currentSibling;
      } else {
        sibling = nextEl(_copy || _item);
      }
      return target === _source && sibling === _initialSibling;
    }

    function findDropTarget(elementBehindCursor, clientX, clientY) {
      var target = elementBehindCursor;
      while (target && !accepted()) {
        target = getParent(target);
      }
      return target;

      function accepted() {
        var droppable = isContainer(target);
        if (droppable === false) {
          return false;
        }

        var immediate = getImmediateChild(target, elementBehindCursor);
        var reference = getReference(target, immediate, clientX, clientY);
        var initial = isInitialPlacement(target, reference);
        if (initial) {
          return true; // should always be able to drop it right back where it was
        }
        return o.accepts(_item, target, _source, reference);
      }
    }

    function drag(e) {
      if (!_mirror) {
        return;
      }
      e.preventDefault();

      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var x = clientX - _offsetX;
      var y = clientY - _offsetY;

      _mirror.style.left = x + 'px';
      _mirror.style.top = y + 'px';

      var item = _copy || _item;
      var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
      var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
      var changed = dropTarget !== null && dropTarget !== _lastDropTarget;
      if (changed || dropTarget === null) {
        out();
        _lastDropTarget = dropTarget;
        over();
      }
      var parent = getParent(item);
      if (dropTarget === _source && _copy && !o.copySortSource) {
        if (parent) {
          parent.removeChild(item);
        }
        return;
      }
      var reference;
      var immediate = getImmediateChild(dropTarget, elementBehindCursor);
      if (immediate !== null) {
        reference = getReference(dropTarget, immediate, clientX, clientY);
      } else if (o.revertOnSpill === true && !_copy) {
        reference = _initialSibling;
        dropTarget = _source;
      } else {
        if (_copy && parent) {
          parent.removeChild(item);
        }
        return;
      }
      if (reference === null && changed || reference !== item && reference !== nextEl(item)) {
        _currentSibling = reference;
        dropTarget.insertBefore(item, reference);
        drake.emit('shadow', item, dropTarget, _source);
      }
      function moved(type) {
        drake.emit(type, item, _lastDropTarget, _source);
      }
      function over() {
        if (changed) {
          moved('over');
        }
      }
      function out() {
        if (_lastDropTarget) {
          moved('out');
        }
      }
    }

    function spillOver(el) {
      _cornerstoneVendorDragulaClasses['default'].rm(el, 'gu-hide');
    }

    function spillOut(el) {
      if (drake.dragging) {
        _cornerstoneVendorDragulaClasses['default'].add(el, 'gu-hide');
      }
    }

    function renderMirrorImage() {
      if (_mirror) {
        return;
      }
      var rect = _item.getBoundingClientRect();
      _mirror = _item.cloneNode(true);
      _mirror.style.width = getRectWidth(rect) + 'px';
      _mirror.style.height = getRectHeight(rect) + 'px';
      _cornerstoneVendorDragulaClasses['default'].rm(_mirror, 'gu-transit');
      _cornerstoneVendorDragulaClasses['default'].add(_mirror, 'gu-mirror');
      o.mirrorContainer.appendChild(_mirror);
      touchy(documentElement, 'add', 'mousemove', drag);
      _cornerstoneVendorDragulaClasses['default'].add(o.mirrorContainer, 'gu-unselectable');
      drake.emit('cloned', _mirror, _item, 'mirror');
    }

    function removeMirrorImage() {
      if (_mirror) {
        _cornerstoneVendorDragulaClasses['default'].rm(o.mirrorContainer, 'gu-unselectable');
        touchy(documentElement, 'remove', 'mousemove', drag);
        getParent(_mirror).removeChild(_mirror);
        _mirror = null;
      }
    }

    function getImmediateChild(dropTarget, target) {
      var immediate = target;
      while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
        immediate = getParent(immediate);
      }
      if (immediate === documentElement) {
        return null;
      }
      return immediate;
    }

    function getReference(dropTarget, target, x, y) {
      var horizontal = o.direction === 'horizontal';
      var reference = target !== dropTarget ? inside() : outside();
      return reference;

      function outside() {
        // slower, but able to figure out any position
        var len = dropTarget.children.length;
        var i;
        var el;
        var rect;
        for (i = 0; i < len; i++) {
          el = dropTarget.children[i];
          rect = el.getBoundingClientRect();
          if (horizontal && rect.left + rect.width / 2 > x) {
            return el;
          }
          if (!horizontal && rect.top + rect.height / 2 > y) {
            return el;
          }
        }
        return null;
      }

      function inside() {
        // faster, but only available if dropped inside a child element
        var rect = target.getBoundingClientRect();
        if (horizontal) {
          return resolve(x > rect.left + getRectWidth(rect) / 2);
        }
        return resolve(y > rect.top + getRectHeight(rect) / 2);
      }

      function resolve(after) {
        return after ? nextEl(target) : target;
      }
    }

    function isCopy(item, container) {
      return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
    }
  }

  function touchy(el, op, type, fn) {
    var touch = {
      mouseup: 'touchend',
      mousedown: 'touchstart',
      mousemove: 'touchmove'
    };
    var pointers = {
      mouseup: 'pointerup',
      mousedown: 'pointerdown',
      mousemove: 'pointermove'
    };
    var microsoft = {
      mouseup: 'MSPointerUp',
      mousedown: 'MSPointerDown',
      mousemove: 'MSPointerMove'
    };
    if (global.navigator.pointerEnabled) {
      _npmCrossvent['default'][op](el, pointers[type], fn);
    } else if (global.navigator.msPointerEnabled) {
      _npmCrossvent['default'][op](el, microsoft[type], fn);
    } else {
      _npmCrossvent['default'][op](el, touch[type], fn);
      _npmCrossvent['default'][op](el, type, fn);
    }
  }

  function whichMouseButton(e) {
    if (e.touches !== void 0) {
      return e.touches.length;
    }
    if (e.which !== void 0 && e.which !== 0) {
      return e.which;
    } // see https://github.com/bevacqua/dragula/issues/261
    if (e.buttons !== void 0) {
      return e.buttons;
    }
    var button = e.button;
    if (button !== void 0) {
      // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
      return button & 1 ? 1 : button & 2 ? 3 : button & 4 ? 2 : 0;
    }
  }

  function getOffset(el) {
    var rect = el.getBoundingClientRect();
    return {
      left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
      top: rect.top + getScroll('scrollTop', 'pageYOffset')
    };
  }

  function getScroll(scrollProp, offsetProp) {
    if (typeof global[offsetProp] !== 'undefined') {
      return global[offsetProp];
    }
    if (documentElement.clientHeight) {
      return documentElement[scrollProp];
    }
    return doc.body[scrollProp];
  }

  function getElementBehindPoint(point, x, y) {
    var p = point || {};
    var state = p.className;
    var el;
    p.className += ' gu-hide';
    el = doc.elementFromPoint(x, y);
    p.className = state;
    return el;
  }

  function never() {
    return false;
  }
  function always() {
    return true;
  }
  function thru(val) {
    return val;
  }
  function getRectWidth(rect) {
    return rect.width || rect.right - rect.left;
  }
  function getRectHeight(rect) {
    return rect.height || rect.bottom - rect.top;
  }
  function getParent(el) {
    return el.parentNode === doc ? null : el.parentNode;
  }
  function isInput(el) {
    return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el);
  }
  function isEditable(_x) {
    var _again = true;

    _function: while (_again) {
      var el = _x;
      _again = false;

      if (!el) {
        return false;
      } // no parents were editable
      if (el.contentEditable === 'false') {
        return false;
      } // stop the lookup
      if (el.contentEditable === 'true') {
        return true;
      } // found a contentEditable element in the chain
      _x = getParent(el);
      _again = true;
      continue _function;
      // contentEditable is set to 'inherit'
    }
  }

  function nextEl(el) {
    return el.nextElementSibling || manually();
    function manually() {
      var sibling = el;
      do {
        sibling = sibling.nextSibling;
      } while (sibling && sibling.nodeType !== 1);
      return sibling;
    }
  }

  function getEventHost(e) {
    // on touchend event, we have to use `e.changedTouches`
    // see http://stackoverflow.com/questions/7192563/touchend-event-properties
    // see https://github.com/bevacqua/dragula/issues/34
    if (e.targetTouches && e.targetTouches.length) {
      return e.targetTouches[0];
    }
    if (e.changedTouches && e.changedTouches.length) {
      return e.changedTouches[0];
    }
    return e;
  }

  function getCoord(coord, e) {
    var host = getEventHost(e);
    var missMap = {
      pageX: 'clientX', // IE8
      pageY: 'clientY' // IE8
    };
    if (coord in missMap && !(coord in host) && missMap[coord] in host) {
      coord = missMap[coord];
    }
    return host[coord];
  }

  exports['default'] = dragula;

  // module.exports = dragula;
});
// 1.9.4
// 1.5.4
define('cornerstone/vendor/mousetrap', ['exports'], function (exports) {
  (function () {
    function vendorModule() {
      'use strict';

      return { 'default': self['mousetrap'] };
    }

    define('mousetrap', [], vendorModule);
  })();
});
define('cornerstone/xfr/mixins/agent', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Mixin.create({

    xfr: _ember['default'].inject.service(),
    xfrOrigin: 'unknown',
    xfrPendingRequests: {},
    xfrRequestQueue: _ember['default'].A(),
    xfrResponseQueue: _ember['default'].A(),

    init: function init() {
      this._super.apply(this, arguments);
      this.set('xfrOnMessage', this.get('_xfrOnMessage').bind(this));
      this.set('xfr.agent', this);
    },

    _xfrOnMessage: function _xfrOnMessage(e) {
      var _this = this;

      if (!e.data) {
        return;
      }

      var processJob = function processJob(job) {

        // console.log(`Processing job "${job.action}" on ${this.get('xfrOrigin')} from ${job.origin}`, job );
        // Resolve request promise for incoming reponse
        if ('response' === job.type && job.ts) {
          var cb = _this.get('xfrPendingRequests.' + job.ts);
          if ('function' === _ember['default'].typeOf(cb)) {
            cb(job.data);
          }
          return;
        }

        // Create a resolve callback for responding to this request
        var resolve = (function (response) {
          this.xfrSendMessage('response', { data: response, ts: job.ts });
        }).bind(_this);

        // Send a generic response if we don't need a reply, or nobody is listening
        if (job.noreply || !_this.get('xfr').has(job.action)) {
          resolve({ ack: true, request: job });
        }

        // Trigger actions on the XFR pub/sub. Pass resolve if a reply is needed.
        _this.get('xfr').trigger(job.action, job.data, job.noreply ? null : resolve, job.ts);
      };

      _ember['default'].run(function () {
        if (e.data.batch) {
          e.data.batch.forEach(processJob);
        } else {
          processJob(e.data);
        }
      });
    },

    xfrSendMessage: function xfrSendMessage(type, params, timeout) {

      var port = this.get('xfrMessagePort');

      if (!port) {
        _ember['default'].Logger.warn('Sending before port is ready', type, params);
        return;
      }

      var message = _ember['default'].assign({ type: type, origin: this.get('xfrOrigin') }, params);

      // Fire and forget response
      if ('response' === type) {

        this.get('xfrResponseQueue').push({ message: message });
        _ember['default'].run.debounce(this, this.flushResponses, 5);
        return;
      }

      message.ts = 'ts' + Date.now() + this.get('xfrRequestQueue.length');

      return new _ember['default'].RSVP.Promise((function (resolve, reject) {

        this.get('xfrRequestQueue').push({
          message: message,
          resolve: resolve,
          reject: reject,
          timeout: timeout
        });

        _ember['default'].run.debounce(this, this.flushRequests, 10);
      }).bind(this));
    },

    flushResponses: function flushResponses() {

      var batch = this.get('xfrResponseQueue').map((function (response) {
        return response.message;
      }).bind(this));

      this.get('xfrResponseQueue').clear();

      this.get('xfrMessagePort').postMessage({ batch: batch });
    },

    flushRequests: function flushRequests() {

      var clearPending = (function (key) {
        var pending = this.get('xfrPendingRequests');
        delete pending[key];
        this.set('pending', pending);
      }).bind(this);

      var batch = this.get('xfrRequestQueue').map((function (request) {
        if (request.message.noreply) {
          request.resolve();
          return request.message;
        }
        var timer = _ember['default'].run.later(this, function () {
          clearPending(request.message.ts);
          request.reject({
            error: true,
            message: 'Xfr request made by ' + this.get('xfrOrigin') + ' timed out',
            ts: request.message.ts,
            params: request.message
          });
        }, _ember['default'].isNone(request.timeout) ? 1000 : request.timeout);

        this.set('xfrPendingRequests.' + request.message.ts, function (response) {
          _ember['default'].run.cancel(timer);
          request.resolve(response);
          clearPending(request.message.ts);
        });

        return request.message;
      }).bind(this));

      this.get('xfrRequestQueue').clear();
      this.get('xfrMessagePort').postMessage({ batch: batch });
    },

    request: function request(action, data) {
      return this.xfrSendMessage('request', { action: action, data: data });
    },

    message: function message(action, data) {
      return this.xfrSendMessage('request', { action: action, data: data, noreply: true });
    }

  });
});
define('cornerstone/xfr/service', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Service.extend(_ember['default'].Evented, {
    request: function request() {
      var agent = this.get('agent');
      var args = arguments;
      if (agent) {
        return agent.request.apply(agent, arguments);
      } else {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          _ember['default'].debug('XFR service does not have an agent');
          _ember['default'].debug(args.action);
          resolve(undefined);
        });
      }
    },

    message: function message() {
      var agent = this.get('agent');
      var args = arguments;
      if (agent) {
        return agent.message.apply(agent, arguments);
      } else {
        return new _ember['default'].RSVP.Promise(function (resolve) {
          _ember['default'].debug('XFR service does not have an agent');
          _ember['default'].debug(args.action);
          resolve(undefined);
        });
      }
    }

  });
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('cornerstone/config/environment', ['ember'], function(Ember) {
  var exports = {'default': {"modulePrefix":"cornerstone","environment":"development","baseURL":"/","EmberENV":{"FEATURES":{}},"i18n":{"defaultLocale":"en"},"APP":{"name":"cornerstone","version":"1.0.0+485fa6d2"},"browserify":{"transform":[["aliasify",{"global":true}]]},"exportApplicationGlobal":true}};Object.defineProperty(exports, '__esModule', {value: true});return exports;
});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("cornerstone/app")["default"].create({"name":"cornerstone","version":"1.0.0+485fa6d2"});
}

/* jshint ignore:end */
//# sourceMappingURL=cs.map
